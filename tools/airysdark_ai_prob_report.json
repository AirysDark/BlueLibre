{
  "target": "android",
  "proposed_build_cmd": "./gradlew assembleDebug --stacktrace",
  "detector": {
    "types": [
      "linux",
      "android",
      "cmake"
    ],
    "evidence": {
      "linux": [
        "folder hint: linux",
        "CMakeLists.txt desktop-like: CMakeLists.txt",
        "CMakeLists.txt desktop-like: linux/CMakeLists.txt",
        "CMakeLists.txt desktop-like: android/app/src/main/cpp/CMakeLists.txt"
      ],
      "android": [
        "folder hint: android",
        "android/settings.gradle.kts",
        "android/build.gradle.kts",
        "android/app/build.gradle.kts"
      ],
      "cmake": [
        "CMakeLists.txt",
        "linux/CMakeLists.txt",
        "android/app/src/main/cpp/CMakeLists.txt"
      ]
    }
  },
  "repo": {
    "files": [
      "CMakePresets.json",
      "STOCK_BUILD.md",
      "README.md",
      ".editorconfig",
      "fix-android-apk.patch",
      "README-ANDROID-CI.md",
      "airpods_models.cpp",
      "WORKFLOWS_README.md",
      "LICENSE",
      "CMakeLists.txt",
      "AAP Definitions.md",
      "README.txt",
      "CONTRIBUTING.md",
      "linux.txt.txt",
      "intall.txt",
      "FUNDING.yml",
      "pr_body_build.md",
      "update.json",
      ".gitattributes",
      "pr_body.md",
      ".gitignore",
      "CODE_OF_CONDUCT.md",
      "clean_gradle_duplicates.sh",
      "update_nonpatch.json",
      "CHANGELOG.md",
      "Proximity Pairing Message.md",
      "imgs/banner.png",
      "linux/README.md",
      "linux/BasicControlCommand.hpp",
      "linux/KeysQRDialog.qml",
      "linux/logger.h",
      "linux/BatteryIndicator.qml",
      "linux/eardetection.hpp",
      "linux/playerstatuswatcher.cpp",
      "linux/CMakeLists.txt",
      "linux/trayiconmanager.cpp",
      "linux/trayiconmanager.h",
      "linux/enums.h",
      "linux/QRCodeImageProvider.hpp",
      "linux/autostartmanager.hpp",
      "linux/PodColumn.qml",
      "linux/systemsleepmonitor.hpp",
      "linux/deviceinfo.hpp",
      "linux/BluetoothMonitor.h",
      "linux/BluetoothMonitor.cpp",
      "linux/Icon.qml",
      "linux/SegmentedControl.qml",
      "linux/airpods_packets.h",
      "linux/Main.qml",
      "linux/battery.hpp",
      "linux/main.cpp",
      "linux/ble/blemanager.h",
      "linux/ble/blemanager.cpp",
      "linux/ble/bleutils.h",
      "linux/ble/bleutils.cpp",
      "linux/thirdparty/QR-Code-generator/qrcodegen.hpp",
      "linux/thirdparty/QR-Code-generator/qrcodegen.cpp",
      "linux/media/playerstatuswatcher.cpp",
      "linux/media/mediacontroller.h",
      "linux/media/playerstatuswatcher.h",
      "linux/media/mediacontroller.cpp",
      "linux/assets/pod4_case.png",
      "linux/assets/pod3.png",
      "linux/assets/airpods.png",
      "linux/assets/podpro.png",
      "linux/assets/pod.png",
      "linux/assets/podpro_case.png",
      "linux/assets/podmax.png",
      "linux/assets/pod3_case.png",
      "linux/assets/pod_case.png",
      "linux/assets/fonts/SF-Symbols-6.ttf",
      "docs/control_commands.md",
      ".github/workflows/AirysDark-AI_prob.yml",
      ".github/workflows/AirysDark-AI_detector.yml",
      "tools/AirysDark-AI_android.py",
      "tools/airysdark_ai_scan.md",
      "tools/airysdark_ai_scan.json",
      "tools/AirysDark-AI_builder.py",
      "tools/AirysDark-AI_prob.py",
      "tools/AirysDark-AI_detector.py",
      "src/ble/bluez_ble.h",
      "src/ble/bluez_ble.cpp",
      "src/models/winrt_ble.h",
      "packaging/installer.nsi",
      "include/ble/bluez_ble.h",
      "include/ble/winrt_ble.h",
      "include/ble/ble_backend.h",
      "include/models/airpods_models.h",
      "android/gradle.properties",
      "android/settings.gradle.kts",
      "android/gradlew.bat",
      "android/build.gradle.kts",
      "android/.gitignore",
      "android/gradle/libs.versions.toml",
      "android/gradle/wrapper/gradle-wrapper.properties",
      "android/imgs/customizations-2.png",
      "android/imgs/settings-2.png",
      "android/imgs/long-press.png",
      "android/imgs/cd-moved-to-phone-island.png",
      "android/imgs/debug.png",
      "android/imgs/head-tracking-and-gestures.png",
      "android/imgs/notification-and-qs.png",
      "android/imgs/cd-connected-remotely-island.png",
      "android/imgs/widget.png",
      "android/imgs/customizations-1.png",
      "android/imgs/audio-connected-island.png",
      "android/imgs/settings-1.png",
      "android/imgs/popup.png",
      "android/app/proguard-rules.pro",
      "android/app/build.gradle.kts",
      "android/app/.gitignore",
      "android/app/src/main/AndroidManifest.xml",
      "android/app/src/main/cpp/CMakeLists.txt",
      "android/app/src/main/cpp/l2c_fcr_hook.h",
      "android/app/src/main/cpp/l2c_fcr_hook.cpp",
      "android/app/src/main/cpp/jni_bridge.cpp",
      "android/app/src/main/res/xml/backup_rules.xml",
      "android/app/src/main/res/xml/noise_control_widget_info.xml",
      "android/app/src/main/res/xml/data_extraction_rules.xml",
      "android/app/src/main/res/xml/file_paths.xml",
      "android/app/src/main/res/xml/battery_widget_info.xml",
      "android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png",
      "android/app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png",
      "android/app/src/main/res/values-v21/styles.xml",
      "android/app/src/main/res/font/sf_pro.otf",
      "android/app/src/main/res/font/hack.otf",
      "android/app/src/main/res/values-v31/themes.xml",
      "android/app/src/main/res/values-v31/styles.xml",
      "android/app/src/main/res/layout/notification_expanded.xml",
      "android/app/src/main/res/layout/notification.xml",
      "android/app/src/main/res/layout/popup_window.xml",
      "android/app/src/main/res/layout/island_window.xml",
      "android/app/src/main/res/layout/battery_widget.xml",
      "android/app/src/main/res/layout/activity_main.xml",
      "android/app/src/main/res/layout/noise_control_widget.xml",
      "android/app/src/main/res/raw/island.mp4",
      "android/app/src/main/res/raw/blip_yes.wav",
      "android/app/src/main/res/raw/blip_no.wav",
      "android/app/src/main/res/raw/confirm_no.wav",
      "android/app/src/main/res/raw/connected.mp4",
      "android/app/src/main/res/raw/confirm_yes.wav",
      "android/app/src/main/res/mipmap-xxhdpi/ic_launcher.png",
      "android/app/src/main/res/mipmap-xxhdpi/ic_launcher_round.png",
      "android/app/src/main/res/values-night/colors.xml",
      "android/app/src/main/res/raw-night/connected.mp4",
      "android/app/src/main/res/mipmap-hdpi/ic_launcher.png",
      "android/app/src/main/res/mipmap-hdpi/ic_launcher_round.png",
      "android/app/src/main/res/drawable-v24/ic_launcher_foreground.xml",
      "android/app/src/main/res/drawable-v24/ic_launcher_monochrome.xml",
      "android/app/src/main/res/drawable-v24/ic_launcher_background.xml",
      "android/app/src/main/res/values-night-v31/themes.xml",
      "android/app/src/main/res/mipmap-xhdpi/ic_launcher.png",
      "android/app/src/main/res/mipmap-xhdpi/ic_launcher_round.png",
      "android/app/src/main/res/drawable-v21/app_widget_background.xml",
      "android/app/src/main/res/drawable-v21/app_widget_inner_view_background.xml",
      "android/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml",
      "android/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml",
      "android/app/src/main/res/drawable-nodpi/example_appwidget_preview.png",
      "android/app/src/main/res/values/attrs.xml",
      "android/app/src/main/res/values/dimens.xml",
      "android/app/src/main/res/values/themes.xml",
      "android/app/src/main/res/values/styles.xml",
      "android/app/src/main/res/values/strings.xml",
      "android/app/src/main/res/values/colors.xml",
      "android/app/src/main/res/mipmap-mdpi/ic_launcher.png",
      "android/app/src/main/res/mipmap-mdpi/ic_launcher_round.png",
      "android/app/src/main/res/drawable/ic_launcher_foreground.xml",
      "android/app/src/main/res/drawable/noise_cancellation.png",
      "android/app/src/main/res/drawable/ic_save.xml",
      "android/app/src/main/res/drawable/popup_shape.xml",
      "android/app/src/main/res/drawable/island_battery_progress.xml",
      "android/app/src/main/res/drawable/close.xml",
      "android/app/src/main/res/drawable/ic_bluetooth.xml",
      "android/app/src/main/res/drawable/airpods_pro_left_notification.xml",
      "android/app/src/main/res/drawable/pro_2_right.png",
      "android/app/src/main/res/drawable/pro_2_buds.png",
      "android/app/src/main/res/drawable/circular_progress_bar.xml",
      "android/app/src/main/res/drawable/progress_bar_background.xml",
      "android/app/src/main/res/drawable/airpods_pro_right_notification.xml",
      "android/app/src/main/res/drawable/pro_2.png",
      "android/app/src/main/res/drawable/widget_button_shape_start.xml",
      "android/app/src/main/res/drawable/pro_2_left.png",
      "android/app/src/main/res/drawable/widget_button_checked_shape_start.xml",
      "android/app/src/main/res/drawable/adaptive.png",
      "android/app/src/main/res/drawable/island_battery_background.xml",
      "android/app/src/main/res/drawable/widget_button_shape_end.xml",
      "android/app/src/main/res/drawable/airpods.xml",
      "android/app/src/main/res/drawable/airpods_pro_case_notification.xml",
      "android/app/src/main/res/drawable/popup_button_shape.xml",
      "android/app/src/main/res/drawable/island_background.xml",
      "android/app/src/main/res/drawable/ic_layers.xml",
      "android/app/src/main/res/drawable/widget_button_shape_middle.xml",
      "android/app/src/main/res/drawable/settings_voice.xml",
      "android/app/src/main/res/drawable/widget_button_checked_shape_end.xml",
      "android/app/src/main/res/drawable/pro_2_case.png",
      "android/app/src/main/res/drawable/widget_button_checked_shape_middle.xml",
      "android/app/src/main/res/drawable/ic_launcher_background.xml",
      "android/app/src/main/res/drawable/conversational_awareness.xml",
      "android/app/src/main/res/drawable/widget_background.xml",
      "android/app/src/main/res/drawable/smartphone.xml",
      "android/app/src/main/res/drawable/transparency.png",
      "android/app/src/main/res/drawable/ic_power.xml",
      "android/app/src/main/resources/META-INF/xposed/native_init.list",
      "android/app/src/main/resources/META-INF/xposed/java_init.list",
      "android/app/src/main/resources/META-INF/xposed/module.prop",
      "android/app/src/main/resources/META-INF/xposed/scope.list",
      "android/app/src/main/java/com/yourco/airpods/L2capCocManager.kt",
      "android/app/src/main/java/com/yourco/airpods/MainActivity.kt",
      "android/app/src/main/java/com/yourco/airpods/BleClient.kt",
      "android/app/src/main/java/com/yourco/airpods/NativeBridge.kt",
      "android/app/src/main/java/com/yourco/airpods/Prefs.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/MainActivity.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/QuickSettingsDialogActivity.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/CustomDeviceActivity.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/utils/PopupWindow.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/utils/KotlinModule.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/utils/AACPManager.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/utils/IslandWindow.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/utils/SystemAPIUtils.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/utils/BLEManager.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/utils/LogCollector.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/utils/HeadOrientation.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/utils/SettingsManager.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/utils/MediaController.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/utils/GestureFeedback.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/utils/GestureDetector.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/utils/BluetoothCryptography.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/utils/CrossDevice.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/utils/RadareOffsetFinder.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/utils/BluetoothConnectionManager.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/services/AirPodsService.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/services/AirPodsQSService.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/constants/Packets.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/constants/StemAction.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/composables/StyledSwitch.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/composables/NavigationButton.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/composables/NoiseControlButton.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/composables/CustomDropdown.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/composables/ControlCenterButton.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/composables/BatteryIndicator.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/composables/AdaptiveStrengthSlider.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/composables/SinglePodANCSwitch.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/composables/PressAndHoldSettings.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/composables/NoiseControlSettings.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/composables/IndependentToggle.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/composables/NameField.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/composables/VerticalVolumeSlider.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/composables/ControlCenterNoiseControlSegmentedButton.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/composables/BatteryView.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/composables/AudioSettings.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/composables/VolumeControlSwitch.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/composables/AccessibilitySettings.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/composables/ToneVolumeSlider.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/composables/ConversationalAwarenessSwitch.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/ui/theme/Theme.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/ui/theme/Type.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/ui/theme/Color.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/screens/HeadTrackingScreen.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/screens/TroubleshootingScreen.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/screens/DebugScreen.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/screens/AirPodsSettingsScreen.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/screens/CocSettingsScreen.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/screens/RenameScreen.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/screens/PressAndHoldSettingsScreen.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/screens/Onboarding.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/screens/AppSettingsScreen.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/widgets/BatteryWidget.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/widgets/NoiseControlWidget.kt",
      "android/app/src/main/java/me/kavishdevar/librepods/receivers/BootReceiver.kt",
      "android/app/libs/libxposed-api-100.aar",
      "head-tracking/README.md",
      "head-tracking/requirements.txt",
      "head-tracking/head_orientation.py",
      "head-tracking/plot.py",
      "head-tracking/connection_manager.py",
      "head-tracking/gestures.py"
    ],
    "doc_hints": {
      "CMakePresets.json": [
        "{",
        "  \"version\": 6,",
        "  \"configurePresets\": [",
        "    {",
        "      \"name\": \"win64-release\",",
        "      \"displayName\": \"Windows 10 x64 (Release)\",",
        "      \"generator\": \"Ninja\",",
        "      \"binaryDir\": \"${sourceDir}/build\",",
        "      \"cacheVariables\": {",
        "        \"CMAKE_BUILD_TYPE\": \"Release\",",
        "        \"CMAKE_TOOLCHAIN_FILE\": \"${sourceDir}/.vcpkg/scripts/buildsystems/vcpkg.cmake\"",
        "      }",
        "    }",
        "  ],",
        "  \"buildPresets\": [",
        "    { \"name\": \"win64-release-build\", \"configurePreset\": \"win64-release\" }",
        "  ]",
        "}"
      ],
      "STOCK_BUILD.md": [
        "",
        "# LibrePods \u2014 Stock (Non\u2011root) Build",
        "",
        "This build removes the L2CAP FCR native hook and Magisk/Xposed artifacts so the app runs on unmodified Android.",
        "",
        "## Changes",
        "- Removed `root-module/` and all Magisk packaging scripts.",
        "- Disabled `System.loadLibrary(\"l2c_fcr_hook\")` and any runtime offset checks.",
        "- Start destination goes directly to the app (no root/onboarding gate).",
        "- JNI kept only for `airpods_core` payload parsing (safe).",
        "",
        "## Bluetooth Path (Public APIs Only)",
        "- BLE GATT for discovery/control.",
        "- Optionally add BLE L2CAP CoC for API 29+ (client/server) with GATT fallback.",
        "",
        "Build & behavior",
        "",
        "Open android/ in Android Studio \u2192 build/run app.",
        "",
        "On Android 10+:",
        "",
        "If your pods (or your accessory firmware) expose a PSM characteristic at 0000FF01-0000-1000-8000-00805F9B34FB, the app will try L2CAP CoC.",
        "",
        "If not, or if connect fails, it falls back to GATT seamlessly.",
        "",
        "",
        "Toggle is ON by default; users can switch it off anytime in App Settings.",
        "",
        "## Optional: High-throughput BLE L2CAP CoC (API 29+)",
        "- Added `com.yourco.airpods.L2capCocManager` and integrated into `BleClient`.",
        "- If the accessory exposes a **PSM characteristic** at UUID `0000FF01-0000-1000-8000-00805F9B34FB` (little-endian 16-bit PSM),",
        "  the app will attempt a **CoC** client connection automatically and fall back to GATT on failure.",
        "- You can flip the in-code flag `useCocPreferred` to force GATT if needed.",
        "",
        "> Note: AirPods may not expose CoC; this logic auto-falls back to GATT if CoC isn\u2019t available.",
        "",
        "Added a **Settings toggle** under CocSettingsScreen: lets the user enable/disable L2CAP CoC preference at runtime.",
        "",
        "- Added Settings toggle: **Prefer high-throughput (L2CAP)** in App Settings. Persisted via SharedPreferences."
      ],
      "README.md": [
        "# Bluelibre",
        "",
        "A cross-platform AirPods desktop & Android client.  ",
        "Supports model detection and battery status display for **AirPods 1, 2, 3, 4, 4 ANC, Pro, Pro 2, and Max**.",
        "",
        "---",
        "",
        "=======",
        ">>>>>>> b9ad7d31f761902b107364aa10d1d236867ab441",
        "## \ud83d\udda5\ufe0f Windows 10/11 (x64)",
        "",
        "```powershell",
        "git clone https://github.com/AirysDark/librepods",
        "cd librepods",
        "",
        "# Bootstrap vcpkg",
        "git clone https://github.com/microsoft/vcpkg .vcpkg",
        ".\\.vcpkg\\bootstrap-vcpkg.bat",
        "",
        "# Configure & build (uses CMakePresets.json)",
        "cmake --preset win64-release",
        "cmake --build --preset win64-release-build --parallel",
        "cmake --install build --prefix build\\out",
        "```",
        "",
        "---",
        "",
        "## \ud83d\udc27 Linux (Ubuntu/Debian)",
        "",
        "```bash",
        "sudo apt update",
        "sudo apt install -y build-essential cmake ninja-build pkg-config libdbus-1-dev libbluetooth-dev",
        "",
        "git clone https://github.com/AirysDark/librepods",
        "cd librepods",
        "",
        "git rm airpods_models.cpp && git commit -m \"fix: remove duplicate root airpods_models.cpp\"  # if present",
        "",
        "cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release",
        "cmake --build build --parallel",
        "sudo cmake --install build --prefix /usr/local",
        "```",
        "",
        "---",
        "",
        "## \ud83e\udd16 Android",
        "",
        "```bash",
        "cd android",
        "chmod +x gradlew",
        "./gradlew :app:assembleDebug",
        "```",
        "",
        "Or open `android/` in **Android Studio** (Java 17 + NDK + CMake required).",
        "",
        "---",
        "",
        "## \u2699\ufe0f GitHub Actions (CI)",
        "",
        "### Windows workflow",
        "Ensure the job:",
        "- Runs on `windows-latest`",
        "- Installs **Ninja**",
        "- Bootstraps **vcpkg**",
        "- Calls `cmake --preset win64-release` and builds",
        "",
        "Example steps:",
        "",
        "```yaml",
        "- uses: actions/checkout@v4",
        "- name: Install Ninja",
        "  run: choco install ninja -y",
        "- name: Bootstrap vcpkg",
        "  run: |",
        "    git clone https://github.com/microsoft/vcpkg .vcpkg",
        "    .\\.vcpkg\\bootstrap-vcpkg.bat",
        "- name: Configure",
        "  run: cmake --preset win64-release",
        "- name: Build",
        "  run: cmake --build --preset win64-release-build --parallel"
      ],
      "README-ANDROID-CI.md": [
        "# Librepods Android CI Quick Drop-in",
        "",
        "This bundle gives you:",
        "- `.github/workflows/android.yml` \u2014 minimal, stable CI using JDK 21 + Gradle cache.",
        "- `android/gradle.properties` \u2014 safe defaults for CI speed.",
        "- `android/app/build.gradle.kts` \u2014 cleaned app module config (no androidComponents/APK hooks).",
        "",
        "## How to apply",
        "",
        "1. Copy **.github/workflows/android.yml** into your repo.",
        "2. Copy **android/gradle.properties** (merge with yours if you already have one).",
        "3. Replace **android/app/build.gradle.kts** (or adapt the changes into your current file).",
        "",
        "> Important: Remove any `androidComponents { ... }` code that references `MultipleArtifact.APK`.",
        "> That API doesn't exist; it prevents variants from being created, which is why no APKs are produced.",
        "",
        "## Run locally",
        "From the `android` folder:",
        "```",
        "./gradlew assembleDebug",
        "```",
        "The APK will be at:",
        "```",
        "android/app/build/outputs/apk/debug/app-debug.apk",
        "```'"
      ],
      "airpods_models.cpp": [
        "#include \"models/airpods_models.h\"",
        "#include <cstdio>",
        "",
        "namespace airpods {",
        "",
        "std::string_view ModelName(Model m) {",
        "  switch (m) {",
        "    case Model::AirPods1:    return \"AirPods (1st gen)\";",
        "    case Model::AirPods2:    return \"AirPods (2nd gen)\";",
        "    case Model::AirPods3:    return \"AirPods (3rd gen)\";",
        "    case Model::AirPods4:    return \"AirPods 4\";",
        "    case Model::AirPods4ANC: return \"AirPods 4 (ANC)\";",
        "    case Model::AirPodsPro:  return \"AirPods Pro\";",
        "    case Model::AirPodsPro2: return \"AirPods Pro (2nd gen)\";",
        "    case Model::AirPodsMax:  return \"AirPods Max\";",
        "    default:                 return \"AirPods (Unknown model)\";",
        "  }",
        "}",
        "",
        "std::string FallbackName(uint16_t raw_id) {",
        "  char buf[64];",
        "  std::snprintf(buf, sizeof(buf), \"AirPods (0x%04X)\", raw_id);",
        "  return std::string(buf);",
        "}",
        "",
        "} // namespace airpods"
      ],
      "WORKFLOWS_README.md": [
        "# CI Workflows for librepods",
        "",
        "Drop this `.github/workflows/` folder into the root of your repository.",
        "",
        "## Windows x64 Build",
        "- Installs Ninja",
        "- Bootstraps vcpkg",
        "- Configures with CMake preset `win64-release`",
        "- Builds, installs to `build/out`, and uploads an artifact",
        "",
        "## Android Debug APK",
        "- Uses Java 17 (Temurin)",
        "- Makes Gradle wrapper executable",
        "- Builds `:app:assembleDebug` and uploads the APK",
        "",
        "If the Android job cannot find NDK/CMake automatically,",
        "uncomment the SDK manager steps to install a specific NDK and CMake version."
      ],
      "CMakeLists.txt": [
        "cmake_minimum_required(VERSION 3.24)",
        "project(AirPodsDesktop VERSION 0.4.0 LANGUAGES CXX)",
        "",
        "# Optional in-tree vcpkg for Windows users",
        "if (WIN32 AND NOT DEFINED CMAKE_TOOLCHAIN_FILE AND EXISTS \"${CMAKE_SOURCE_DIR}/.vcpkg/scripts/buildsystems/vcpkg.cmake\")",
        "  set(CMAKE_TOOLCHAIN_FILE \"${CMAKE_SOURCE_DIR}/.vcpkg/scripts/buildsystems/vcpkg.cmake\" CACHE STRING \"\" FORCE)",
        "endif()",
        "",
        "set(CMAKE_CXX_STANDARD 20)",
        "set(CMAKE_CXX_STANDARD_REQUIRED ON)",
        "",
        "if (MSVC)",
        "  add_compile_options(/permissive- /Zc:preprocessor /utf-8 /W4 /EHsc)",
        "  add_definitions(-D_WIN32_WINNT=0x0A00) # Windows 10",
        "else()",
        "  add_compile_options(-Wall -Wextra -Wpedantic)",
        "endif()",
        "",
        "find_package(Threads REQUIRED)",
        "",
        "# Platform BLE backends",
        "if (WIN32)",
        "  add_definitions(-DPLATFORM_WINRT)",
        "  set(BLE_BACKEND_SRC src/ble/winrt_ble.cpp)",
        "  set(BLE_BACKEND_INC include/ble/winrt_ble.h)",
        "  set(PLATFORM_LIBS windowsapp)",
        "elseif (UNIX)",
        "  add_definitions(-DPLATFORM_BLUEZ)",
        "  find_package(PkgConfig REQUIRED)",
        "  pkg_check_modules(DBUS REQUIRED dbus-1)",
        "  pkg_check_modules(BLUEZ REQUIRED bluez)",
        "  set(BLE_BACKEND_SRC src/ble/bluez_ble.cpp)",
        "  set(BLE_BACKEND_INC include/ble/bluez_ble.h)",
        "  set(PLATFORM_LIBS ${DBUS_LIBRARIES} ${BLUEZ_LIBRARIES})",
        "  include_directories(${DBUS_INCLUDE_DIRS} ${BLUEZ_INCLUDE_DIRS})",
        "endif()",
        "",
        "file(GLOB_RECURSE APP_SOURCES CONFIGURE_DEPENDS",
        "     src/*.cpp src/*.cc src/*.c",
        "     include/*.h include/*.hpp)",
        "",
        "add_executable(AirPodsDesktop",
        "  ${APP_SOURCES}",
        "  ${BLE_BACKEND_SRC}",
        "  include/ble/ble_backend.h",
        "  include/models/airpods_models.h",
        "  src/models/airpods_models.cpp",
        "  ${BLE_BACKEND_INC}",
        ")",
        "",
        "target_include_directories(AirPodsDesktop PRIVATE include)",
        "target_link_libraries(AirPodsDesktop PRIVATE ${PLATFORM_LIBS} Threads::Threads)",
        "",
        "include(GNUInstallDirs)",
        "install(TARGETS AirPodsDesktop RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})"
      ],
      "AAP Definitions.md": [
        "# AAP Definitions (As per AirPods Pro 2 (USB-C) Firmware 7A305)",
        "",
        "AAP runs on top of L2CAP, with a PSM of 0x1001 or 4097.",
        "",
        "# Handshake",
        "This packet is necessary to establish a connection with the AirPods. Or else, the AirPods will not respond to any packets.",
        "",
        "```plaintext",
        "00 00 04 00 01 00 02 00 00 00 00 00 00 00 00 00",
        "```",
        "",
        "# Setting specific features for AirPods Pro 2",
        "",
        "> *may work for airpods 4 anc also, not tested*",
        "",
        "Since apple likes to wall off some features behind specific OS versions, and apple silicon devices, some packets are necessary to enable these features.",
        "",
        "I captured the following packet only accidentally, because Apple being Apple decided to hide *this* and *the handshake* from packetlogger, but sometimes it shows up.",
        "",
        "*Captured using PacketLogger on an Intel Mac running macOS Sequoia 15.0.1*",
        "```plaintext",
        "04 00 04 00 4d 00 ff 00 00 00 00 00 00 00",
        "```",
        "",
        "This packet enables conversational awareness when playing audio. (CA works without this packet only when no audio is playing)",
        "",
        "It also enables the Adaptive Transparency feature. (We can set Adaptive Transparency, but it doesn't respond with the same packet See [Noise Cancellation](#changing-noise-control))",
        "",
        "# Requesting notifications",
        "",
        "This packet is necessary to receive notifications from the AirPods like ear detection, noise control mode, conversational awareness, battery status, etc.",
        "",
        "*Captured using PacketLogger on an Intel Mac running macOS Sequoia 15.0.1*",
        "```plaintext",
        "04 00 04 00 0F 00 FF FF FE FF",
        "```",
        "",
        "This packet also works.",
        "",
        "```plaintext",
        "04 00 04 00 0F 00 FF FF FF FF",
        "```",
        "",
        "# Notifications",
        "",
        "## Battery",
        "",
        "AirPods occasionally send battery status packets. The packet format is as follows:",
        "",
        "```plaintext",
        "04 00 04 00 04 00 [battery count] ([component] 01 [level] [status] 01) times the battery count",
        "```",
        "",
        "| Components | Byte value |",
        "|------------|------------|",
        "| Case       | 08         |",
        "| Left       | 04         |",
        "| Right      | 02         |",
        "",
        "| Status       | Byte value |",
        "|------------- |------------|",
        "| Unknown      | 00         |",
        "| Charging     | 01         |",
        "| Discharging  | 02         |",
        "| Disconnected | 04         |",
        "",
        "",
        "Example packet from AirPods Pro 2",
        "",
        "```plaintext",
        "04 00 04 00 04 00 03 02 01 64 02 01 04 01 63 01 01 08 01 11 02 01",
        "```",
        "",
        "| Byte      | Interpretation                     |",
        "|-----------|------------------------------------|",
        "| 7th byte  | Battery Count - 3                  |",
        "| 8th byte  | Battery type - Left                |",
        "| 9th byte  | Spacer, value = 0x01               |",
        "| 10th byte | Battery level 100%                 |",
        "| 11th byte | Battery status - Discharging       |"
      ],
      "README.txt": [
        "",
        "librepods \u2014 settings fix",
        "",
        "What this zip contains",
        "----------------------",
        "- android/settings.gradle.kts   (Kotlin DSL \u2014 single version-catalog 'from' call)",
        "- README.txt",
        "",
        "What you need to do",
        "-------------------",
        "1) Ensure you **remove android/settings.gradle** (the Groovy DSL one).",
        "   Gradle must see only ONE settings file, otherwise the version catalog",
        "   will be imported twice and you'll get the: ",
        "     \"you can only call the 'from' method a single time\" error.",
        "",
        "2) Place settings.gradle.kts from this zip at: android/settings.gradle.kts",
        "   (replace the existing file if present).",
        "",
        "3) Clean caches and rebuild:",
        "     On local:",
        "       - Delete: .gradle/ and android/.gradle/ folders (optional but helpful)",
        "       - Run:     ./gradlew --no-build-cache clean :app:assembleDebug",
        "     On GitHub Actions:",
        "       - Caches will refresh automatically; no extra changes needed.",
        "",
        "Notes",
        "-----",
        "- Your libs.versions.toml should remain at: android/gradle/libs.versions.toml",
        "- If you keep only the Kotlin DSL settings file, this error should be gone."
      ],
      "CONTRIBUTING.md": [
        "# Welcome to LibrePods contributing guide <!-- omit in toc -->",
        "",
        "Thank you for considering a contribution to LibrePods! Your support helps bring Apple-exclusive AirPods features to Linux and Android.",
        "",
        "Read our [Code of Conduct](./CODE_OF_CONDUCT.md) to keep our community approachable and respectful.",
        "",
        "This guide provides an overview of the contribution workflow, from opening an issue to creating and reviewing a pull request (PR).",
        "",
        "## New contributor guide",
        "",
        "To get an overview of the project, read the [README](./README.md). Here are some resources to help you get started with open-source contributions:",
        "",
        "- [Finding ways to contribute to open source on GitHub](https://docs.github.com/en/get-started/exploring-projects-on-github/finding-ways-to-contribute-to-open-source-on-github)",
        "- [Set up Git](https://docs.github.com/en/get-started/getting-started-with-git/set-up-git)",
        "- [GitHub flow](https://docs.github.com/en/get-started/using-github/github-flow)",
        "- [Collaborating with pull requests](https://docs.github.com/en/github/collaborating-with-pull-requests)",
        "",
        "## Getting started",
        "",
        "To navigate our codebase with confidence, see the [README](./README.md) for setup instructions and usage details. We accept various types of contributions, which don\u2019t always require writing code (like translations).",
        "",
        "To develop for the Android App, Android Studio is the preferred IDE. And you can use any IDE for the linux program, it is just python!",
        "",
        "### Issues",
        "",
        "#### Create a new issue",
        "",
        "If you find a bug or want to suggest a feature, check if an issue already exists by searching through our [existing issues](https://github.com/kavishdevar/librepods/issues). If no relevant issue exists, open a new one and fill in the details.",
        "",
        "#### Solve an issue",
        "",
        "Browse our [issues list](https://github.com/kavishdevar/librepods/issues) to find an interesting issue to work on. Use labels to filter issues and pick one that matches your expertise. If you\u2019d like to work on an issue, open a PR with your solution.",
        "",
        "### Make Changes",
        "",
        "#### Make changes locally",
        "",
        "1. Fork the repository and clone it to your local environment.",
        "```",
        "git clone https://github.com/kavishdevar/librepods.git",
        "cd AirPods-Like-Normal",
        "```",
        "2. Create a working branch to start your changes.",
        "```",
        "git checkout -b your-feature-branch",
        "```",
        "3. Make your changes, following the existing style and structure.",
        "",
        "4. Test your changes to ensure they work as expected and do not introduce new issues.",
        "",
        "### Commit your changes",
        "",
        "Commit your changes with a descriptive message.",
        "",
        "### Pull Request",
        "",
        "When your changes are ready, create a pull request (PR):",
        "- Fill out the PR template to help reviewers understand your changes.",
        "- If your PR is related to an issue, don\u2019t forget to [link your PR to it](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue).",
        "- Enable the checkbox to allow maintainers to edit your PR, so any required changes can be merged easily.",
        "",
        "Once your PR is open, a team member will review it. They may ask questions or request additional information.",
        "",
        "- If changes are requested, apply them in your fork and commit them to the PR branch.",
        "- Mark conversations as resolved as you apply feedback.",
        "- For merge conflicts, follow this [git tutorial](https://github.com/skills/resolve-merge-conflicts) to resolve them.",
        "",
        "### Your PR is merged!",
        "",
        "Congratulations! :tada: Once merged, your contributions will be publicly available in LibrePods."
      ],
      "linux.txt.txt": [
        "sudo apt update",
        "sudo apt install -y build-essential cmake ninja-build pkg-config libdbus-1-dev libbluetooth-dev",
        "cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release",
        "cmake --build build --parallel",
        "sudo cmake --install build --prefix /usr/local",
        "",
        "",
        "",
        "---",
        "",
        "\u2705 With these files in place, you can build on **Windows** or **Linux**, and your app will show **all current AirPods models** correctly and gracefully handle future ones.",
        "",
        "Do you want me to also draft a **main.cpp sample** that shows how to call `ble_read_characteristic` + `ModelName` together (to test end-to-end)?"
      ],
      "intall.txt": [
        "Windows (VS2022):",
        "",
        "git clone https://github.com/microsoft/vcpkg .vcpkg",
        ".\\.vcpkg\\bootstrap-vcpkg.bat",
        "cmake --preset win64-release",
        "cmake --build --preset win64-release-build --parallel",
        "cmake --install build --prefix build\\out",
        "",
        "Linux:",
        "",
        "sudo apt update",
        "sudo apt install -y build-essential cmake ninja-build pkg-config libdbus-1-dev libbluetooth-dev",
        "cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release",
        "cmake --build build --parallel",
        "sudo cmake --install build --prefix /usr/local"
      ],
      "FUNDING.yml": [
        "github: kavishdevar"
      ],
      "pr_body_build.md": [
        "### AirysDark-AI: build workflow (from probe)",
        "Target: **android**",
        "",
        "This PR adds `.github/workflows/AirysDark-AI_build.yml`, generated by the probe.",
        "- The workflow triggers **only** on `workflow_dispatch` (manual run required).",
        "- Review the steps and adjust if needed.",
        "",
        "Artifacts from the probe:",
        "- `tools/airysdark_ai_prob_report.json`",
        "- `tools/airysdark_ai_prob_report.log`",
        "- `tools/airysdark_ai_build_ai_response.txt` (raw LLM output, if AI was used)"
      ],
      "update.json": [
        "{",
        "  \"version\": \"v0.0.3\",",
        "  \"versionCode\": 3,",
        "  \"zipUrl\": \"https://github.com/kavishdevar/librepods/releases/download/v0.0.3/btl2capfix-v0.0.3.zip\",",
        "  \"changelog\": \"https://raw.githubusercontent.com/kavishdevar/librepods/main/CHANGELOG.md\"",
        "}"
      ],
      "pr_body.md": [
        "### AirysDark-AI: detector results",
        "",
        "**Detected build types:**",
        "- linux",
        "- android",
        "- cmake",
        "",
        "**Next steps:**",
        "1. Edit `.github/workflows/AirysDark-AI_prob.yml` and set **env.TARGET** (e.g. `android`, `linux`, `cmake`).",
        "2. Merge this PR.",
        "3. Manually run **AirysDark-AI - Probe (LLM builds workflow)** from the Actions tab."
      ],
      "CODE_OF_CONDUCT.md": [
        "# Contributor Covenant Code of Conduct",
        "",
        "## Our Pledge",
        "",
        "We as members, contributors, and leaders pledge to make participation in our",
        "community a harassment-free experience for everyone, regardless of age, body",
        "size, visible or invisible disability, ethnicity, sex characteristics, gender",
        "identity and expression, level of experience, education, socio-economic status,",
        "nationality, personal appearance, race, religion, or sexual identity",
        "and orientation.",
        "",
        "We pledge to act and interact in ways that contribute to an open, welcoming,",
        "diverse, inclusive, and healthy community.",
        "",
        "## Our Standards",
        "",
        "Examples of behavior that contributes to a positive environment for our",
        "community include:",
        "",
        "* Demonstrating empathy and kindness toward other people",
        "* Being respectful of differing opinions, viewpoints, and experiences",
        "* Giving and gracefully accepting constructive feedback",
        "* Accepting responsibility and apologizing to those affected by our mistakes,",
        "  and learning from the experience",
        "* Focusing on what is best not just for us as individuals, but for the",
        "  overall community",
        "",
        "Examples of unacceptable behavior include:",
        "",
        "* The use of sexualized language or imagery, and sexual attention or",
        "  advances of any kind",
        "* Trolling, insulting or derogatory comments, and personal or political attacks",
        "* Public or private harassment",
        "* Publishing others' private information, such as a physical or email",
        "  address, without their explicit permission",
        "* Other conduct which could reasonably be considered inappropriate in a",
        "  professional setting",
        "",
        "## Enforcement Responsibilities",
        "",
        "Community leaders are responsible for clarifying and enforcing our standards of",
        "acceptable behavior and will take appropriate and fair corrective action in",
        "response to any behavior that they deem inappropriate, threatening, offensive,",
        "or harmful.",
        "",
        "Community leaders have the right and responsibility to remove, edit, or reject",
        "comments, commits, code, wiki edits, issues, and other contributions that are",
        "not aligned to this Code of Conduct, and will communicate reasons for moderation",
        "decisions when appropriate.",
        "",
        "## Scope",
        "",
        "This Code of Conduct applies within all community spaces, and also applies when",
        "an individual is officially representing the community in public spaces.",
        "Examples of representing our community include using an official e-mail address,",
        "posting via an official social media account, or acting as an appointed",
        "representative at an online or offline event.",
        "",
        "## Enforcement",
        "",
        "Instances of abusive, harassing, or otherwise unacceptable behavior may be",
        "reported to the community leaders responsible for enforcement at",
        "report@kavishdevar.me.",
        "All complaints will be reviewed and investigated promptly and fairly.",
        "",
        "All community leaders are obligated to respect the privacy and security of the",
        "reporter of any incident.",
        "",
        "## Enforcement Guidelines",
        "",
        "Community leaders will follow these Community Impact Guidelines in determining",
        "the consequences for any action they deem in violation of this Code of Conduct:",
        "",
        "### 1. Correction",
        "",
        "**Community Impact**: Use of inappropriate language or other behavior deemed",
        "unprofessional or unwelcome in the community.",
        "",
        "**Consequence**: A private, written warning from community leaders, providing",
        "clarity around the nature of the violation and an explanation of why the"
      ],
      "clean_gradle_duplicates.sh": [
        "#!/usr/bin/env bash",
        "# clean_gradle_duplicates.sh",
        "# Remove Groovy Gradle files when a .kts counterpart exists.",
        "",
        "set -euo pipefail",
        "",
        "ROOT_DIR=\".\"",
        "APPLY=false",
        "",
        "# Parse arguments",
        "while [[ $# -gt 0 ]]; do",
        "  case \"$1\" in",
        "    --root)",
        "      ROOT_DIR=\"$2\"",
        "      shift 2",
        "      ;;",
        "    --apply)",
        "      APPLY=true",
        "      shift",
        "      ;;",
        "    *)",
        "      echo \"Usage: $0 [--root <dir>] [--apply]\"",
        "      exit 1",
        "      ;;",
        "  esac",
        "done",
        "",
        "echo \"Scanning $ROOT_DIR for duplicate Gradle files...\"",
        "echo",
        "",
        "# File patterns to check",
        "for f in $(find \"$ROOT_DIR\" -type f -name \"*.gradle\"); do",
        "  # skip already .kts",
        "  if [[ \"$f\" == *.kts ]]; then",
        "    continue",
        "  fi",
        "",
        "  # candidate .kts",
        "  kts=\"${f}.kts\"",
        "",
        "  if [[ -f \"$kts\" ]]; then",
        "    if $APPLY; then",
        "      echo \"Deleting: $f (KTS counterpart exists: $kts)\"",
        "      rm -f \"$f\"",
        "    else",
        "      echo \"[DRY RUN] Would delete: $f (KTS counterpart exists: $kts)\"",
        "    fi",
        "  fi",
        "done",
        "",
        "echo",
        "if $APPLY; then",
        "  echo \"Cleanup complete. Groovy Gradle files with .kts twins have been removed.\"",
        "else",
        "  echo \"Dry run complete. Re-run with --apply to actually delete the files.\"",
        "fi"
      ],
      "update_nonpatch.json": [
        "{",
        "  \"version\": \"v0.1.0-rc.4\",",
        "  \"versionCode\": 3,",
        "  \"zipUrl\": \"https://github.com/kavishdevar/librepods/releases/download/v0.1.0-rc.4/LibrePods-v0.1.0-rc.4.zip\",",
        "  \"changelog\": \"https://raw.githubusercontent.com/kavishdevar/librepods/main/CHANGELOG.md\"",
        "}"
      ],
      "CHANGELOG.md": [
        "## LibrePods root module changelog",
        "_[See here](https://github.com/kavishdevar/librepods/releases)_"
      ],
      "Proximity Pairing Message.md": [
        "# Bluetooth Low Energy (BLE) - Apple Proximity Pairing Message",
        "",
        "This document describes how the AirPods BLE \"Proximity Pairing Message\" is parsed and interpreted in the application. This message is broadcast by Apple devices (such as AirPods) and contains key information about the device's state, battery, and other properties.",
        "",
        "## Overview",
        "",
        "When scanning for BLE devices, the application looks for manufacturer data with Apple's ID (`0x004C`). If the data starts with `0x07`, it is identified as a Proximity Pairing Message. The message contains various fields, each representing a specific property of the AirPods.",
        "",
        "## Proximity Pairing Message Structure",
        "",
        "| Byte Index | Field Name              | Description                                             | Example Value(s)         |",
        "|------------|-------------------------|---------------------------------------------------------|--------------------------|",
        "| 0          | Prefix                  | Message type (should be `0x07` for proximity pairing)   | `0x07`                   |",
        "| 1          | Length                  | Length of the message                                   | `0x12`                   |",
        "| 2          | Pairing Mode            | `0x01` = Paired, `0x00` = Pairing mode                 | `0x01`, `0x00`           |",
        "| 3-4        | Device Model            | Big-endian: [3]=high, [4]=low                          | `0x0E20` (AirPods Pro)   |",
        "| 5          | Status                  | Bitfield, see below                                    | `0x62`                   |",
        "| 6          | Pods Battery Byte       | Nibbles for left/right pod battery                     | `0xA7`                   |",
        "| 7          | Flags & Case Battery    | Upper nibble: case battery, lower: flags               | `0xB3`                   |",
        "| 8          | Lid Indicator           | Bits for lid state and open counter                    | `0x09`                   |",
        "| 9          | Device Color            | Color code                                             | `0x02`                   |",
        "| 10         | Connection State        | Enum, see below                                        | `0x04`                   |",
        "| 11-26      | Encrypted Payload       | 16 bytes, not parsed                                   |                          |",
        "",
        "## Field Details",
        "",
        "### Device Model",
        "",
        "| Value (hex) | Model Name                |",
        "|-------------|--------------------------|",
        "| 0x0220      | AirPods 1st Gen          |",
        "| 0x0F20      | AirPods 2nd Gen          |",
        "| 0x1320      | AirPods 3rd Gen          |",
        "| 0x1920      | AirPods 4th Gen          |",
        "| 0x1B20      | AirPods 4th Gen (ANC)    |",
        "| 0x0A20      | AirPods Max              |",
        "| 0x1F20      | AirPods Max (USB-C)      |",
        "| 0x0E20      | AirPods Pro              |",
        "| 0x1420      | AirPods Pro 2nd Gen      |",
        "| 0x2420      | AirPods Pro 2nd Gen (USB-C) |",
        "",
        "### Status Byte (Bitfield)",
        "",
        "| Bit | Meaning                        | Value if Set |",
        "|-----|--------------------------------|-------------|",
        "| 0   | Right Pod In Ear (XOR logic)   | true        |",
        "| 1   | Right Pod In Ear (XOR logic)   | true        |",
        "| 2   | Both Pods In Case              | true        |",
        "| 3   | Left Pod In Ear (XOR logic)    | true        |",
        "| 4   | One Pod In Case                | true        |",
        "| 5   | Primary Pod (1=Left, 0=Right)  | true/false  |",
        "| 6   | This Pod In Case               | true        |",
        "",
        "### Ear Detection Logic",
        "",
        "The in-ear detection uses XOR logic based on:",
        "- Whether the right pod is primary (`areValuesFlipped`)",
        "- Whether this pod is in the case (`isThisPodInTheCase`)",
        "",
        "```cpp",
        "bool xorFactor = areValuesFlipped ^ deviceInfo.isThisPodInTheCase;",
        "deviceInfo.isLeftPodInEar = xorFactor ? (status & 0x08) != 0 : (status & 0x02) != 0;  // Bit 3 or 1",
        "deviceInfo.isRightPodInEar = xorFactor ? (status & 0x02) != 0 : (status & 0x08) != 0; // Bit 1 or 3",
        "```",
        "",
        "### Primary Pod",
        "",
        "Determined by bit 5 of the status byte:",
        "- `1` = Left pod is primary",
        "- `0` = Right pod is primary",
        "",
        "This affects:",
        "1. Battery level interpretation (which nibble corresponds to which pod)",
        "2. Microphone assignment",
        "3. Ear detection logic",
        "",
        "### Microphone Status",
        "",
        "The active microphone is determined by:",
        "```cpp"
      ],
      "linux/README.md": [
        "# LibrePods Linux",
        "",
        "A native Linux application to control your AirPods, with support for:",
        "",
        "- Noise Control modes (Off, Transparency, Adaptive, Noise Cancellation)",
        "- Conversational Awareness",
        "- Battery monitoring",
        "- Auto play/pause on ear detection",
        "- Seamless handoff between phone and PC",
        "",
        "## Prerequisites",
        "",
        "1. Your phone's Bluetooth MAC address (can be found in Settings > About Device)",
        "2. Qt6 packages",
        "",
        "   ```bash",
        "   # For Arch Linux / EndeavourOS",
        "   sudo pacman -S qt6-base qt6-connectivity qt6-multimedia-ffmpeg qt6-multimedia",
        "",
        "   # For Debian",
        "   sudo apt-get install qt6-base-dev qt6-declarative-dev qt6-connectivity-dev qt6-multimedia-dev \\",
        "        qml6-module-qtquick-controls qml6-module-qtqml-workerscript qml6-module-qtquick-templates \\",
        "        qml6-module-qtquick-window qml6-module-qtquick-layouts",
        "",
        "    # For Fedora",
        "    sudo dnf install qt6-qtbase-devel qt6-qtconnectivity-devel \\",
        "        qt6-qtmultimedia-devel qt6-qtdeclarative-devel",
        "   ```",
        "3. OpenSSL development headers",
        "",
        "    ```bash",
        "    # On Arch Linux / EndevaourOS, these are included in the OpenSSL package, so you might already have them installed.",
        "    sudo pacman -S openssl",
        "    ",
        "    # For Debian / Ubuntu",
        "    sudo apt-get install libssl-dev",
        "    ",
        "    # For Fedora",
        "    sudo dnf install openssl-devel",
        "    ```",
        "## Setup",
        "",
        "1. Set the `PHONE_MAC_ADDRESS` environment variable to your phone's Bluetooth MAC address by running the following:",
        "",
        "   ```bash",
        "   export PHONE_MAC_ADDRESS=\"XX:XX:XX:XX:XX:XX\"  # Replace with your phone's MAC",
        "   ```",
        "",
        "2. Build the application:",
        "",
        "   ```bash",
        "   mkdir build",
        "   cd build",
        "   cmake ..",
        "   make -j $(nproc)",
        "   ```",
        "",
        "3. Run the application:",
        "",
        "   ```bash",
        "   ./librepods",
        "   ```",
        "",
        "## Usage",
        "",
        "- Left-click the tray icon to view battery status",
        "- Right-click to access the control menu:",
        "  - Toggle Conversational Awareness",
        "  - Switch between noise control modes",
        "  - View battery levels",
        "  - Control playback"
      ],
      "linux/BasicControlCommand.hpp": [
        "#include <QByteArray>",
        "",
        "// Control Command Header",
        "namespace ControlCommand",
        "{",
        "    static const QByteArray HEADER = QByteArray::fromHex(\"040004000900\");",
        "",
        "    // Helper function to create control command packets",
        "    static QByteArray createCommand(quint8 identifier, quint8 data1 = 0x00, quint8 data2 = 0x00,",
        "                                    quint8 data3 = 0x00, quint8 data4 = 0x00)",
        "    {",
        "        QByteArray packet = HEADER;",
        "        packet.append(static_cast<char>(identifier));",
        "        packet.append(static_cast<char>(data1));",
        "        packet.append(static_cast<char>(data2));",
        "        packet.append(static_cast<char>(data3));",
        "        packet.append(static_cast<char>(data4));",
        "        return packet;",
        "    }",
        "",
        "    inline std::optional<char> parseActive(const QByteArray &data)",
        "    {",
        "        if (!data.startsWith(ControlCommand::HEADER))",
        "            return std::nullopt;",
        "",
        "        return static_cast<quint8>(data.at(7));",
        "    }",
        "}",
        "",
        "template <quint8 CommandId>",
        "struct BasicControlCommand",
        "{",
        "    static constexpr quint8 ID = CommandId;",
        "    static const QByteArray HEADER;",
        "",
        "    static const QByteArray ENABLED;",
        "    static const QByteArray DISABLED;",
        "",
        "    static QByteArray create(quint8 data1 = 0x00, quint8 data2 = 0x00,",
        "                             quint8 data3 = 0x00, quint8 data4 = 0x00)",
        "    {",
        "        return ControlCommand::createCommand(ID, data1, data2, data3, data4);",
        "    }",
        "",
        "    // Basically returns the byte at the index 7",
        "    static std::optional<bool> parseState(const QByteArray &data)",
        "    {",
        "        switch (ControlCommand::parseActive(data).value_or(0x00))",
        "        {",
        "        case 0x01: // Enabled",
        "            return true;",
        "        case 0x02: // Disabled",
        "            return false;",
        "        default:",
        "            return std::nullopt;",
        "        }",
        "    }",
        "",
        "    static std::optional<char> getValue(const QByteArray &data)",
        "    {",
        "        return ControlCommand::parseActive(data);",
        "    }",
        "};",
        "",
        "template <quint8 CommandId>",
        "const QByteArray BasicControlCommand<CommandId>::HEADER = ControlCommand::HEADER + static_cast<char>(CommandId);",
        "",
        "template <quint8 CommandId>",
        "const QByteArray BasicControlCommand<CommandId>::ENABLED = create(0x01);",
        "",
        "template <quint8 CommandId>",
        "const QByteArray BasicControlCommand<CommandId>::DISABLED = create(0x02);"
      ],
      "linux/logger.h": [
        "#pragma once",
        "",
        "#include <QDebug>",
        "#include <QLoggingCategory>",
        "",
        "Q_DECLARE_LOGGING_CATEGORY(Librepods)",
        "",
        "#define LOG_INFO(msg) qCInfo(Librepods) << \"\\033[32m\" << msg << \"\\033[0m\"",
        "#define LOG_WARN(msg) qCWarning(Librepods) << \"\\033[33m\" << msg << \"\\033[0m\"",
        "#define LOG_ERROR(msg) qCCritical(Librepods) << \"\\033[31m\" << msg << \"\\033[0m\"",
        "#define LOG_DEBUG(msg) qCDebug(Librepods) << \"\\033[34m\" << msg << \"\\033[0m\""
      ],
      "linux/eardetection.hpp": [
        "#pragma once",
        "",
        "#include <QObject>",
        "#include <QByteArray>",
        "#include <QPair>",
        "#include \"logger.h\"",
        "",
        "class EarDetection : public QObject",
        "{",
        "    Q_OBJECT",
        "",
        "public:",
        "    enum class EarDetectionStatus",
        "    {",
        "        InEar,",
        "        NotInEar,",
        "        InCase,",
        "        Disconnected,",
        "    };",
        "    Q_ENUM(EarDetectionStatus)",
        "",
        "    explicit EarDetection(QObject *parent = nullptr) : QObject(parent)",
        "    {",
        "        reset();",
        "    }",
        "",
        "    void reset()",
        "    {",
        "        primaryStatus = EarDetectionStatus::Disconnected;",
        "        secondaryStatus = EarDetectionStatus::Disconnected;",
        "        emit statusChanged();",
        "    }",
        "",
        "    bool parseData(const QByteArray &data)",
        "    {",
        "        if (data.size() < 2)",
        "        {",
        "            return false;",
        "        }",
        "",
        "        auto [newprimaryStatus, newsecondaryStatus] = parseStatusBytes(data);",
        "",
        "        primaryStatus = newprimaryStatus;",
        "        secondaryStatus = newsecondaryStatus;",
        "        LOG_DEBUG(\"Parsed Ear Detection Status: Primary - \" << primaryStatus",
        "                  << \", Secondary - \" << secondaryStatus);",
        "        emit statusChanged();",
        "",
        "        return true;",
        "    }",
        "    void overrideEarDetectionStatus(bool primaryInEar, bool secondaryInEar)",
        "    {",
        "        primaryStatus = primaryInEar ? EarDetectionStatus::InEar : EarDetectionStatus::NotInEar;",
        "        secondaryStatus = secondaryInEar ? EarDetectionStatus::InEar : EarDetectionStatus::NotInEar;",
        "        emit statusChanged();",
        "    }",
        "",
        "    bool isPrimaryInEar() const { return primaryStatus == EarDetectionStatus::InEar; }",
        "    bool isSecondaryInEar() const { return secondaryStatus == EarDetectionStatus::InEar; }",
        "    bool oneOrMorePodsInCase() const { return primaryStatus == EarDetectionStatus::InCase || secondaryStatus == EarDetectionStatus::InCase; }",
        "    bool oneOrMorePodsInEar() const { return isPrimaryInEar() || isSecondaryInEar(); }",
        "",
        "    EarDetectionStatus getprimaryStatus() const { return primaryStatus; }",
        "    EarDetectionStatus getsecondaryStatus() const { return secondaryStatus; }",
        "",
        "signals:",
        "    void statusChanged();",
        "",
        "private:",
        "    QPair<EarDetectionStatus, EarDetectionStatus> parseStatusBytes(const QByteArray &data) const",
        "    {",
        "        quint8 primaryByte = static_cast<quint8>(data[6]);",
        "        quint8 secondaryByte = static_cast<quint8>(data[7]);",
        "",
        "        auto primaryStatus = parseStatusByte(primaryByte);",
        "        auto secondaryStatus = parseStatusByte(secondaryByte);",
        "",
        "        return qMakePair(primaryStatus, secondaryStatus);",
        "    }",
        ""
      ],
      "linux/playerstatuswatcher.cpp": [
        "#include \"media/playerstatuswatcher.h\"",
        "#include <QDBusConnection>",
        "#include <QDBusPendingReply>",
        "#include <QVariantMap>",
        "#include <QDBusReply>",
        "",
        "PlayerStatusWatcher::PlayerStatusWatcher(const QString &playerService, QObject *parent)",
        "    : QObject(parent),",
        "      m_playerService(playerService),",
        "      m_iface(new QDBusInterface(playerService, \"/org/mpris/MediaPlayer2\",",
        "                                 \"org.mpris.MediaPlayer2.Player\", QDBusConnection::sessionBus(), this)),",
        "      m_serviceWatcher(new QDBusServiceWatcher(playerService, QDBusConnection::sessionBus(),",
        "                                               QDBusServiceWatcher::WatchForOwnerChange, this))",
        "{",
        "    // Register this object on the session bus to receive D-Bus messages",
        "    QDBusConnection::sessionBus().registerObject(\"/PlayerStatusWatcher\", this,",
        "                                               QDBusConnection::ExportAllSlots);",
        "",
        "    QDBusConnection::sessionBus().connect(",
        "        playerService, \"/org/mpris/MediaPlayer2\", \"org.freedesktop.DBus.Properties\",",
        "        \"PropertiesChanged\", this, SLOT(onPropertiesChanged(QString,QVariantMap,QStringList))",
        "    );",
        "    connect(m_serviceWatcher, &QDBusServiceWatcher::serviceOwnerChanged,",
        "            this, &PlayerStatusWatcher::onServiceOwnerChanged);",
        "    updateStatus();",
        "}",
        "",
        "void PlayerStatusWatcher::onPropertiesChanged(const QString &interface,",
        "                                              const QVariantMap &changed,",
        "                                              const QStringList &)",
        "{",
        "    // Get the service name of the sender",
        "    QString sender = message().service();",
        "    ",
        "    // Skip if it's a KDE Connect player",
        "    if (sender.contains(\"kdeconnect\", Qt::CaseInsensitive)) {",
        "        return;",
        "    }",
        "",
        "    if (interface == \"org.mpris.MediaPlayer2.Player\" && changed.contains(\"PlaybackStatus\")) {",
        "        emit playbackStatusChanged(changed.value(\"PlaybackStatus\").toString());",
        "    }",
        "}",
        "",
        "void PlayerStatusWatcher::updateStatus() {",
        "    QVariant reply = m_iface->property(\"PlaybackStatus\");",
        "    if (reply.isValid()) {",
        "        emit playbackStatusChanged(reply.toString());",
        "    }",
        "}",
        "",
        "void PlayerStatusWatcher::onServiceOwnerChanged(const QString &name, const QString &, const QString &newOwner)",
        "{",
        "    if (name == m_playerService && newOwner.isEmpty()) {",
        "        emit playbackStatusChanged(\"\"); // player disappeared",
        "    } else if (name == m_playerService && !newOwner.isEmpty()) {",
        "        updateStatus(); // player appeared/reappeared",
        "    }",
        "}",
        "",
        "QString PlayerStatusWatcher::getCurrentPlaybackStatus(const QString &playerService)",
        "{",
        "    QDBusInterface iface(",
        "        playerService,",
        "        \"/org/mpris/MediaPlayer2\",",
        "        \"org.mpris.MediaPlayer2.Player\",",
        "        QDBusConnection::sessionBus());",
        "    QVariant reply = iface.property(\"PlaybackStatus\");",
        "    if (reply.isValid())",
        "    {",
        "        return reply.toString(); // \"Playing\", \"Paused\", \"Stopped\"",
        "    }",
        "    else",
        "    {",
        "        return QString(); // or handle error as needed",
        "    }",
        "}"
      ],
      "linux/CMakeLists.txt": [
        "cmake_minimum_required(VERSION 3.16)",
        "",
        "project(linux VERSION 0.1 LANGUAGES CXX)",
        "",
        "set(CMAKE_CXX_STANDARD_REQUIRED ON)",
        "",
        "find_package(Qt6 6.4 REQUIRED COMPONENTS Quick Widgets Bluetooth DBus)",
        "find_package(OpenSSL REQUIRED)",
        "",
        "qt_standard_project_setup(REQUIRES 6.4)",
        "",
        "qt_add_executable(librepods",
        "    main.cpp",
        "    logger.h",
        "    media/mediacontroller.cpp",
        "    media/mediacontroller.h",
        "    airpods_packets.h",
        "    trayiconmanager.cpp",
        "    trayiconmanager.h",
        "    enums.h",
        "    battery.hpp",
        "    BluetoothMonitor.cpp",
        "    BluetoothMonitor.h",
        "    autostartmanager.hpp",
        "    BasicControlCommand.hpp",
        "    deviceinfo.hpp",
        "    ble/bleutils.cpp",
        "    ble/bleutils.h",
        "    ble/blemanager.cpp",
        "    ble/blemanager.h",
        "    thirdparty/QR-Code-generator/qrcodegen.cpp",
        "    thirdparty/QR-Code-generator/qrcodegen.hpp",
        "    QRCodeImageProvider.hpp",
        "    eardetection.hpp",
        "    media/playerstatuswatcher.cpp",
        "    media/playerstatuswatcher.h",
        "    systemsleepmonitor.hpp",
        ")",
        "",
        "qt_add_qml_module(librepods",
        "    URI linux",
        "    VERSION 1.0",
        "    QML_FILES",
        "        Main.qml",
        "        BatteryIndicator.qml",
        "        SegmentedControl.qml",
        "        PodColumn.qml",
        "        Icon.qml",
        "        KeysQRDialog.qml",
        ")",
        "",
        "# Add the resource file",
        "qt_add_resources(librepods \"resources\"",
        "    PREFIX \"/icons\"",
        "    FILES",
        "        assets/airpods.png",
        "        assets/pod.png",
        "        assets/pod_case.png",
        "        assets/pod3.png",
        "        assets/pod3_case.png",
        "        assets/pod4_case.png",
        "        assets/podpro.png",
        "        assets/podpro_case.png",
        "        assets/podmax.png",
        "        assets/fonts/SF-Symbols-6.ttf",
        ")",
        "",
        "target_link_libraries(librepods",
        "    PRIVATE Qt6::Quick Qt6::Widgets Qt6::Bluetooth Qt6::DBus OpenSSL::SSL OpenSSL::Crypto",
        ")",
        "",
        "include(GNUInstallDirs)",
        "install(TARGETS librepods",
        "    BUNDLE DESTINATION .",
        "    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}",
        "    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}",
        ")"
      ],
      "linux/trayiconmanager.cpp": [
        "#include \"trayiconmanager.h\"",
        "",
        "#include <QSystemTrayIcon>",
        "#include <QMenu>",
        "#include <QAction>",
        "#include <QApplication>",
        "#include <QPainter>",
        "#include <QFont>",
        "#include <QColor>",
        "#include <QActionGroup>",
        "",
        "using namespace AirpodsTrayApp::Enums;",
        "",
        "TrayIconManager::TrayIconManager(QObject *parent) : QObject(parent)",
        "{",
        "    // Initialize tray icon",
        "    trayIcon = new QSystemTrayIcon(QIcon(\":/icons/assets/airpods.png\"), this);",
        "    trayMenu = new QMenu();",
        "",
        "    // Setup basic menu actions",
        "    setupMenuActions();",
        "",
        "    // Connect signals",
        "    trayIcon->setContextMenu(trayMenu);",
        "    connect(trayIcon, &QSystemTrayIcon::activated, this, &TrayIconManager::onTrayIconActivated);",
        "",
        "    trayIcon->show();",
        "}",
        "",
        "void TrayIconManager::showNotification(const QString &title, const QString &message)",
        "{",
        "    if (!m_notificationsEnabled)",
        "        return;",
        "    trayIcon->showMessage(title, message, QSystemTrayIcon::Information, 3000);",
        "}",
        "",
        "void TrayIconManager::TrayIconManager::updateBatteryStatus(const QString &status)",
        "{",
        "    trayIcon->setToolTip(\"Battery Status: \" + status);",
        "    updateIconFromBattery(status);",
        "}",
        "",
        "void TrayIconManager::updateNoiseControlState(NoiseControlMode mode)",
        "{",
        "    QList<QAction *> actions = noiseControlGroup->actions();",
        "    for (QAction *action : actions)",
        "    {",
        "        action->setChecked(action->data().toInt() == (int)mode);",
        "    }",
        "}",
        "",
        "void TrayIconManager::updateConversationalAwareness(bool enabled)",
        "{",
        "    caToggleAction->setChecked(enabled);",
        "}",
        "",
        "void TrayIconManager::setupMenuActions()",
        "{",
        "    // Open action",
        "    QAction *openAction = new QAction(\"Open\", trayMenu);",
        "    trayMenu->addAction(openAction);",
        "    connect(openAction, &QAction::triggered, qApp, [this](){emit openApp();});",
        "",
        "    // Settings Menu",
        "",
        "    QAction *settingsMenu = new QAction(\"Settings\", trayMenu);",
        "    trayMenu->addAction(settingsMenu);",
        "    connect(settingsMenu, &QAction::triggered, qApp, [this](){emit openSettings();});",
        "",
        "    trayMenu->addSeparator();",
        "",
        "    // Conversational Awareness Toggle",
        "    caToggleAction = new QAction(\"Toggle Conversational Awareness\", trayMenu);",
        "    caToggleAction->setCheckable(true);",
        "    trayMenu->addAction(caToggleAction);",
        "    connect(caToggleAction, &QAction::triggered, this, [this](bool checked)",
        "            { emit conversationalAwarenessToggled(checked); });",
        "",
        "    trayMenu->addSeparator();",
        ""
      ],
      "linux/trayiconmanager.h": [
        "#include <QObject>",
        "#include <QSystemTrayIcon>",
        "",
        "#include \"enums.h\"",
        "",
        "class QMenu;",
        "class QAction;",
        "class QActionGroup;",
        "",
        "class TrayIconManager : public QObject",
        "{",
        "    Q_OBJECT",
        "    Q_PROPERTY(bool notificationsEnabled READ notificationsEnabled WRITE setNotificationsEnabled NOTIFY notificationsEnabledChanged)",
        "",
        "public:",
        "    explicit TrayIconManager(QObject *parent = nullptr);",
        "",
        "    void updateBatteryStatus(const QString &status);",
        "",
        "    void updateNoiseControlState(AirpodsTrayApp::Enums::NoiseControlMode);",
        "",
        "    void updateConversationalAwareness(bool enabled);",
        "",
        "    void showNotification(const QString &title, const QString &message);",
        "",
        "    bool notificationsEnabled() const { return m_notificationsEnabled; }",
        "    void setNotificationsEnabled(bool enabled)",
        "    {",
        "        if (m_notificationsEnabled != enabled)",
        "        {",
        "            m_notificationsEnabled = enabled;",
        "            emit notificationsEnabledChanged(enabled);",
        "        }",
        "    }",
        "",
        "    void resetTrayIcon()",
        "    {",
        "        trayIcon->setIcon(QIcon(\":/icons/assets/airpods.png\"));",
        "        trayIcon->setToolTip(\"\");",
        "    }",
        "",
        "signals:",
        "    void notificationsEnabledChanged(bool enabled);",
        "",
        "private slots:",
        "    void onTrayIconActivated(QSystemTrayIcon::ActivationReason reason);",
        "",
        "private:",
        "    QSystemTrayIcon *trayIcon;",
        "    QMenu *trayMenu;",
        "    QAction *caToggleAction;",
        "    QActionGroup *noiseControlGroup;",
        "    bool m_notificationsEnabled = true;",
        "",
        "    void setupMenuActions();",
        "",
        "    void updateIconFromBattery(const QString &status);",
        "",
        "signals:",
        "    void trayClicked();",
        "    void noiseControlChanged(AirpodsTrayApp::Enums::NoiseControlMode);",
        "    void conversationalAwarenessToggled(bool enabled);",
        "    void openApp();",
        "    void openSettings();",
        "};"
      ],
      "linux/enums.h": [
        "#pragma once",
        "",
        "#include <QMetaType>",
        "#include <QHash>",
        "",
        "namespace AirpodsTrayApp",
        "{",
        "    namespace Enums",
        "    {",
        "        Q_NAMESPACE",
        "",
        "        enum class NoiseControlMode : quint8",
        "        {",
        "            Off = 0,",
        "            NoiseCancellation = 1,",
        "            Transparency = 2,",
        "            Adaptive = 3,",
        "",
        "            MinValue = Off,",
        "            MaxValue = Adaptive,",
        "        };",
        "        Q_ENUM_NS(NoiseControlMode)",
        "",
        "        enum class AirPodsModel",
        "        {",
        "            Unknown,",
        "            AirPods1,",
        "            AirPods2,",
        "            AirPods3,",
        "            AirPodsPro,",
        "            AirPodsPro2Lightning,",
        "            AirPodsPro2USBC,",
        "            AirPodsMaxLightning,",
        "            AirPodsMaxUSBC,",
        "            AirPods4,",
        "            AirPods4ANC",
        "        };",
        "        Q_ENUM_NS(AirPodsModel)",
        "",
        "        // Get model enum from model number",
        "        inline AirPodsModel parseModelNumber(const QString &modelNumber)",
        "        {",
        "            // Model numbers taken from https://support.apple.com/en-us/109525",
        "            QHash<QString, AirPodsModel> modelNumberMap = {",
        "                {\"A1523\", AirPodsModel::AirPods1},",
        "                {\"A1722\", AirPodsModel::AirPods1},",
        "                {\"A2032\", AirPodsModel::AirPods2},",
        "                {\"A2031\", AirPodsModel::AirPods2},",
        "                {\"A2084\", AirPodsModel::AirPodsPro},",
        "                {\"A2083\", AirPodsModel::AirPodsPro},",
        "                {\"A2096\", AirPodsModel::AirPodsMaxLightning},",
        "                {\"A3184\", AirPodsModel::AirPodsMaxUSBC},",
        "                {\"A2565\", AirPodsModel::AirPods3},",
        "                {\"A2564\", AirPodsModel::AirPods3},",
        "                {\"A3047\", AirPodsModel::AirPodsPro2USBC},",
        "                {\"A3048\", AirPodsModel::AirPodsPro2USBC},",
        "                {\"A3049\", AirPodsModel::AirPodsPro2USBC},",
        "                {\"A2931\", AirPodsModel::AirPodsPro2Lightning},",
        "                {\"A2699\", AirPodsModel::AirPodsPro2Lightning},",
        "                {\"A2698\", AirPodsModel::AirPodsPro2Lightning},",
        "                {\"A3053\", AirPodsModel::AirPods4},",
        "                {\"A3050\", AirPodsModel::AirPods4},",
        "                {\"A3054\", AirPodsModel::AirPods4},",
        "                {\"A3056\", AirPodsModel::AirPods4ANC},",
        "                {\"A3055\", AirPodsModel::AirPods4ANC},",
        "                {\"A3057\", AirPodsModel::AirPods4ANC}};",
        "",
        "            return modelNumberMap.value(modelNumber, AirPodsModel::Unknown);",
        "        }",
        "",
        "        // Return icons based on model",
        "        inline QPair<QString, QString> getModelIcon(AirPodsModel model) {",
        "            switch (model) {",
        "                case AirPodsModel::AirPods1:",
        "                case AirPodsModel::AirPods2:",
        "                    return {\"pod.png\", \"pod_case.png\"};",
        "                case AirPodsModel::AirPods3:",
        "                    return {\"pod3.png\", \"pod3_case.png\"};",
        "                case AirPodsModel::AirPods4:",
        "                case AirPodsModel::AirPods4ANC:"
      ],
      "linux/QRCodeImageProvider.hpp": [
        "#include <QQuickImageProvider>",
        "#include <QPainter>",
        "#include \"thirdparty/QR-Code-generator/qrcodegen.hpp\"",
        "",
        "class QRCodeImageProvider : public QQuickImageProvider",
        "{",
        "public:",
        "    QRCodeImageProvider() : QQuickImageProvider(QQuickImageProvider::Image) {}",
        "",
        "    QImage requestImage(const QString &id, QSize *size, const QSize &requestedSize) override",
        "    {",
        "        // Parse the keys from id (format: \"encKey;irk\")",
        "        QStringList keys = id.split(';');",
        "        if (keys.size() != 2)",
        "            return QImage();",
        "",
        "        // Create URL format: librepods://add-magic-keys?enc_key=...&irk=...",
        "        QString data = QString(\"librepods://add-magic-keys?enc_key=%1&irk=%2\").arg(keys[0], keys[1]);",
        "",
        "        // Generate QR code using the existing qrcodegen library",
        "        qrcodegen::QrCode qr = qrcodegen::QrCode::encodeText(data.toUtf8().constData(), qrcodegen::QrCode::Ecc::MEDIUM);",
        "",
        "        int scale = 8;",
        "        QImage image(qr.getSize() * scale, qr.getSize() * scale, QImage::Format_RGB32);",
        "        image.fill(Qt::white);",
        "",
        "        QPainter painter(&image);",
        "        painter.setPen(Qt::NoPen);",
        "        painter.setBrush(Qt::black);",
        "",
        "        for (int y = 0; y < qr.getSize(); y++)",
        "        {",
        "            for (int x = 0; x < qr.getSize(); x++)",
        "            {",
        "                if (qr.getModule(x, y))",
        "                {",
        "                    painter.drawRect(x * scale, y * scale, scale, scale);",
        "                }",
        "            }",
        "        }",
        "",
        "        if (size)",
        "            *size = image.size();",
        "        return image;",
        "    }",
        "};"
      ],
      "linux/autostartmanager.hpp": [
        "#ifndef AUTOSTARTMANAGER_HPP",
        "#define AUTOSTARTMANAGER_HPP",
        "",
        "#include <QObject>",
        "#include <QSettings>",
        "#include <QStandardPaths>",
        "#include <QFile>",
        "#include <QDir>",
        "#include <QCoreApplication>",
        "",
        "class AutoStartManager : public QObject",
        "{",
        "    Q_OBJECT",
        "    Q_PROPERTY(bool autoStartEnabled READ autoStartEnabled WRITE setAutoStartEnabled NOTIFY autoStartEnabledChanged)",
        "",
        "public:",
        "    explicit AutoStartManager(QObject *parent = nullptr) : QObject(parent)",
        "    {",
        "        QString autostartDir = QStandardPaths::writableLocation(QStandardPaths::ConfigLocation) + \"/autostart\";",
        "        QDir().mkpath(autostartDir);",
        "        m_autostartFilePath = autostartDir + \"/\" + QCoreApplication::applicationName() + \".desktop\";",
        "    }",
        "",
        "    bool autoStartEnabled() const",
        "    {",
        "        return QFile::exists(m_autostartFilePath);",
        "    }",
        "",
        "    void setAutoStartEnabled(bool enabled)",
        "    {",
        "        if (autoStartEnabled() == enabled)",
        "        {",
        "            return;",
        "        }",
        "",
        "        if (enabled)",
        "        {",
        "            createAutoStartEntry();",
        "        }",
        "        else",
        "        {",
        "            removeAutoStartEntry();",
        "        }",
        "",
        "        emit autoStartEnabledChanged(enabled);",
        "    }",
        "",
        "private:",
        "    void createAutoStartEntry()",
        "    {",
        "        QFile desktopFile(m_autostartFilePath);",
        "        if (!desktopFile.open(QIODevice::WriteOnly | QIODevice::Text))",
        "        {",
        "            qWarning() << \"Failed to create autostart file:\" << desktopFile.errorString();",
        "            return;",
        "        }",
        "",
        "        QString appPath = QCoreApplication::applicationFilePath();",
        "        // Handle cases where the path might contain spaces",
        "        if (appPath.contains(' '))",
        "        {",
        "            appPath = \"\\\"\" + appPath + \"\\\"\";",
        "        }",
        "",
        "        QString content = QStringLiteral(",
        "                              \"[Desktop Entry]\\n\"",
        "                              \"Type=Application\\n\"",
        "                              \"Name=%1\\n\"",
        "                              \"Exec=%2 --hide\\n\"",
        "                              \"Icon=%3\\n\"",
        "                              \"Comment=%4\\n\"",
        "                              \"X-GNOME-Autostart-enabled=true\\n\"",
        "                              \"Terminal=false\\n\")",
        "                              .arg(",
        "                                  QCoreApplication::applicationName(),",
        "                                  appPath,",
        "                                  QCoreApplication::applicationName().toLower(),",
        "                                  QCoreApplication::applicationName() + \" autostart\");",
        "",
        "        desktopFile.write(content.toUtf8());"
      ],
      "linux/systemsleepmonitor.hpp": [
        "#ifndef SYSTEMSLEEPMONITOR_HPP",
        "#define SYSTEMSLEEPMONITOR_HPP",
        "",
        "#include <QObject>",
        "#include <QDBusConnection>",
        "#include <QDBusInterface>",
        "#include <QDBusMessage>",
        "#include <QDebug>",
        "",
        "class SystemSleepMonitor : public QObject {",
        "    Q_OBJECT",
        "",
        "public:",
        "    explicit SystemSleepMonitor(QObject *parent = nullptr) : QObject(parent) {",
        "        // Connect to the system D-Bus",
        "        QDBusConnection systemBus = QDBusConnection::systemBus();",
        "        if (!systemBus.isConnected()) {",
        "            qWarning() << \"Cannot connect to system D-Bus\";",
        "            return;",
        "        }",
        "",
        "        // Subscribe to PrepareForSleep signal from logind",
        "        systemBus.connect(",
        "            \"org.freedesktop.login1\",",
        "            \"/org/freedesktop/login1\",",
        "            \"org.freedesktop.login1.Manager\",",
        "            \"PrepareForSleep\",",
        "            this,",
        "            SLOT(handlePrepareForSleep(bool))",
        "        );",
        "    }",
        "",
        "    ~SystemSleepMonitor() override = default;",
        "",
        "signals:",
        "    void systemGoingToSleep();",
        "    void systemWakingUp();",
        "",
        "private slots:",
        "    void handlePrepareForSleep(bool sleeping) {",
        "        if (sleeping) {",
        "            emit systemGoingToSleep();",
        "        } else {",
        "            emit systemWakingUp();",
        "        }",
        "    }",
        "};",
        "",
        "#endif // SYSTEMSLEEPMONITOR_HPP"
      ],
      "linux/deviceinfo.hpp": [
        "#pragma once",
        "",
        "#include <QObject>",
        "#include <QByteArray>",
        "#include <QSettings>",
        "#include \"battery.hpp\"",
        "#include \"enums.h\"",
        "#include \"eardetection.hpp\"",
        "",
        "using namespace AirpodsTrayApp::Enums;",
        "",
        "class DeviceInfo : public QObject",
        "{",
        "    Q_OBJECT",
        "    Q_PROPERTY(QString batteryStatus READ batteryStatus WRITE setBatteryStatus NOTIFY batteryStatusChanged)",
        "    Q_PROPERTY(int noiseControlMode READ noiseControlModeInt WRITE setNoiseControlModeInt NOTIFY noiseControlModeChangedInt)",
        "    Q_PROPERTY(bool conversationalAwareness READ conversationalAwareness WRITE setConversationalAwareness NOTIFY conversationalAwarenessChanged)",
        "    Q_PROPERTY(int adaptiveNoiseLevel READ adaptiveNoiseLevel WRITE setAdaptiveNoiseLevel NOTIFY adaptiveNoiseLevelChanged)",
        "    Q_PROPERTY(QString deviceName READ deviceName WRITE setDeviceName NOTIFY deviceNameChanged)",
        "    Q_PROPERTY(Battery *battery READ getBattery CONSTANT)",
        "    Q_PROPERTY(bool oneBudANCMode READ oneBudANCMode WRITE setOneBudANCMode NOTIFY oneBudANCModeChanged)",
        "    Q_PROPERTY(AirPodsModel model READ model WRITE setModel NOTIFY modelChanged)",
        "    Q_PROPERTY(bool adaptiveModeActive READ adaptiveModeActive NOTIFY noiseControlModeChangedInt)",
        "    Q_PROPERTY(QString podIcon READ podIcon NOTIFY modelChanged)",
        "    Q_PROPERTY(QString caseIcon READ caseIcon NOTIFY modelChanged)",
        "    Q_PROPERTY(bool leftPodInEar READ isLeftPodInEar NOTIFY primaryChanged)",
        "    Q_PROPERTY(bool rightPodInEar READ isRightPodInEar NOTIFY primaryChanged)",
        "    Q_PROPERTY(QString bluetoothAddress READ bluetoothAddress WRITE setBluetoothAddress NOTIFY bluetoothAddressChanged)",
        "    Q_PROPERTY(QString magicAccIRK READ magicAccIRKHex CONSTANT)",
        "    Q_PROPERTY(QString magicAccEncKey READ magicAccEncKeyHex CONSTANT)",
        "",
        "public:",
        "    explicit DeviceInfo(QObject *parent = nullptr) : QObject(parent), m_battery(new Battery(this)), m_earDetection(new EarDetection(this)) {",
        "        connect(getEarDetection(), &EarDetection::statusChanged, this, &DeviceInfo::primaryChanged);",
        "    }",
        "",
        "    QString batteryStatus() const { return m_batteryStatus; }",
        "    void setBatteryStatus(const QString &status)",
        "    {",
        "        if (m_batteryStatus != status)",
        "        {",
        "            m_batteryStatus = status;",
        "            emit batteryStatusChanged(status);",
        "        }",
        "    }",
        "",
        "    NoiseControlMode noiseControlMode() const { return m_noiseControlMode; }",
        "    void setNoiseControlMode(NoiseControlMode mode)",
        "    {",
        "        if (m_noiseControlMode != mode)",
        "        {",
        "            m_noiseControlMode = mode;",
        "            emit noiseControlModeChanged(mode);",
        "            emit noiseControlModeChangedInt(static_cast<int>(mode));",
        "        }",
        "    }",
        "    int noiseControlModeInt() const { return static_cast<int>(noiseControlMode()); }",
        "    void setNoiseControlModeInt(int mode) { setNoiseControlMode(static_cast<NoiseControlMode>(mode)); }",
        "",
        "    bool conversationalAwareness() const { return m_conversationalAwareness; }",
        "    void setConversationalAwareness(bool enabled)",
        "    {",
        "        if (m_conversationalAwareness != enabled)",
        "        {",
        "            m_conversationalAwareness = enabled;",
        "            emit conversationalAwarenessChanged(enabled);",
        "        }",
        "    }",
        "",
        "    int adaptiveNoiseLevel() const { return m_adaptiveNoiseLevel; }",
        "    void setAdaptiveNoiseLevel(int level)",
        "    {",
        "        if (m_adaptiveNoiseLevel != level)",
        "        {",
        "            m_adaptiveNoiseLevel = level;",
        "            emit adaptiveNoiseLevelChanged(level);",
        "        }",
        "    }",
        "",
        "    QString deviceName() const { return m_deviceName; }"
      ],
      "linux/BluetoothMonitor.h": [
        "#ifndef BLUETOOTHMONITOR_H",
        "#define BLUETOOTHMONITOR_H",
        "",
        "#include <QObject>",
        "#include <QtDBus/QtDBus>",
        "",
        "// Forward declarations for D-Bus types",
        "typedef QMap<QDBusObjectPath, QMap<QString, QVariantMap>> ManagedObjectList;",
        "Q_DECLARE_METATYPE(ManagedObjectList)",
        "",
        "class BluetoothMonitor : public QObject, protected QDBusContext",
        "{",
        "    Q_OBJECT",
        "public:",
        "    explicit BluetoothMonitor(QObject *parent = nullptr);",
        "    ~BluetoothMonitor();",
        "",
        "    bool checkAlreadyConnectedDevices();",
        "",
        "signals:",
        "    void deviceConnected(const QString &macAddress, const QString &deviceName);",
        "    void deviceDisconnected(const QString &macAddress, const QString &deviceName);",
        "",
        "private slots:",
        "    void onPropertiesChanged(const QString &interface, const QVariantMap &changedProps, const QStringList &invalidatedProps);",
        "",
        "private:",
        "    QDBusConnection m_dbus;",
        "    void registerDBusService();",
        "    bool isAirPodsDevice(const QString &devicePath);",
        "    QString getDeviceName(const QString &devicePath);",
        "};",
        "",
        "#endif // BLUETOOTHMONITOR_H"
      ],
      "linux/BluetoothMonitor.cpp": [
        "#include \"BluetoothMonitor.h\"",
        "#include \"logger.h\"",
        "",
        "#include <QDebug>",
        "#include <QDBusObjectPath>",
        "#include <QDBusMetaType>",
        "",
        "BluetoothMonitor::BluetoothMonitor(QObject *parent)",
        "    : QObject(parent), m_dbus(QDBusConnection::systemBus())",
        "{",
        "    // Register meta-types for D-Bus interaction",
        "    qDBusRegisterMetaType<QDBusObjectPath>();",
        "    qDBusRegisterMetaType<ManagedObjectList>();",
        "",
        "    if (!m_dbus.isConnected())",
        "    {",
        "        LOG_WARN(\"Failed to connect to system D-Bus\");",
        "        return;",
        "    }",
        "",
        "    registerDBusService();",
        "    checkAlreadyConnectedDevices(); // Check for already connected devices on startup",
        "}",
        "",
        "BluetoothMonitor::~BluetoothMonitor()",
        "{",
        "    m_dbus.disconnectFromBus(m_dbus.name());",
        "}",
        "",
        "void BluetoothMonitor::registerDBusService()",
        "{",
        "    // Match signals for PropertiesChanged on any BlueZ Device interface",
        "    if (!m_dbus.connect(\"\", \"\", \"org.freedesktop.DBus.Properties\", \"PropertiesChanged\",",
        "                        this, SLOT(onPropertiesChanged(QString, QVariantMap, QStringList))))",
        "    {",
        "        LOG_WARN(\"Failed to connect to D-Bus PropertiesChanged signal\");",
        "    }",
        "}",
        "",
        "bool BluetoothMonitor::isAirPodsDevice(const QString &devicePath)",
        "{",
        "    QDBusInterface deviceInterface(\"org.bluez\", devicePath, \"org.freedesktop.DBus.Properties\", m_dbus);",
        "",
        "    // Get UUIDs to check if it's an AirPods device",
        "    QDBusReply<QVariant> uuidsReply = deviceInterface.call(\"Get\", \"org.bluez.Device1\", \"UUIDs\");",
        "    if (!uuidsReply.isValid())",
        "    {",
        "        return false;",
        "    }",
        "",
        "    QStringList uuids = uuidsReply.value().toStringList();",
        "    return uuids.contains(\"74ec2172-0bad-4d01-8f77-997b2be0722a\");",
        "}",
        "",
        "QString BluetoothMonitor::getDeviceName(const QString &devicePath)",
        "{",
        "    QDBusInterface deviceInterface(\"org.bluez\", devicePath, \"org.freedesktop.DBus.Properties\", m_dbus);",
        "    QDBusReply<QVariant> nameReply = deviceInterface.call(\"Get\", \"org.bluez.Device1\", \"Name\");",
        "    if (nameReply.isValid())",
        "    {",
        "        return nameReply.value().toString();",
        "    }",
        "    return \"Unknown\";",
        "}",
        "",
        "bool BluetoothMonitor::checkAlreadyConnectedDevices()",
        "{",
        "    QDBusInterface objectManager(\"org.bluez\", \"/\", \"org.freedesktop.DBus.ObjectManager\", m_dbus);",
        "    QDBusMessage reply = objectManager.call(\"GetManagedObjects\");",
        "",
        "    if (reply.type() == QDBusMessage::ErrorMessage)",
        "    {",
        "        LOG_WARN(\"Failed to get managed objects: \" << reply.errorMessage());",
        "        return false;",
        "    }",
        "",
        "    QVariant firstArg = reply.arguments().constFirst();",
        "    QDBusArgument arg = firstArg.value<QDBusArgument>();",
        "    ManagedObjectList managedObjects;",
        "    arg >> managedObjects;"
      ],
      "linux/airpods_packets.h": [
        "// airpods_packets.h",
        "#ifndef AIRPODS_PACKETS_H",
        "#define AIRPODS_PACKETS_H",
        "",
        "#include <QByteArray>",
        "#include <optional>",
        "#include <climits>",
        "",
        "#include \"enums.h\"",
        "#include \"BasicControlCommand.hpp\"",
        "",
        "namespace AirPodsPackets",
        "{",
        "    // Noise Control Mode Packets",
        "    namespace NoiseControl",
        "    {",
        "        using NoiseControlMode = AirpodsTrayApp::Enums::NoiseControlMode;",
        "        static const QByteArray HEADER = ControlCommand::HEADER + 0x0D;",
        "        static const QByteArray OFF = ControlCommand::createCommand(0x0D, 0x01);",
        "        static const QByteArray NOISE_CANCELLATION = ControlCommand::createCommand(0x0D, 0x02);",
        "        static const QByteArray TRANSPARENCY = ControlCommand::createCommand(0x0D, 0x03);",
        "        static const QByteArray ADAPTIVE = ControlCommand::createCommand(0x0D, 0x04);",
        "",
        "        static const QByteArray getPacketForMode(AirpodsTrayApp::Enums::NoiseControlMode mode)",
        "        {",
        "            switch (mode)",
        "            {",
        "            case NoiseControlMode::Off:",
        "                return OFF;",
        "            case NoiseControlMode::NoiseCancellation:",
        "                return NOISE_CANCELLATION;",
        "            case NoiseControlMode::Transparency:",
        "                return TRANSPARENCY;",
        "            case NoiseControlMode::Adaptive:",
        "                return ADAPTIVE;",
        "            default:",
        "                return QByteArray();",
        "            }",
        "        }",
        "",
        "        inline std::optional<NoiseControlMode> parseMode(const QByteArray &data)",
        "        {",
        "            char mode = ControlCommand::parseActive(data).value_or(CHAR_MAX) - 1;",
        "            if (mode < static_cast<quint8>(NoiseControlMode::MinValue) ||",
        "                mode > static_cast<quint8>(NoiseControlMode::MaxValue))",
        "            {",
        "                return std::nullopt;",
        "            }",
        "            return static_cast<NoiseControlMode>(mode);",
        "        }",
        "    }",
        "",
        "    // One Bud ANC Mode",
        "    namespace OneBudANCMode",
        "    {",
        "        using Type = BasicControlCommand<0x1B>;",
        "        static const QByteArray ENABLED = Type::ENABLED;",
        "        static const QByteArray DISABLED = Type::DISABLED;",
        "        static const QByteArray HEADER = Type::HEADER;",
        "        inline std::optional<bool> parseState(const QByteArray &data) { return Type::parseState(data); }",
        "    }",
        "",
        "    // Volume Swipe (partial - still needs custom interval function)",
        "    namespace VolumeSwipe",
        "    {",
        "        using Type = BasicControlCommand<0x25>;",
        "        static const QByteArray ENABLED = Type::ENABLED;",
        "        static const QByteArray DISABLED = Type::DISABLED;",
        "        static const QByteArray HEADER = Type::HEADER;",
        "        inline std::optional<bool> parseState(const QByteArray &data) { return Type::parseState(data); }",
        "",
        "        // Keep custom interval function",
        "        static QByteArray getIntervalPacket(quint8 interval)",
        "        {",
        "            return ControlCommand::createCommand(0x23, interval);",
        "        }",
        "    }",
        "",
        "    // Adaptive Volume Config",
        "    namespace AdaptiveVolume"
      ],
      "linux/battery.hpp": [
        "#pragma once",
        "",
        "#include <QByteArray>",
        "#include <QMap>",
        "#include <QString>",
        "#include <QObject>",
        "#include <climits>",
        "",
        "#include \"airpods_packets.h\"",
        "#include \"logger.h\"",
        "",
        "class Battery : public QObject",
        "{",
        "    Q_OBJECT",
        "",
        "    Q_PROPERTY(quint8 leftPodLevel READ getLeftPodLevel NOTIFY batteryStatusChanged)",
        "    Q_PROPERTY(bool leftPodCharging READ isLeftPodCharging NOTIFY batteryStatusChanged)",
        "    Q_PROPERTY(bool leftPodAvailable READ isLeftPodAvailable NOTIFY batteryStatusChanged)",
        "    Q_PROPERTY(quint8 rightPodLevel READ getRightPodLevel NOTIFY batteryStatusChanged)",
        "    Q_PROPERTY(bool rightPodCharging READ isRightPodCharging NOTIFY batteryStatusChanged)",
        "    Q_PROPERTY(bool rightPodAvailable READ isRightPodAvailable NOTIFY batteryStatusChanged)",
        "    Q_PROPERTY(quint8 caseLevel READ getCaseLevel NOTIFY batteryStatusChanged)",
        "    Q_PROPERTY(bool caseCharging READ isCaseCharging NOTIFY batteryStatusChanged)",
        "    Q_PROPERTY(bool caseAvailable READ isCaseAvailable NOTIFY batteryStatusChanged)",
        "",
        "public:",
        "    explicit Battery(QObject *parent = nullptr) : QObject(parent)",
        "    {",
        "        reset();",
        "    }",
        "",
        "    void reset()",
        "    {",
        "        // Initialize all components to unknown state",
        "        states[Component::Left] = {};",
        "        states[Component::Right] = {};",
        "        states[Component::Case] = {};",
        "        emit batteryStatusChanged();",
        "    }",
        "",
        "    // Enum for AirPods components",
        "    enum class Component",
        "    {",
        "        Right = 0x02,",
        "        Left = 0x04,",
        "        Case = 0x08,",
        "    };",
        "    Q_ENUM(Component)",
        "",
        "    enum class BatteryStatus",
        "    {",
        "        Charging = 0x01,",
        "        Discharging = 0x02,",
        "        Disconnected = 0x04,",
        "    };",
        "    Q_ENUM(BatteryStatus)",
        "",
        "    // Struct to hold battery level and status",
        "    struct BatteryState",
        "    {",
        "        quint8 level = 0; // Battery level (0-100), 0 if unknown",
        "        BatteryStatus status = BatteryStatus::Disconnected;",
        "    };",
        "",
        "    // Parse the battery status packet and detect primary/secondary pods",
        "    bool parsePacket(const QByteArray &packet)",
        "    {",
        "        if (!packet.startsWith(AirPodsPackets::Parse::BATTERY_STATUS))",
        "        {",
        "            return false;",
        "        }",
        "",
        "        // Get battery count (number of components)",
        "        quint8 batteryCount = static_cast<quint8>(packet[6]);",
        "        if (batteryCount > 3 || packet.size() != 7 + 5 * batteryCount)",
        "        {",
        "            return false; // Invalid count or size mismatch",
        "        }",
        "",
        "        QMap<Component, BatteryState> newStates = states;"
      ],
      "linux/main.cpp": [
        "#include <QSettings>",
        "#include <QLocalServer>",
        "#include <QLocalSocket>",
        "#include <QApplication>",
        "#include <QQmlApplicationEngine>",
        "#include <QQmlContext>",
        "#include <QBluetoothLocalDevice>",
        "#include <QBluetoothSocket>",
        "#include <QQuickWindow>",
        "#include <QLoggingCategory>",
        "#include <QThread>",
        "#include <QTimer>",
        "#include <QProcess>",
        "#include <QRegularExpression>",
        "",
        "#include \"airpods_packets.h\"",
        "#include \"logger.h\"",
        "#include \"media/mediacontroller.h\"",
        "#include \"trayiconmanager.h\"",
        "#include \"enums.h\"",
        "#include \"battery.hpp\"",
        "#include \"BluetoothMonitor.h\"",
        "#include \"autostartmanager.hpp\"",
        "#include \"deviceinfo.hpp\"",
        "#include \"ble/blemanager.h\"",
        "#include \"ble/bleutils.h\"",
        "#include \"QRCodeImageProvider.hpp\"",
        "#include \"systemsleepmonitor.hpp\"",
        "",
        "using namespace AirpodsTrayApp::Enums;",
        "",
        "Q_LOGGING_CATEGORY(Librepods, \"Librepods\")",
        "",
        "class AirPodsTrayApp : public QObject {",
        "    Q_OBJECT",
        "    Q_PROPERTY(bool airpodsConnected READ areAirpodsConnected NOTIFY airPodsStatusChanged)",
        "    Q_PROPERTY(int earDetectionBehavior READ earDetectionBehavior WRITE setEarDetectionBehavior NOTIFY earDetectionBehaviorChanged)",
        "    Q_PROPERTY(bool crossDeviceEnabled READ crossDeviceEnabled WRITE setCrossDeviceEnabled NOTIFY crossDeviceEnabledChanged)",
        "    Q_PROPERTY(AutoStartManager *autoStartManager READ autoStartManager CONSTANT)",
        "    Q_PROPERTY(bool notificationsEnabled READ notificationsEnabled WRITE setNotificationsEnabled NOTIFY notificationsEnabledChanged)",
        "    Q_PROPERTY(int retryAttempts READ retryAttempts WRITE setRetryAttempts NOTIFY retryAttemptsChanged)",
        "    Q_PROPERTY(bool hideOnStart READ hideOnStart CONSTANT)",
        "    Q_PROPERTY(DeviceInfo *deviceInfo READ deviceInfo CONSTANT)",
        "    Q_PROPERTY(QString phoneMacStatus READ phoneMacStatus NOTIFY phoneMacStatusChanged)",
        "",
        "public:",
        "    AirPodsTrayApp(bool debugMode, bool hideOnStart, QQmlApplicationEngine *parent = nullptr)",
        "        : QObject(parent), debugMode(debugMode), m_settings(new QSettings(\"AirPodsTrayApp\", \"AirPodsTrayApp\"))",
        "        , m_autoStartManager(new AutoStartManager(this)), m_hideOnStart(hideOnStart), parent(parent)",
        "        , m_deviceInfo(new DeviceInfo(this)), m_bleManager(new BleManager(this))",
        "        , m_systemSleepMonitor(new SystemSleepMonitor(this))",
        "    {",
        "        QLoggingCategory::setFilterRules(QString(\"Librepods.debug=%1\").arg(debugMode ? \"true\" : \"false\"));",
        "        LOG_INFO(\"Initializing AirPodsTrayApp\");",
        "",
        "        // Initialize tray icon and connect signals",
        "        trayManager = new TrayIconManager(this);",
        "        trayManager->setNotificationsEnabled(loadNotificationsEnabled());",
        "        connect(trayManager, &TrayIconManager::trayClicked, this, &AirPodsTrayApp::onTrayIconActivated);",
        "        connect(trayManager, &TrayIconManager::openApp, this, &AirPodsTrayApp::onOpenApp);",
        "        connect(trayManager, &TrayIconManager::openSettings, this, &AirPodsTrayApp::onOpenSettings);",
        "        connect(trayManager, &TrayIconManager::noiseControlChanged, this, &AirPodsTrayApp::setNoiseControlMode);",
        "        connect(trayManager, &TrayIconManager::conversationalAwarenessToggled, this, &AirPodsTrayApp::setConversationalAwareness);",
        "        connect(m_deviceInfo, &DeviceInfo::batteryStatusChanged, trayManager, &TrayIconManager::updateBatteryStatus);",
        "        connect(m_deviceInfo, &DeviceInfo::noiseControlModeChanged, trayManager, &TrayIconManager::updateNoiseControlState);",
        "        connect(m_deviceInfo, &DeviceInfo::conversationalAwarenessChanged, trayManager, &TrayIconManager::updateConversationalAwareness);",
        "        connect(trayManager, &TrayIconManager::notificationsEnabledChanged, this, &AirPodsTrayApp::saveNotificationsEnabled);",
        "        connect(trayManager, &TrayIconManager::notificationsEnabledChanged, this, &AirPodsTrayApp::notificationsEnabledChanged);",
        "",
        "        // Initialize MediaController and connect signals",
        "        mediaController = new MediaController(this);",
        "        connect(mediaController, &MediaController::mediaStateChanged, this, &AirPodsTrayApp::handleMediaStateChange);",
        "        mediaController->followMediaChanges();",
        "",
        "        monitor = new BluetoothMonitor(this);",
        "        connect(monitor, &BluetoothMonitor::deviceConnected, this, &AirPodsTrayApp::bluezDeviceConnected);",
        "        connect(monitor, &BluetoothMonitor::deviceDisconnected, this, &AirPodsTrayApp::bluezDeviceDisconnected);",
        "",
        "        connect(m_bleManager, &BleManager::deviceFound, this, &AirPodsTrayApp::bleDeviceFound);",
        "        connect(m_deviceInfo->getBattery(), &Battery::primaryChanged, this, &AirPodsTrayApp::primaryChanged);"
      ],
      "linux/ble/blemanager.h": [
        "#ifndef BLEMANAGER_H",
        "#define BLEMANAGER_H",
        "",
        "#include <QObject>",
        "#include <QBluetoothDeviceDiscoveryAgent>",
        "#include <QMap>",
        "#include <QString>",
        "#include <QDateTime>",
        "#include \"enums.h\"",
        "",
        "class QTimer;",
        "",
        "class BleInfo",
        "{",
        "public:",
        "    QString name;",
        "    QString address;",
        "    int leftPodBattery = -1; // -1 indicates not available",
        "    int rightPodBattery = -1;",
        "    int caseBattery = -1;",
        "    bool leftCharging = false;",
        "    bool rightCharging = false;",
        "    bool caseCharging = false;",
        "    AirpodsTrayApp::Enums::AirPodsModel modelName = AirpodsTrayApp::Enums::AirPodsModel::Unknown;",
        "    quint8 lidOpenCounter = 0;",
        "    QString color = \"Unknown\"; // Default color",
        "    quint8 status = 0;",
        "    QByteArray rawData;",
        "    QByteArray encryptedPayload; // 16 bytes of encrypted payload",
        "",
        "    // Additional status flags from Kotlin version",
        "    bool isLeftPodInEar = false;",
        "    bool isRightPodInEar = false;",
        "    bool isPrimaryInEar = false;",
        "    bool isSecondaryInEar = false;",
        "    bool isLeftPodMicrophone = false;",
        "    bool isRightPodMicrophone = false;",
        "    bool isThisPodInTheCase = false;",
        "    bool isOnePodInCase = false;",
        "    bool areBothPodsInCase = false;",
        "    bool primaryLeft = true; // True if left pod is primary, false if right pod is primary",
        "",
        "    // Lid state enumeration",
        "    enum class LidState",
        "    {",
        "        OPEN = 0x0,",
        "        CLOSED = 0x1,",
        "        UNKNOWN,",
        "    } lidState = LidState::UNKNOWN;",
        "",
        "    // Connection state enumeration",
        "    enum class ConnectionState : uint8_t",
        "    {",
        "        DISCONNECTED = 0x00,",
        "        IDLE = 0x04,",
        "        MUSIC = 0x05,",
        "        CALL = 0x06,",
        "        RINGING = 0x07,",
        "        HANGING_UP = 0x09,",
        "        UNKNOWN = 0xFF // Using 0xFF for representing null in the original",
        "    } connectionState = ConnectionState::UNKNOWN;",
        "",
        "    QDateTime lastSeen; // Timestamp of last detection",
        "};",
        "",
        "class BleManager : public QObject",
        "{",
        "    Q_OBJECT",
        "public:",
        "    explicit BleManager(QObject *parent = nullptr);",
        "    ~BleManager();",
        "",
        "    void startScan();",
        "    void stopScan();",
        "    bool isScanning() const;",
        "",
        "private slots:",
        "    void onDeviceDiscovered(const QBluetoothDeviceInfo &info);",
        "    void onScanFinished();",
        "    void onErrorOccurred(QBluetoothDeviceDiscoveryAgent::Error error);"
      ],
      "linux/ble/blemanager.cpp": [
        "#include \"blemanager.h\"",
        "#include \"enums.h\"",
        "#include <QDebug>",
        "#include <QTimer>",
        "#include \"logger.h\"",
        "#include <QMap>",
        "",
        "AirpodsTrayApp::Enums::AirPodsModel getModelName(quint16 modelId)",
        "{",
        "    using namespace AirpodsTrayApp::Enums;",
        "    static const QMap<quint16, AirPodsModel> modelMap = {",
        "        {0x0220, AirPodsModel::AirPods1},",
        "        {0x0F20, AirPodsModel::AirPods2},",
        "        {0x1320, AirPodsModel::AirPods3},",
        "        {0x1920, AirPodsModel::AirPods4},",
        "        {0x1B20, AirPodsModel::AirPods4ANC},",
        "        {0x0A20, AirPodsModel::AirPodsMaxLightning},",
        "        {0x1F20, AirPodsModel::AirPodsMaxUSBC},",
        "        {0x0E20, AirPodsModel::AirPodsPro},",
        "        {0x1420, AirPodsModel::AirPodsPro2Lightning},",
        "        {0x2420, AirPodsModel::AirPodsPro2USBC}",
        "    };",
        "",
        "    return modelMap.value(modelId, AirPodsModel::Unknown);",
        "}",
        "",
        "QString getColorName(quint8 colorId)",
        "{",
        "    switch (colorId)",
        "    {",
        "    case 0x00:",
        "        return \"White\";",
        "    case 0x01:",
        "        return \"Black\";",
        "    case 0x02:",
        "        return \"Red\";",
        "    case 0x03:",
        "        return \"Blue\";",
        "    case 0x04:",
        "        return \"Pink\";",
        "    case 0x05:",
        "        return \"Gray\";",
        "    case 0x06:",
        "        return \"Silver\";",
        "    case 0x07:",
        "        return \"Gold\";",
        "    case 0x08:",
        "        return \"Rose Gold\";",
        "    case 0x09:",
        "        return \"Space Gray\";",
        "    case 0x0A:",
        "        return \"Dark Blue\";",
        "    case 0x0B:",
        "        return \"Light Blue\";",
        "    case 0x0C:",
        "        return \"Yellow\";",
        "    default:",
        "        return \"Unknown\";",
        "    }",
        "}",
        "",
        "QString getConnectionStateName(BleInfo::ConnectionState state)",
        "{",
        "    using ConnectionState = BleInfo::ConnectionState;",
        "    switch (state)",
        "    {",
        "    case ConnectionState::DISCONNECTED:",
        "        return QString(\"Disconnected\");",
        "    case ConnectionState::IDLE:",
        "        return QString(\"Idle\");",
        "    case ConnectionState::MUSIC:",
        "        return QString(\"Playing Music\");",
        "    case ConnectionState::CALL:",
        "        return QString(\"On Call\");",
        "    case ConnectionState::RINGING:",
        "        return QString(\"Ringing\");",
        "    case ConnectionState::HANGING_UP:",
        "        return QString(\"Hanging Up\");",
        "    case ConnectionState::UNKNOWN:",
        "    default:"
      ],
      "linux/ble/bleutils.h": [
        "#pragma once",
        "",
        "#include <QObject>",
        "#include <QByteArray>",
        "",
        "class BLEUtils : public QObject",
        "{",
        "    Q_OBJECT",
        "public:",
        "    explicit BLEUtils(QObject *parent = nullptr);",
        "",
        "    /**",
        "     * @brief Verifies if the provided Bluetooth address is an RPA that matches the given Identity Resolving Key (IRK)",
        "     * @param address The Bluetooth address to verify",
        "     * @param irk The Identity Resolving Key to use for verification",
        "     * @return true if the address is verified as an RPA matching the IRK",
        "     */",
        "    static bool verifyRPA(const QString &address, const QByteArray &irk);",
        "",
        "    /**",
        "     * @brief Checks if the given IRK and RPA are valid",
        "     * @param irk The Identity Resolving Key",
        "     * @param rpa The Resolvable Private Address",
        "     * @return true if the RPA is valid for the given IRK",
        "     */",
        "    Q_INVOKABLE static bool isValidIrkRpa(const QByteArray &irk, const QString &rpa);",
        "",
        "    /**",
        "     * @brief Decrypts the last 16 bytes of the input data using the provided key with AES-128 ECB",
        "     * @param data The input data containing at least 16 bytes",
        "     * @param key The 16-byte key for decryption",
        "     * @return The decrypted 16 bytes, or an empty QByteArray on failure",
        "     */",
        "    static QByteArray decryptLastBytes(const QByteArray &data, const QByteArray &key);",
        "",
        "private:",
        "    /**",
        "     * @brief Performs E function (AES-128) as specified in Bluetooth Core Specification",
        "     * @param key The key for encryption",
        "     * @param data The data to encrypt",
        "     * @return The encrypted data",
        "     */",
        "    static QByteArray e(const QByteArray &key, const QByteArray &data);",
        "",
        "    /**",
        "     * @brief Performs the ah function as specified in Bluetooth Core Specification",
        "     * @param k The IRK key",
        "     * @param r The random part of the address",
        "     * @return The hash part of the address",
        "     */",
        "    static QByteArray ah(const QByteArray &k, const QByteArray &r);",
        "};"
      ],
      "linux/ble/bleutils.cpp": [
        "#include <openssl/aes.h>",
        "#include \"deviceinfo.hpp\"",
        "#include \"bleutils.h\"",
        "#include <QDebug>",
        "#include <QByteArray>",
        "#include <QtEndian>",
        "#include <QCryptographicHash>",
        "#include <cstring> // For memset",
        "",
        "BLEUtils::BLEUtils(QObject *parent) : QObject(parent)",
        "{",
        "}",
        "",
        "bool BLEUtils::verifyRPA(const QString &address, const QByteArray &irk)",
        "{",
        "    if (address.isEmpty() || irk.isEmpty() || irk.size() != 16)",
        "    {",
        "        return false;",
        "    }",
        "",
        "    // Split address into bytes and reverse order",
        "    QStringList parts = address.split(':');",
        "    if (parts.size() != 6)",
        "    {",
        "        return false;",
        "    }",
        "",
        "    QByteArray rpa;",
        "    bool ok;",
        "    for (int i = parts.size() - 1; i >= 0; --i)",
        "    {",
        "        rpa.append(static_cast<char>(parts[i].toInt(&ok, 16)));",
        "        if (!ok)",
        "        {",
        "            return false;",
        "        }",
        "    }",
        "",
        "    if (rpa.size() != 6)",
        "    {",
        "        return false;",
        "    }",
        "",
        "    QByteArray prand = rpa.mid(3, 3);",
        "    QByteArray hash = rpa.left(3);",
        "    QByteArray computedHash = ah(irk, prand);",
        "",
        "    return hash == computedHash;",
        "}",
        "",
        "bool BLEUtils::isValidIrkRpa(const QByteArray &irk, const QString &rpa)",
        "{",
        "    return verifyRPA(rpa, irk);",
        "}",
        "",
        "QByteArray BLEUtils::e(const QByteArray &key, const QByteArray &data)",
        "{",
        "    if (key.size() != 16 || data.size() != 16)",
        "    {",
        "        return QByteArray();",
        "    }",
        "",
        "    // Prepare key and data (needs to be reversed)",
        "    QByteArray reversedKey(key);",
        "    std::reverse(reversedKey.begin(), reversedKey.end());",
        "",
        "    QByteArray reversedData(data);",
        "    std::reverse(reversedData.begin(), reversedData.end());",
        "",
        "    // Set up AES encryption",
        "    AES_KEY aesKey;",
        "    if (AES_set_encrypt_key(reinterpret_cast<const unsigned char *>(reversedKey.constData()), 128, &aesKey) != 0)",
        "    {",
        "        return QByteArray();",
        "    }",
        "",
        "    unsigned char out[16];",
        "    AES_encrypt(reinterpret_cast<const unsigned char *>(reversedData.constData()), out, &aesKey);",
        "",
        "    // Convert output to QByteArray and reverse it"
      ],
      "linux/thirdparty/QR-Code-generator/qrcodegen.hpp": [
        "/* ",
        " * QR Code generator library (C++)",
        " * ",
        " * Copyright (c) Project Nayuki. (MIT License)",
        " * https://www.nayuki.io/page/qr-code-generator-library",
        " * ",
        " * Permission is hereby granted, free of charge, to any person obtaining a copy of",
        " * this software and associated documentation files (the \"Software\"), to deal in",
        " * the Software without restriction, including without limitation the rights to",
        " * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of",
        " * the Software, and to permit persons to whom the Software is furnished to do so,",
        " * subject to the following conditions:",
        " * - The above copyright notice and this permission notice shall be included in",
        " *   all copies or substantial portions of the Software.",
        " * - The Software is provided \"as is\", without warranty of any kind, express or",
        " *   implied, including but not limited to the warranties of merchantability,",
        " *   fitness for a particular purpose and noninfringement. In no event shall the",
        " *   authors or copyright holders be liable for any claim, damages or other",
        " *   liability, whether in an action of contract, tort or otherwise, arising from,",
        " *   out of or in connection with the Software or the use or other dealings in the",
        " *   Software.",
        " */",
        "",
        "#pragma once",
        "",
        "#include <array>",
        "#include <cstdint>",
        "#include <stdexcept>",
        "#include <string>",
        "#include <vector>",
        "",
        "",
        "namespace qrcodegen {",
        "",
        "/* ",
        " * A segment of character/binary/control data in a QR Code symbol.",
        " * Instances of this class are immutable.",
        " * The mid-level way to create a segment is to take the payload data",
        " * and call a static factory function such as QrSegment::makeNumeric().",
        " * The low-level way to create a segment is to custom-make the bit buffer",
        " * and call the QrSegment() constructor with appropriate values.",
        " * This segment class imposes no length restrictions, but QR Codes have restrictions.",
        " * Even in the most favorable conditions, a QR Code can only hold 7089 characters of data.",
        " * Any segment longer than this is meaningless for the purpose of generating QR Codes.",
        " */",
        "class QrSegment final {",
        "\t",
        "\t/*---- Public helper enumeration ----*/",
        "\t",
        "\t/* ",
        "\t * Describes how a segment's data bits are interpreted. Immutable.",
        "\t */",
        "\tpublic: class Mode final {",
        "\t\t",
        "\t\t/*-- Constants --*/",
        "\t\t",
        "\t\tpublic: static const Mode NUMERIC;",
        "\t\tpublic: static const Mode ALPHANUMERIC;",
        "\t\tpublic: static const Mode BYTE;",
        "\t\tpublic: static const Mode KANJI;",
        "\t\tpublic: static const Mode ECI;",
        "\t\t",
        "\t\t",
        "\t\t/*-- Fields --*/",
        "\t\t",
        "\t\t// The mode indicator bits, which is a uint4 value (range 0 to 15).",
        "\t\tprivate: int modeBits;",
        "\t\t",
        "\t\t// Number of character count bits for three different version ranges.",
        "\t\tprivate: int numBitsCharCount[3];",
        "\t\t",
        "\t\t",
        "\t\t/*-- Constructor --*/",
        "\t\t",
        "\t\tprivate: Mode(int mode, int cc0, int cc1, int cc2);",
        "\t\t",
        "\t\t",
        "\t\t/*-- Methods --*/",
        "\t\t",
        "\t\t/* "
      ],
      "linux/thirdparty/QR-Code-generator/qrcodegen.cpp": [
        "/* ",
        " * QR Code generator library (C++)",
        " * ",
        " * Copyright (c) Project Nayuki. (MIT License)",
        " * https://www.nayuki.io/page/qr-code-generator-library",
        " * ",
        " * Permission is hereby granted, free of charge, to any person obtaining a copy of",
        " * this software and associated documentation files (the \"Software\"), to deal in",
        " * the Software without restriction, including without limitation the rights to",
        " * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of",
        " * the Software, and to permit persons to whom the Software is furnished to do so,",
        " * subject to the following conditions:",
        " * - The above copyright notice and this permission notice shall be included in",
        " *   all copies or substantial portions of the Software.",
        " * - The Software is provided \"as is\", without warranty of any kind, express or",
        " *   implied, including but not limited to the warranties of merchantability,",
        " *   fitness for a particular purpose and noninfringement. In no event shall the",
        " *   authors or copyright holders be liable for any claim, damages or other",
        " *   liability, whether in an action of contract, tort or otherwise, arising from,",
        " *   out of or in connection with the Software or the use or other dealings in the",
        " *   Software.",
        " */",
        "",
        "#include <algorithm>",
        "#include <cassert>",
        "#include <climits>",
        "#include <cstddef>",
        "#include <cstdlib>",
        "#include <cstring>",
        "#include <sstream>",
        "#include <utility>",
        "#include \"qrcodegen.hpp\"",
        "",
        "using std::int8_t;",
        "using std::uint8_t;",
        "using std::size_t;",
        "using std::vector;",
        "",
        "",
        "namespace qrcodegen {",
        "",
        "/*---- Class QrSegment ----*/",
        "",
        "QrSegment::Mode::Mode(int mode, int cc0, int cc1, int cc2) :",
        "\t\tmodeBits(mode) {",
        "\tnumBitsCharCount[0] = cc0;",
        "\tnumBitsCharCount[1] = cc1;",
        "\tnumBitsCharCount[2] = cc2;",
        "}",
        "",
        "",
        "int QrSegment::Mode::getModeBits() const {",
        "\treturn modeBits;",
        "}",
        "",
        "",
        "int QrSegment::Mode::numCharCountBits(int ver) const {",
        "\treturn numBitsCharCount[(ver + 7) / 17];",
        "}",
        "",
        "",
        "const QrSegment::Mode QrSegment::Mode::NUMERIC     (0x1, 10, 12, 14);",
        "const QrSegment::Mode QrSegment::Mode::ALPHANUMERIC(0x2,  9, 11, 13);",
        "const QrSegment::Mode QrSegment::Mode::BYTE        (0x4,  8, 16, 16);",
        "const QrSegment::Mode QrSegment::Mode::KANJI       (0x8,  8, 10, 12);",
        "const QrSegment::Mode QrSegment::Mode::ECI         (0x7,  0,  0,  0);",
        "",
        "",
        "QrSegment QrSegment::makeBytes(const vector<uint8_t> &data) {",
        "\tif (data.size() > static_cast<unsigned int>(INT_MAX))",
        "\t\tthrow std::length_error(\"Data too long\");",
        "\tBitBuffer bb;",
        "\tfor (uint8_t b : data)",
        "\t\tbb.appendBits(b, 8);",
        "\treturn QrSegment(Mode::BYTE, static_cast<int>(data.size()), std::move(bb));",
        "}",
        "",
        "",
        "QrSegment QrSegment::makeNumeric(const char *digits) {",
        "\tBitBuffer bb;"
      ],
      "linux/media/playerstatuswatcher.cpp": [
        "#include \"playerstatuswatcher.h\"",
        "#include <QDBusConnection>",
        "#include <QDBusPendingReply>",
        "#include <QVariantMap>",
        "#include <QDBusReply>",
        "#include <QDBusConnectionInterface>",
        "",
        "PlayerStatusWatcher::PlayerStatusWatcher(const QString &playerService, QObject *parent)",
        "    : QObject(parent),",
        "      m_playerService(playerService),",
        "      m_iface(new QDBusInterface(playerService, \"/org/mpris/MediaPlayer2\",",
        "                                 \"org.mpris.MediaPlayer2.Player\", QDBusConnection::sessionBus(), this)),",
        "      m_serviceWatcher(new QDBusServiceWatcher(playerService, QDBusConnection::sessionBus(),",
        "                                               QDBusServiceWatcher::WatchForOwnerChange, this))",
        "{",
        "    QDBusConnection::sessionBus().connect(",
        "        playerService, \"/org/mpris/MediaPlayer2\", \"org.freedesktop.DBus.Properties\",",
        "        \"PropertiesChanged\", this, SLOT(onPropertiesChanged(QString,QVariantMap,QStringList))",
        "    );",
        "    connect(m_serviceWatcher, &QDBusServiceWatcher::serviceOwnerChanged,",
        "            this, &PlayerStatusWatcher::onServiceOwnerChanged);",
        "    updateStatus();",
        "}",
        "",
        "void PlayerStatusWatcher::onPropertiesChanged(const QString &interface,",
        "                                              const QVariantMap &changed,",
        "                                              const QStringList &)",
        "{",
        "    if (interface == \"org.mpris.MediaPlayer2.Player\" && changed.contains(\"PlaybackStatus\")) {",
        "        emit playbackStatusChanged(changed.value(\"PlaybackStatus\").toString());",
        "    }",
        "}",
        "",
        "void PlayerStatusWatcher::updateStatus() {",
        "    QVariant reply = m_iface->property(\"PlaybackStatus\");",
        "    if (reply.isValid()) {",
        "        emit playbackStatusChanged(reply.toString());",
        "    }",
        "}",
        "",
        "void PlayerStatusWatcher::onServiceOwnerChanged(const QString &name, const QString &, const QString &newOwner)",
        "{",
        "    if (name == m_playerService && newOwner.isEmpty()) {",
        "        emit playbackStatusChanged(\"\"); // player disappeared",
        "    } else if (name == m_playerService && !newOwner.isEmpty()) {",
        "        updateStatus(); // player appeared/reappeared",
        "    }",
        "}",
        "",
        "QString PlayerStatusWatcher::getCurrentPlaybackStatus(const QString &playerService)",
        "{",
        "    QDBusConnection bus = QDBusConnection::sessionBus();",
        "    QStringList services = bus.interface()->registeredServiceNames().value();",
        "",
        "    for (const QString &service : services) {",
        "        if (service.startsWith(\"org.mpris.MediaPlayer2.\")) {",
        "            QDBusInterface iface(service, \"/org/mpris/MediaPlayer2\",",
        "                               \"org.mpris.MediaPlayer2.Player\", bus);",
        "            ",
        "            if (iface.isValid()) {",
        "                QVariant status = iface.property(\"PlaybackStatus\");",
        "                if (status.isValid() && status.toString() == \"Playing\") {",
        "                    return status.toString();",
        "                }",
        "            }",
        "        }",
        "    }",
        "",
        "    return QString();",
        "}"
      ],
      "linux/media/mediacontroller.h": [
        "#ifndef MEDIACONTROLLER_H",
        "#define MEDIACONTROLLER_H",
        "",
        "#include <QObject>",
        "",
        "class QProcess;",
        "class EarDetection;",
        "class PlayerStatusWatcher;",
        "class QDBusInterface;",
        "",
        "class MediaController : public QObject",
        "{",
        "  Q_OBJECT",
        "public:",
        "  enum MediaState",
        "  {",
        "    Playing,",
        "    Paused,",
        "    Stopped",
        "  };",
        "  Q_ENUM(MediaState)",
        "  enum EarDetectionBehavior",
        "  {",
        "    PauseWhenOneRemoved,",
        "    PauseWhenBothRemoved,",
        "    Disabled",
        "  };",
        "  Q_ENUM(EarDetectionBehavior)",
        "",
        "  explicit MediaController(QObject *parent = nullptr);",
        "  ~MediaController();",
        "",
        "  void handleEarDetection(EarDetection*);",
        "  void followMediaChanges();",
        "  bool isActiveOutputDeviceAirPods();",
        "  void handleConversationalAwareness(const QByteArray &data);",
        "  void activateA2dpProfile();",
        "  void removeAudioOutputDevice();",
        "  void setConnectedDeviceMacAddress(const QString &macAddress);",
        "",
        "  void setEarDetectionBehavior(EarDetectionBehavior behavior);",
        "  inline EarDetectionBehavior getEarDetectionBehavior() const { return earDetectionBehavior; }",
        "",
        "  void play();",
        "  void pause();",
        "  MediaState getCurrentMediaState() const;",
        "",
        "Q_SIGNALS:",
        "  void mediaStateChanged(MediaState state);",
        "",
        "private:",
        "  MediaState mediaStateFromPlayerctlOutput(const QString &output) const;",
        "  QString getAudioDeviceName();",
        "  bool sendMediaPlayerCommand(const QString &method);",
        "",
        "  bool wasPausedByApp = false;",
        "  int initialVolume = -1;",
        "  QString connectedDeviceMacAddress;",
        "  EarDetectionBehavior earDetectionBehavior = PauseWhenOneRemoved;",
        "  QString m_deviceOutputName;",
        "  PlayerStatusWatcher *playerStatusWatcher = nullptr;",
        "};",
        "",
        "#endif // MEDIACONTROLLER_H"
      ],
      "linux/media/playerstatuswatcher.h": [
        "#pragma once",
        "",
        "#include <QObject>",
        "#include <QDBusInterface>",
        "#include <QDBusServiceWatcher>",
        "",
        "class PlayerStatusWatcher : public QObject {",
        "    Q_OBJECT",
        "public:",
        "    explicit PlayerStatusWatcher(const QString &playerService, QObject *parent = nullptr);",
        "    static QString getCurrentPlaybackStatus(const QString &playerService);",
        "",
        "signals:",
        "    void playbackStatusChanged(const QString &status);",
        "",
        "private slots:",
        "    void onPropertiesChanged(const QString &interface, const QVariantMap &changed, const QStringList &);",
        "    void onServiceOwnerChanged(const QString &name, const QString &oldOwner, const QString &newOwner);",
        "",
        "private:",
        "    void updateStatus();",
        "    QString m_playerService;",
        "    QDBusInterface *m_iface;",
        "    QDBusServiceWatcher *m_serviceWatcher;",
        "};"
      ],
      "linux/media/mediacontroller.cpp": [
        "#include \"mediacontroller.h\"",
        "#include \"logger.h\"",
        "#include \"eardetection.hpp\"",
        "#include \"playerstatuswatcher.h\"",
        "",
        "#include <QDebug>",
        "#include <QProcess>",
        "#include <QRegularExpression>",
        "#include <QDBusConnection>",
        "#include <QDBusConnectionInterface>",
        "",
        "MediaController::MediaController(QObject *parent) : QObject(parent) {",
        "}",
        "",
        "void MediaController::handleEarDetection(EarDetection *earDetection)",
        "{",
        "  if (earDetectionBehavior == Disabled)",
        "  {",
        "    LOG_DEBUG(\"Ear detection is disabled, ignoring status\");",
        "    return;",
        "  }",
        "",
        "  bool primaryInEar = earDetection->isPrimaryInEar();",
        "  bool secondaryInEar = earDetection->isSecondaryInEar();",
        "",
        "  LOG_DEBUG(\"Ear detection status: primaryInEar=\"",
        "            << primaryInEar << \", secondaryInEar=\" << secondaryInEar",
        "            << \", isAirPodsActive=\" << isActiveOutputDeviceAirPods());",
        "",
        "  // First handle playback pausing based on selected behavior",
        "  bool shouldPause = false;",
        "  bool shouldResume = false;",
        "",
        "  if (earDetectionBehavior == PauseWhenOneRemoved)",
        "  {",
        "    shouldPause = !primaryInEar || !secondaryInEar;",
        "    shouldResume = primaryInEar && secondaryInEar;",
        "  }",
        "  else if (earDetectionBehavior == PauseWhenBothRemoved)",
        "  {",
        "    shouldPause = !primaryInEar && !secondaryInEar;",
        "    shouldResume = primaryInEar || secondaryInEar;",
        "  }",
        "",
        "  if (shouldPause && isActiveOutputDeviceAirPods())",
        "  {",
        "    if (getCurrentMediaState() == Playing)",
        "    {",
        "      pause();",
        "    }",
        "  }",
        "",
        "  // Then handle device profile switching",
        "  if (primaryInEar || secondaryInEar)",
        "  {",
        "    LOG_INFO(\"At least one AirPod is in ear\");",
        "    activateA2dpProfile();",
        "",
        "    // Resume if conditions are met and we previously paused",
        "    if (shouldResume && wasPausedByApp && isActiveOutputDeviceAirPods())",
        "    {",
        "      play();",
        "    }",
        "  }",
        "  else",
        "  {",
        "    LOG_INFO(\"Both AirPods are out of ear\");",
        "    removeAudioOutputDevice();",
        "  }",
        "}",
        "",
        "void MediaController::setEarDetectionBehavior(EarDetectionBehavior behavior)",
        "{",
        "  earDetectionBehavior = behavior;",
        "  LOG_INFO(\"Set ear detection behavior to: \" << behavior);",
        "}",
        "",
        "void MediaController::followMediaChanges() {",
        "  playerStatusWatcher = new PlayerStatusWatcher(\"\", this);",
        "  connect(playerStatusWatcher, &PlayerStatusWatcher::playbackStatusChanged,"
      ],
      "docs/control_commands.md": [
        "# Control Commands",
        "",
        "AACP uses opcode `9` for control commands. opcodes are 16 bit integers that specify the kind of action being done. The length of a control command is fixed to 7 bytes + 4 bytes header (`04 00 04 00`)",
        "",
        "An AACP packet is formated as:",
        "",
        "`04 00 04 00 [opcode, little endianness] [data]`",
        "",
        "So, our control commands becomes",
        "",
        "```",
        "04 00 04 00 09 00 [identifier] [data1] [data2] [data3] [data4]",
        "```",
        "",
        "Bytes that are not used are set to `0x00`. From what I've observed, the `data3` and `data4` are never used, and hence always zero. And, the `data2` is usually used when the configuration can be different for the two buds: like, to change the long press mode. Or, if there can be two \"state\" variables for the same feature: like the Hearing Aid feature.",
        "",
        "## Control Commands ",
        "These commands",
        "",
        "| Command identifier | Description | Format |",
        "|--------------|---------------------|--------|",
        "| 0x01 | Mic Mode | Single value (1 byte) |",
        "| 0x05 | Button Send Mode | Single value (1 byte) |",
        "| 0x12 | VoiceTrigger for Siri | Single Value (1 byte): `0x01` = enabled, `0x01` = disabled |",
        "| 0x14 | SingleClickMode | Single value (1 byte) |",
        "| 0x15 | DoubleClickMode | Single value (1 byte) |",
        "| 0x16 | ClickHoldMode | Two values (2 bytes; First byte = right bud Second byte = for left): `0x01` = Noise control `0x05` = Siri |",
        "| 0x17 | DoubleClickInterval | Single value (1 byte): 0x00 = Default, `0x01` = Slower, `0x02` = Slowest|",
        "| 0x18 | ClickHoldInterval | Single value (1 byte): 0x00 = Default, `0x01` = Slower, `0x02` = Slowest|",
        "| 0x1A | ListeningModeConfigs | Single value (1 byte): bitmask, Off mode = `0x01`, ANC=`0x02`, Transparency = 0x04, Adaptive = `0x08` |",
        "| 0x1B | OneBudANCMode | Single value (1 byte): `0x01` = enabled, `0x02` = disabled |",
        "| 0x1C | CrownRotationDirection | Single value (1 byte): `0x01` = reversed, `0x02` = default |",
        "| 0x0D | ListeningMode | Single value (1 byte): 1 = Off, 2 = noise cancellation, 3 = transparency, 4 = adaptive |",
        "| 0x1E | AutoAnswerMode | Single value (1 byte) |",
        "| 0x1F | Chime Volume | Single value (1 byte): 0 to 100|",
        "| 0x23 | VolumeSwipeInterval | Single value (1 byte): 0x00 = Default, `0x01` = Longer, `0x02` = Longest |",
        "| 0x24 | Call Management Config | Single value (1 byte) |",
        "| 0x25 | VolumeSwipeMode | Single value (1 byte): `0x01` = enabled, `0x02` = disabled |",
        "| 0x26 | Adaptive Volume Config | Single value (1 byte): `0x01` = enabled, `0x02` = disabled |",
        "| 0x27 | Software Mute config | Single value (1 byte) |",
        "| 0x28 | Conversation Detect config | Single value (1 byte): `0x01` = enabled, `0x02` = disabled |",
        "| 0x29 | SSL | Single value (1 byte) |",
        "| 0x2C | Hearing Aid Enrolled and Hearing Aid Enabled | Two values (2 bytes; First byte - enrolled, Second byte = enabled): `0x01` = enabled, `0x02` = disabled |",
        "| 0x2E | AutoANC Strength | Single value (1 byte): 0 to 100|",
        "| 0x2F | HPS Gain Swipe | Single value (1 byte) |",
        "| 0x30 | HRM enable/disable state | Single value (1 byte) |",
        "| 0x31 | In Case Tone config | Single value (1 byte): `0x01` = enabled, `0x02` = disabled |",
        "| 0x32 | Siri Multitone config | Single value (1 byte) |",
        "| 0x33 | Hearing Assist config | Single value (1 byte): `0x01` = enabled, `0x02` = disabled |",
        "| 0x34 | Allow Off Option for Listening Mode config | Single value (1 byte): `0x01` = enabled, `0x02` = disabled |",
        "| 0x35 | Sleep Detection config | Single value (1 byte): `0x01` = enabled, `0x02` = disabled |",
        "| 0x36 | Allow Auto Connect | Single value (1 byte): `0x01` = allow, `0x02` = disallow |",
        "| 0x39 | Raw Gestures config | Single value (1 byte): bitmask, single press = `0x01`, double press = `0x02`, triple press = `0x04`, long press = `0x08` |",
        "| 0x3C | System Siri message config | Single value (1 byte) |",
        "| 0x3E | Uplink EQ Bud config | Single value (1 byte) |",
        "| 0x3F | Uplink EQ Source config | Single value (1 byte) |",
        "| 0x40 | In Case Tone Volume | Single value (1 byte): 0 to 100 |",
        "| 0x41 | Disable Button Input config | Single value (1 byte) |",
        "",
        "",
        "",
        "> [!NOTE]",
        "> - These identifiers have been extracted from the macOS 15.4 Beta (24E5238a)'s bluetooth stack. ",
        "> - I have already added the ranges of values a command takes that I know of. Feel free to experiemnt by sending the packets for which the range/values are not given here."
      ],
      ".github/workflows/AirysDark-AI_prob.yml": [
        "name: AirysDark-AI - Probe (LLM builds workflow)",
        "",
        "on:",
        "  workflow_dispatch: {}",
        "",
        "permissions:",
        "  contents: write",
        "  pull-requests: write",
        "",
        "# Set TARGET to one of the detected types: android, linux, cmake, node, python, rust, dotnet, maven, flutter, go",
        "env:",
        "  TARGET: \"android\"",
        "",
        "jobs:",
        "  probe:",
        "    runs-on: ubuntu-latest",
        "    steps:",
        "      - name: Checkout (no credentials)",
        "        uses: actions/checkout@v4",
        "        with:",
        "          fetch-depth: 0",
        "          persist-credentials: false",
        "",
        "      - name: Setup Python",
        "        uses: actions/setup-python@v5",
        "        with:",
        "          python-version: \"3.11\"",
        "",
        "      - name: Verify tools exist (added by detector PR)",
        "        shell: bash",
        "        run: |",
        "          set -euxo pipefail",
        "          test -f tools/AirysDark-AI_prob.py",
        "          test -f tools/AirysDark-AI_builder.py",
        "          ls -la tools",
        "          echo \"TARGET=$TARGET\"",
        "",
        "      - name: Run repo probe (AI-assisted)",
        "        shell: bash",
        "        env:",
        "          TARGET: ${{ env.TARGET }}",
        "          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}   # optional",
        "          OPENAI_MODEL: ${{ vars.OPENAI_MODEL || 'gpt-4o-mini' }}",
        "        run: |",
        "          set -euxo pipefail",
        "          python3 tools/AirysDark-AI_prob.py",
        "",
        "      - name: Upload probe artifacts",
        "        if: always()",
        "        uses: actions/upload-artifact@v4",
        "        with:",
        "          name: airysdark-ai-probe-artifacts",
        "          if-no-files-found: warn",
        "          retention-days: 7",
        "          path: |",
        "            tools/airysdark_ai_prob_report.json",
        "            tools/airysdark_ai_prob_report.log",
        "            tools/airysdark_ai_build_ai_response.txt",
        "            pr_body_build.md",
        "            .github/workflows/AirysDark-AI_build.yml",
        "",
        "      - name: Stage generated build workflow",
        "        id: diff",
        "        shell: bash",
        "        run: |",
        "          set -euxo pipefail",
        "          git add -A",
        "          if git diff --cached --quiet; then",
        "            echo \"changed=false\" >> \"$GITHUB_OUTPUT\"",
        "          else",
        "            echo \"changed=true\" >> \"$GITHUB_OUTPUT\"",
        "          fi",
        "",
        "      - name: Create PR for generated build workflow",
        "        if: steps.diff.outputs.changed == 'true'",
        "        uses: peter-evans/create-pull-request@v6",
        "        with:",
        "          token: ${{ secrets.BOT_TOKEN }}",
        "          branch: ai/airysdark-ai-build",
        "          commit-message: \"chore: add AirysDark-AI_build.yml (from probe)\""
      ],
      ".github/workflows/AirysDark-AI_detector.yml": [
        "name: AirysDark-AI - Detector (bootstrap)",
        "",
        "on:",
        "  workflow_dispatch: {}",
        "",
        "permissions:",
        "  contents: write",
        "  pull-requests: write",
        "",
        "jobs:",
        "  detect:",
        "    runs-on: ubuntu-latest",
        "    steps:",
        "      - name: Checkout (no credentials)",
        "        uses: actions/checkout@v4",
        "        with:",
        "          fetch-depth: 0",
        "          persist-credentials: false",
        "",
        "      - name: Setup Python",
        "        uses: actions/setup-python@v5",
        "        with:",
        "          python-version: \"3.11\"",
        "",
        "      - name: Install jq (for JSON formatting)",
        "        run: |",
        "          set -euxo pipefail",
        "          sudo apt-get update",
        "          sudo apt-get install -y jq",
        "",
        "      # Fetch once here ONLY. The generated PROB workflow will NOT re-fetch tools.",
        "      - name: Fetch tools.tar (ONLY here)",
        "        run: |",
        "          set -euxo pipefail",
        "          mkdir -p tools",
        "          curl -fL https://raw.githubusercontent.com/AirysDark-AI/AirysDark-AI_builder/main/tools/tools.tar -o /tmp/tools.tar",
        "          tar -xvf /tmp/tools.tar -C tools",
        "          ls -la tools",
        "",
        "      - name: Run detector (generates AirysDark-AI_prob.yml + logs)",
        "        run: |",
        "          set -euxo pipefail",
        "          python3 tools/AirysDark-AI_detector.py",
        "",
        "      - name: Compose PR body with detected types",
        "        run: |",
        "          set -euo pipefail",
        "          echo \"### AirysDark-AI: detector results\" > pr_body.md",
        "          echo \"\" >> pr_body.md",
        "          if [ -f tools/airysdark_ai_scan.json ]; then",
        "            echo \"**Detected build types:**\" >> pr_body.md",
        "            types=$(jq -r '.types[]?' tools/airysdark_ai_scan.json 2>/dev/null || true)",
        "            if [ -n \"$types\" ]; then",
        "              while IFS= read -r t; do",
        "                echo \"- $t\" >> pr_body.md",
        "              done <<< \"$types\"",
        "            else",
        "              echo \"- (none)\" >> pr_body.md",
        "            fi",
        "          else",
        "            echo \"_No detector JSON found (tools/airysdark_ai_scan.json)._ \" >> pr_body.md",
        "          fi",
        "          echo \"\" >> pr_body.md",
        "          echo \"**Next steps:**\" >> pr_body.md",
        "          echo \"1. Edit \\`.github/workflows/AirysDark-AI_prob.yml\\` and set **env.TARGET** (e.g. \\`android\\`, \\`linux\\`, \\`cmake\\`).\" >> pr_body.md",
        "          echo \"2. Merge this PR.\" >> pr_body.md",
        "          echo \"3. Manually run **AirysDark-AI - Probe (LLM builds workflow)** from the Actions tab.\" >> pr_body.md",
        "",
        "      - name: Stage detector outputs",
        "        id: diff",
        "        run: |",
        "          set -euxo pipefail",
        "          git add -A",
        "          if git diff --cached --quiet; then",
        "            echo \"changed=false\" >> \"$GITHUB_OUTPUT\"",
        "          else",
        "            echo \"changed=true\" >> \"$GITHUB_OUTPUT\"",
        "          fi",
        "",
        "      - name: Open PR with PROB workflow"
      ],
      "tools/AirysDark-AI_android.py": [
        "#!/usr/bin/env python3",
        "# AirysDark-AI_android.py \u2014 Android workflow generator + AI probe",
        "#",
        "# Modes:",
        "#   --mode probe-ai    -> Use AI (OpenAI -> llama.cpp -> heuristic) to derive BUILD_CMD,",
        "#                         write final Android workflow, and dump probe artifacts.",
        "#",
        "# Env used for AI:",
        "#   OPENAI_API_KEY, OPENAI_MODEL (default gpt-4o-mini)",
        "#   MODEL_PATH (llama gguf), LLAMA_CPP_BIN (llama-cli)",
        "#",
        "# Secrets expected in workflow when running final build:",
        "#   BOT_TOKEN (FG-PAT), optional OPENAI_API_KEY",
        "#",
        "# Files consumed (optional, produced by detector):",
        "#   tools/airysdark_ai_probe_inputs.json",
        "#",
        "# Files written:",
        "#   tools/android_probe.json",
        "#   tools/android_probe.log",
        "#   .github/workflows/AirysDark-AI_android.yml",
        "#",
        "import os, json, pathlib, subprocess, shlex, re, textwrap, sys",
        "",
        "ROOT = pathlib.Path(\".\").resolve()",
        "TOOLS = ROOT / \"tools\"",
        "WF    = ROOT / \".github\" / \"workflows\"",
        "TOOLS.mkdir(parents=True, exist_ok=True)",
        "WF.mkdir(parents=True, exist_ok=True)",
        "",
        "OPENAI_MODEL = os.getenv(\"OPENAI_MODEL\", \"gpt-4o-mini\")",
        "LLAMA_CPP_BIN = os.getenv(\"LLAMA_CPP_BIN\", \"llama-cli\")",
        "LLAMA_MODEL_PATH = os.getenv(\"MODEL_PATH\", \"models/tinyllama-1.1b-chat-v1.0.Q4_K_M.gguf\")",
        "",
        "def sh(cmd, cwd=None):",
        "    p = subprocess.run(cmd, cwd=cwd, shell=True, text=True,",
        "                       stdout=subprocess.PIPE, stderr=subprocess.STDOUT)",
        "    return p.stdout, p.returncode",
        "",
        "def read_text(p: pathlib.Path) -> str:",
        "    try:",
        "        return p.read_text(errors=\"ignore\")",
        "    except Exception:",
        "        return \"\"",
        "",
        "def repo_tree(limit=400):",
        "    out, _ = sh(\"git ls-files || true\")",
        "    files = out.strip().splitlines()",
        "    return \"\\n\".join(files[:limit])",
        "",
        "def load_probe_inputs():",
        "    p = TOOLS / \"airysdark_ai_probe_inputs.json\"",
        "    if p.exists():",
        "        try:",
        "            return json.loads(p.read_text())",
        "        except Exception:",
        "            return {}",
        "    return {}",
        "",
        "def call_openai(prompt: str) -> str:",
        "    import requests",
        "    key = os.getenv(\"OPENAI_API_KEY\")",
        "    if not key:",
        "        raise RuntimeError(\"no_openai_key\")",
        "    url = \"https://api.openai.com/v1/chat/completions\"",
        "    payload = {\"model\": OPENAI_MODEL,",
        "               \"messages\": [{\"role\": \"user\", \"content\": prompt}],",
        "               \"temperature\": 0.2}",
        "    headers = {\"Authorization\": f\"Bearer {key}\", \"Content-Type\": \"application/json\"}",
        "    r = requests.post(url, headers=headers, json=payload, timeout=180)",
        "    if r.status_code >= 400:",
        "        raise RuntimeError(f\"openai_http_{r.status_code}:{r.text[:300]}\")",
        "    data = r.json()",
        "    return data[\"choices\"][0][\"message\"][\"content\"]",
        "",
        "def call_llama(prompt: str) -> str:",
        "    mp = pathlib.Path(LLAMA_MODEL_PATH)",
        "    if not mp.exists():",
        "        raise RuntimeError(\"llama_model_missing\")",
        "    args = [LLAMA_CPP_BIN, \"-m\", str(mp), \"-p\", prompt, \"-n\", \"512\", \"--temp\", \"0.2\", \"-c\", \"4096\"]"
      ],
      "tools/airysdark_ai_scan.md": [
        "# AirysDark-AI detector scan",
        "",
        "**Detected build types:**",
        "- linux",
        "- android",
        "- cmake",
        "",
        "## Evidence",
        "",
        "### linux",
        "- folder hint: linux",
        "- CMakeLists.txt desktop-like: CMakeLists.txt",
        "- CMakeLists.txt desktop-like: linux/CMakeLists.txt",
        "- CMakeLists.txt desktop-like: android/app/src/main/cpp/CMakeLists.txt",
        "",
        "### android",
        "- folder hint: android",
        "- android/settings.gradle.kts",
        "- android/build.gradle.kts",
        "- android/app/build.gradle.kts",
        "",
        "### cmake",
        "- CMakeLists.txt",
        "- linux/CMakeLists.txt",
        "- android/app/src/main/cpp/CMakeLists.txt"
      ],
      "tools/airysdark_ai_scan.json": [
        "{",
        "  \"types\": [",
        "    \"linux\",",
        "    \"android\",",
        "    \"cmake\"",
        "  ],",
        "  \"evidence\": {",
        "    \"linux\": [",
        "      \"folder hint: linux\",",
        "      \"CMakeLists.txt desktop-like: CMakeLists.txt\",",
        "      \"CMakeLists.txt desktop-like: linux/CMakeLists.txt\",",
        "      \"CMakeLists.txt desktop-like: android/app/src/main/cpp/CMakeLists.txt\"",
        "    ],",
        "    \"android\": [",
        "      \"folder hint: android\",",
        "      \"android/settings.gradle.kts\",",
        "      \"android/build.gradle.kts\",",
        "      \"android/app/build.gradle.kts\"",
        "    ],",
        "    \"cmake\": [",
        "      \"CMakeLists.txt\",",
        "      \"linux/CMakeLists.txt\",",
        "      \"android/app/src/main/cpp/CMakeLists.txt\"",
        "    ]",
        "  }",
        "}"
      ],
      "tools/AirysDark-AI_builder.py": [
        "#!/usr/bin/env python3",
        "\"\"\"",
        "AirysDark-AI_builder.py",
        "- Placeholder AI auto-fix script to be used by generated build workflows later.",
        "- Keeps it simple & no external fetching here (per your design).",
        "\"\"\"",
        "import os, sys",
        "",
        "def main():",
        "    print(\"AirysDark-AI_builder running...\")",
        "    build_cmd = os.getenv(\"BUILD_CMD\",\"\")",
        "    print(\"Would attempt fix for build cmd:\", build_cmd)",
        "    # Your future patch-application logic goes here (OpenAI \u2192 llama fallback, unified diff application, etc.)",
        "    return 0",
        "",
        "if __name__==\"__main__\":",
        "    sys.exit(main())"
      ],
      "tools/AirysDark-AI_prob.py": [
        "#!/usr/bin/env python3",
        "\"\"\"",
        "AirysDark-AI_prob.py \u2014 Step 2 (Probe)",
        "",
        "What it does",
        "------------",
        "- Reads detector output (tools/airysdark_ai_scan.json)",
        "- Recursively scans the repo (all folders) and collects a snapshot + textual hints",
        "- Proposes a build command for env TARGET",
        "- Generates a manual-run workflow `.github/workflows/AirysDark-AI_build.yml`",
        "  - If OPENAI_API_KEY is set, asks OpenAI to draft the workflow, else uses a robust template",
        "- Writes:",
        "    tools/airysdark_ai_prob_report.json",
        "    tools/airysdark_ai_prob_report.log",
        "    tools/airysdark_ai_build_ai_response.txt   (only if AI used)",
        "    .github/workflows/AirysDark-AI_build.yml",
        "    pr_body_build.md                           (for create-pull-request step)",
        "\"\"\"",
        "",
        "import os",
        "import re",
        "import sys",
        "import json",
        "import pathlib",
        "import textwrap",
        "",
        "ROOT = pathlib.Path(os.getenv(\"PROJECT_DIR\", \".\")).resolve()",
        "TOOLS = ROOT / \"tools\"",
        "WF_DIR = ROOT / \".github\" / \"workflows\"",
        "TOOLS.mkdir(parents=True, exist_ok=True)",
        "WF_DIR.mkdir(parents=True, exist_ok=True)",
        "",
        "SCAN_JSON = TOOLS / \"airysdark_ai_scan.json\"",
        "PROB_JSON = TOOLS / \"airysdark_ai_prob_report.json\"",
        "PROB_LOG  = TOOLS / \"airysdark_ai_prob_report.log\"",
        "AI_OUT    = TOOLS / \"airysdark_ai_build_ai_response.txt\"",
        "PR_BODY   = ROOT / \"pr_body_build.md\"",
        "BUILD_WF  = WF_DIR / \"AirysDark-AI_build.yml\"",
        "",
        "# ---------------- Utilities ----------------",
        "",
        "def read_scan_json():",
        "    if not SCAN_JSON.exists():",
        "        return {}",
        "    try:",
        "        return json.loads(SCAN_JSON.read_text(errors=\"ignore\"))",
        "    except Exception as e:",
        "        return {\"_error\": f\"failed to parse {SCAN_JSON}: {e}\"}",
        "",
        "def repo_snapshot(max_files=6000, max_text_lines=80):",
        "    \"\"\"",
        "    Walk entire repo (except .git), list files, and capture heads of many text/code files.",
        "    \"\"\"",
        "    files = []",
        "    doc_hints = {}",
        "    for r, ds, fs in os.walk(ROOT):",
        "        if \".git\" in ds:",
        "            ds.remove(\".git\")",
        "        for fn in fs:",
        "            p = pathlib.Path(r) / fn",
        "            try:",
        "                rel = str(p.relative_to(ROOT))",
        "            except Exception:",
        "                rel = str(p)",
        "            files.append(rel)",
        "",
        "            lower = fn.lower()",
        "            if lower.endswith((",
        "                \".md\",\".txt\",\".rst\",\".ini\",\".cfg\",\".toml\",\".gradle\",\".kts\",\".xml\",\".yml\",\".yaml\",\".json\",",
        "                \".properties\",\".mk\",\".cmake\",\".ninja\",\".conf\",\".bat\",\".ps1\",\".sh\",\".groovy\",\".kt\",\".java\",",
        "                \".cpp\",\".c\",\".h\",\".hpp\",\".swift\",\".go\",\".cs\",\".py\",\".rb\",\".ts\",\".js\",\".mjs\",\".cjs\",\".sql\",",
        "            )):",
        "                try:",
        "                    lines = (p.read_text(errors=\"ignore\").splitlines())[:max_text_lines]",
        "                    doc_hints[rel] = lines",
        "                except Exception:",
        "                    pass",
        "",
        "            if len(files) >= max_files:",
        "                break"
      ],
      "tools/AirysDark-AI_detector.py": [
        "#!/usr/bin/env python3",
        "# AirysDark-AI_detector.py",
        "#",
        "# Recursively scan the repository for build systems & hints.",
        "# - Looks in every folder (skips .git)",
        "# - Uses folder-name hints (linux/android/windows etc.)",
        "# - CMake content-aware detection (desktop-like => also mark \"linux\")",
        "# - Writes:",
        "#     tools/airysdark_ai_scan.json  (machine-readable, with evidence)",
        "#     tools/airysdark_ai_scan.md    (human-friendly summary)",
        "#     .github/workflows/AirysDark-AI_prob.yml  (generic manual probe workflow)",
        "#",
        "# The PROBE workflow is manual-run and expects you to set env.TARGET.",
        "",
        "import os",
        "import json",
        "import sys",
        "import pathlib",
        "import textwrap",
        "",
        "ROOT = pathlib.Path(os.getenv(\"PROJECT_DIR\", \".\")).resolve()",
        "WF_DIR = ROOT / \".github\" / \"workflows\"",
        "TOOLS_DIR = ROOT / \"tools\"",
        "WF_DIR.mkdir(parents=True, exist_ok=True)",
        "TOOLS_DIR.mkdir(parents=True, exist_ok=True)",
        "",
        "# -------------------- scanning helpers --------------------",
        "",
        "def scan_all_files():",
        "    \"\"\"Return list of (lower_filename, relative_path) for every file in repo (skips .git).\"\"\"",
        "    out = []",
        "    for r, dnames, fnames in os.walk(ROOT):",
        "        # skip .git",
        "        if \".git\" in dnames:",
        "            dnames.remove(\".git\")",
        "        rpath = pathlib.Path(r)",
        "        for fn in fnames:",
        "            p = rpath / fn",
        "            try:",
        "                rel = p.relative_to(ROOT)",
        "            except Exception:",
        "                rel = p",
        "            out.append((fn.lower(), rel))",
        "    return out",
        "",
        "def read_text_safe(relpath: pathlib.Path) -> str:",
        "    try:",
        "        return (ROOT / relpath).read_text(errors=\"ignore\")",
        "    except Exception:",
        "        return \"\"",
        "",
        "def all_dir_name_hints(files):",
        "    \"\"\"Collect EVERY path segment as a lowercased name-hint.\"\"\"",
        "    names = set()",
        "    for _, rel in files:",
        "        for part in pathlib.Path(rel).parts:",
        "            names.add(part.lower())",
        "    return names",
        "",
        "# -------------------- content-aware CMake classifier --------------------",
        "",
        "ANDROID_HINTS = (",
        "    \"android\", \"android_abi\", \"android_platform\", \"ndk\",",
        "    \"externalnativebuild\", \"gradle\", \"cmake_android\",",
        "    \"find_library(log)\", \"log-lib\", \"loglib\"",
        ")",
        "DESKTOP_HINTS = (",
        "    \"add_executable\", \"pkgconfig\", \"find_package(\", \"threads\", \"pthread\",",
        "    \"x11\", \"wayland\", \"gtk\", \"qt\", \"set(cmake_system_name linux\"",
        ")",
        "",
        "def cmakelists_flavor(txt: str) -> str:",
        "    t = txt.lower()",
        "    if any(h in t for h in ANDROID_HINTS):",
        "        return \"android\"",
        "    if any(h in t for h in DESKTOP_HINTS):",
        "        return \"desktop\"",
        "    # default: desktop unless clearly android",
        "    return \"desktop\"",
        ""
      ],
      "src/ble/bluez_ble.h": [
        "#include \"ble/ble_backend.h\"",
        "#include \"ble/bluez_ble.h\"",
        "#include <dbus/dbus.h>",
        "#include <cstring>",
        "#include <string>",
        "#include <vector>",
        "",
        "static bool call_read_value(DBusConnection* conn, const std::string& char_path, std::vector<uint8_t>& out, std::string& err) {",
        "  DBusMessage* msg = dbus_message_new_method_call(\"org.bluez\", char_path.c_str(), \"org.bluez.GattCharacteristic1\", \"ReadValue\");",
        "  if (!msg) { err=\"dbus_message_new_method_call failed\"; return false; }",
        "  DBusMessageIter args, dict;",
        "  dbus_message_iter_init_append(msg, &args);",
        "  dbus_message_iter_open_container(&args, DBUS_TYPE_ARRAY, \"{sv}\", &dict); // empty options {}",
        "  dbus_message_iter_close_container(&args, &dict);",
        "",
        "  DBusError dbus_err; dbus_error_init(&dbus_err);",
        "  DBusMessage* reply = dbus_connection_send_with_reply_and_block(conn, msg, 5000, &dbus_err);",
        "  dbus_message_unref(msg);",
        "  if (!reply) {",
        "    err = dbus_err.message ? dbus_err.message : \"ReadValue call failed\";",
        "    dbus_error_free(&dbus_err);",
        "    return false;",
        "  }",
        "",
        "  DBusMessageIter it;",
        "  if (!dbus_message_iter_init(reply, &it) || dbus_message_iter_get_arg_type(&it) != DBUS_TYPE_ARRAY) {",
        "    err = \"Unexpected DBus reply\";",
        "    dbus_message_unref(reply);",
        "    return false;",
        "  }",
        "  DBusMessageIter arr;",
        "  dbus_message_iter_recurse(&it, &arr);",
        "  while (dbus_message_iter_get_arg_type(&arr) == DBUS_TYPE_BYTE) {",
        "    uint8_t b; dbus_message_iter_get_basic(&arr, &b);",
        "    out.push_back(b);",
        "    dbus_message_iter_next(&arr);",
        "  }",
        "  dbus_message_unref(reply);",
        "  return true;",
        "}",
        "",
        "std::optional<std::vector<uint8_t>>",
        "bluez_read_characteristic(const std::string& char_object_path,",
        "                          std::string* error_out) {",
        "#ifdef PLATFORM_BLUEZ",
        "  DBusError err; dbus_error_init(&err);",
        "  DBusConnection* conn = dbus_bus_get(DBUS_BUS_SYSTEM, &err);",
        "  if (!conn) {",
        "    if (error_out) *error_out = err.message ? err.message : \"DBus connect failed\";",
        "    dbus_error_free(&err);",
        "    return std::nullopt;",
        "  }",
        "  std::vector<uint8_t> data; std::string e;",
        "  bool ok = call_read_value(conn, char_object_path, data, e);",
        "  if (!ok) { if (error_out) *error_out = e; return std::nullopt; }",
        "  return data;",
        "#else",
        "  (void)char_object_path; (void)error_out;",
        "  return std::nullopt;",
        "#endif",
        "}",
        "",
        "std::optional<std::vector<uint8_t>>",
        "ble_read_characteristic(const std::string& device_id_or_path,",
        "                        const std::string& service_uuid,",
        "                        const std::string& characteristic_uuid,",
        "                        std::string* error_out) {",
        "  (void)service_uuid; (void)characteristic_uuid;",
        "#ifdef PLATFORM_BLUEZ",
        "  return bluez_read_characteristic(device_id_or_path, error_out);",
        "#else",
        "  (void)device_id_or_path; (void)error_out;",
        "  return std::nullopt;",
        "#endif",
        "}"
      ],
      "src/ble/bluez_ble.cpp": [
        "#include \"ble/ble_backend.h\"",
        "#include \"ble/bluez_ble.h\"",
        "#include <dbus/dbus.h>",
        "#include <cstring>",
        "#include <string>",
        "#include <vector>",
        "",
        "static bool call_read_value(DBusConnection* conn, const std::string& char_path, std::vector<uint8_t>& out, std::string& err) {",
        "  DBusMessage* msg = dbus_message_new_method_call(\"org.bluez\", char_path.c_str(), \"org.bluez.GattCharacteristic1\", \"ReadValue\");",
        "  if (!msg) { err=\"dbus_message_new_method_call failed\"; return false; }",
        "  DBusMessageIter args, dict;",
        "  dbus_message_iter_init_append(msg, &args);",
        "  dbus_message_iter_open_container(&args, DBUS_TYPE_ARRAY, \"{sv}\", &dict); // empty options {}",
        "  dbus_message_iter_close_container(&args, &dict);",
        "",
        "  DBusError dbus_err; dbus_error_init(&dbus_err);",
        "  DBusMessage* reply = dbus_connection_send_with_reply_and_block(conn, msg, 5000, &dbus_err);",
        "  dbus_message_unref(msg);",
        "  if (!reply) {",
        "    err = dbus_err.message ? dbus_err.message : \"ReadValue call failed\";",
        "    dbus_error_free(&dbus_err);",
        "    return false;",
        "  }",
        "",
        "  DBusMessageIter it;",
        "  if (!dbus_message_iter_init(reply, &it) || dbus_message_iter_get_arg_type(&it) != DBUS_TYPE_ARRAY) {",
        "    err = \"Unexpected DBus reply\";",
        "    dbus_message_unref(reply);",
        "    return false;",
        "  }",
        "  DBusMessageIter arr;",
        "  dbus_message_iter_recurse(&it, &arr);",
        "  while (dbus_message_iter_get_arg_type(&arr) == DBUS_TYPE_BYTE) {",
        "    uint8_t b; dbus_message_iter_get_basic(&arr, &b);",
        "    out.push_back(b);",
        "    dbus_message_iter_next(&arr);",
        "  }",
        "  dbus_message_unref(reply);",
        "  return true;",
        "}",
        "",
        "std::optional<std::vector<uint8_t>>",
        "bluez_read_characteristic(const std::string& char_object_path,",
        "                          std::string* error_out) {",
        "#ifdef PLATFORM_BLUEZ",
        "  DBusError err; dbus_error_init(&err);",
        "  DBusConnection* conn = dbus_bus_get(DBUS_BUS_SYSTEM, &err);",
        "  if (!conn) {",
        "    if (error_out) *error_out = err.message ? err.message : \"DBus connect failed\";",
        "    dbus_error_free(&err);",
        "    return std::nullopt;",
        "  }",
        "  std::vector<uint8_t> data; std::string e;",
        "  bool ok = call_read_value(conn, char_object_path, data, e);",
        "  if (!ok) { if (error_out) *error_out = e; return std::nullopt; }",
        "  return data;",
        "#else",
        "  (void)char_object_path; (void)error_out;",
        "  return std::nullopt;",
        "#endif",
        "}",
        "",
        "std::optional<std::vector<uint8_t>>",
        "ble_read_characteristic(const std::string& device_id_or_path,",
        "                        const std::string& service_uuid,",
        "                        const std::string& characteristic_uuid,",
        "                        std::string* error_out) {",
        "  (void)service_uuid; (void)characteristic_uuid;",
        "#ifdef PLATFORM_BLUEZ",
        "  return bluez_read_characteristic(device_id_or_path, error_out);",
        "#else",
        "  (void)device_id_or_path; (void)error_out;",
        "  return std::nullopt;",
        "#endif",
        "}"
      ],
      "src/models/winrt_ble.h": [
        "#include \"ble/ble_backend.h\"",
        "#include \"ble/winrt_ble.h\"",
        "#include <winrt/Windows.Devices.Bluetooth.h>",
        "#include <winrt/Windows.Devices.Bluetooth.GenericAttributeProfile.h>",
        "#include <winrt/Windows.Devices.Enumeration.h>",
        "#include <winrt/Windows.Storage.Streams.h>",
        "#include <codecvt>",
        "#include <locale>",
        "",
        "using namespace winrt;",
        "using namespace Windows::Devices::Bluetooth;",
        "using namespace Windows::Devices::Bluetooth::GenericAttributeProfile;",
        "using namespace Windows::Devices::Enumeration;",
        "using namespace Windows::Storage::Streams;",
        "",
        "static std::wstring widen(const std::string& s) {",
        "  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> conv;",
        "  return conv.from_bytes(s);",
        "}",
        "static std::string narrow(const std::wstring& ws) {",
        "  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> conv;",
        "  return conv.to_bytes(ws);",
        "}",
        "",
        "std::optional<std::vector<uint8_t>>",
        "winrt_read_characteristic(const std::wstring& device_id_w,",
        "                          const std::wstring& service_uuid_w,",
        "                          const std::wstring& char_uuid_w,",
        "                          std::wstring* error_out) {",
        "#ifdef PLATFORM_WINRT",
        "  try {",
        "    init_apartment(apartment_type::multi_threaded);",
        "    auto dev = BluetoothLEDevice::FromIdAsync(hstring{device_id_w}).get();",
        "    if (!dev) { if (error_out) *error_out=L\"BluetoothLEDevice null\"; return std::nullopt; }",
        "    auto svcRes = dev.GetGattServicesForUuid(guid{service_uuid_w});",
        "    if (svcRes.Status()!=GattCommunicationStatus::Success || svcRes.Services().Size()==0) {",
        "      if (error_out) *error_out=L\"Service not found\"; return std::nullopt;",
        "    }",
        "    auto svc = svcRes.Services().GetAt(0);",
        "    auto chRes = svc.GetCharacteristicsForUuid(guid{char_uuid_w});",
        "    if (chRes.Status()!=GattCommunicationStatus::Success || chRes.Characteristics().Size()==0) {",
        "      if (error_out) *error_out=L\"Characteristic not found\"; return std::nullopt;",
        "    }",
        "    auto ch = chRes.Characteristics().GetAt(0);",
        "    auto read = ch.ReadValueAsync().get();",
        "    if (read.Status()!=GattCommunicationStatus::Success) {",
        "      if (error_out) *error_out=L\"Read failed\"; return std::nullopt;",
        "    }",
        "    auto buffer = read.Value();",
        "    DataReader reader = DataReader::FromBuffer(buffer);",
        "    std::vector<uint8_t> out(reader.UnconsumedBufferLength());",
        "    reader.ReadBytes(out);",
        "    return out;",
        "  } catch (const hresult_error& ex) {",
        "    if (error_out) *error_out = ex.message();",
        "    return std::nullopt;",
        "  } catch (...) {",
        "    if (error_out) *error_out = L\"Unknown exception\";",
        "    return std::nullopt;",
        "  }",
        "#else",
        "  (void)device_id_w; (void)service_uuid_w; (void)char_uuid_w; (void)error_out;",
        "  return std::nullopt;",
        "#endif",
        "}",
        "",
        "std::optional<std::vector<uint8_t>>",
        "ble_read_characteristic(const std::string& device_id,",
        "                        const std::string& service_uuid,",
        "                        const std::string& characteristic_uuid,",
        "                        std::string* error_out) {",
        "#ifdef PLATFORM_WINRT",
        "  std::wstring err;",
        "  auto res = winrt_read_characteristic(widen(device_id), widen(service_uuid), widen(characteristic_uuid), &err);",
        "  if (!res && error_out) *error_out = narrow(err);",
        "  return res;",
        "#else",
        "  (void)device_id; (void)service_uuid; (void)characteristic_uuid; (void)error_out;",
        "  return std::nullopt;",
        "#endif"
      ],
      "include/ble/bluez_ble.h": [
        "#pragma once",
        "#include <string>",
        "#include <vector>",
        "#include <optional>",
        "",
        "std::optional<std::vector<uint8_t>>",
        "bluez_read_characteristic(const std::string& char_object_path,",
        "                          std::string* error_out);"
      ],
      "include/ble/winrt_ble.h": [
        "#pragma once",
        "#include <string>",
        "#include <vector>",
        "#include <optional>",
        "",
        "std::optional<std::vector<uint8_t>>",
        "winrt_read_characteristic(const std::wstring& device_id_w,",
        "                          const std::wstring& service_uuid_w,",
        "                          const std::wstring& char_uuid_w,",
        "                          std::wstring* error_out);"
      ],
      "include/ble/ble_backend.h": [
        "#pragma once",
        "#include <string>",
        "#include <vector>",
        "#include <optional>",
        "",
        "// Unified GATT read for both Windows & Linux backends.",
        "std::optional<std::vector<uint8_t>>",
        "ble_read_characteristic(const std::string& device_id,",
        "                        const std::string& service_uuid,",
        "                        const std::string& characteristic_uuid,",
        "                        std::string* error_out = nullptr);"
      ],
      "include/models/airpods_models.h": [
        "#pragma once",
        "#include <cstdint>",
        "#include <string>",
        "#include <string_view>",
        "",
        "namespace airpods {",
        "",
        "enum class Model : uint16_t {",
        "  Unknown      = 0x0000,",
        "  AirPods1     = 0x2002,",
        "  AirPods2     = 0x2008,",
        "  AirPods3     = 0x2015,",
        "  AirPods4     = 0x2019, // NEW",
        "  AirPods4ANC  = 0x201B, // NEW",
        "  AirPodsPro   = 0x2101,",
        "  AirPodsPro2  = 0x2201,",
        "  AirPodsMax   = 0x2301",
        "};",
        "",
        "std::string_view ModelName(Model m);",
        "std::string FallbackName(uint16_t raw_id);",
        "",
        "} // namespace airpods"
      ],
      "android/gradle.properties": [
        "org.gradle.jvmargs=-Xmx4g -Dfile.encoding=UTF-8",
        "org.gradle.caching=true",
        "org.gradle.configuration-cache=true",
        "",
        "android.useAndroidX=true",
        "android.enableJetifier=true",
        "android.nonTransitiveRClass=true",
        "",
        "kotlin.code.style=official",
        "kotlin.incremental=true"
      ],
      "android/settings.gradle.kts": [
        "pluginManagement {",
        "    repositories {",
        "        google()",
        "        gradlePluginPortal()",
        "        mavenCentral()",
        "    }",
        "}",
        "dependencyResolutionManagement {",
        "    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)",
        "    repositories {",
        "        google()",
        "        mavenCentral()",
        "    }",
        "}",
        "rootProject.name = \"BlueLibre\"",
        "include(\":app\")"
      ],
      "android/gradlew.bat": [
        "@rem",
        "@rem Copyright 2015 the original author or authors.",
        "@rem",
        "@rem Licensed under the Apache License, Version 2.0 (the \"License\");",
        "@rem you may not use this file except in compliance with the License.",
        "@rem You may obtain a copy of the License at",
        "@rem",
        "@rem      https://www.apache.org/licenses/LICENSE-2.0",
        "@rem",
        "@rem Unless required by applicable law or agreed to in writing, software",
        "@rem distributed under the License is distributed on an \"AS IS\" BASIS,",
        "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "@rem See the License for the specific language governing permissions and",
        "@rem limitations under the License.",
        "@rem",
        "",
        "@if \"%DEBUG%\" == \"\" @echo off",
        "@rem ##########################################################################",
        "@rem",
        "@rem  Gradle startup script for Windows",
        "@rem",
        "@rem ##########################################################################",
        "",
        "@rem Set local scope for the variables with windows NT shell",
        "if \"%OS%\"==\"Windows_NT\" setlocal",
        "",
        "set DIRNAME=%~dp0",
        "if \"%DIRNAME%\" == \"\" set DIRNAME=.",
        "set APP_BASE_NAME=%~n0",
        "set APP_HOME=%DIRNAME%",
        "",
        "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.",
        "for %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi",
        "",
        "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.",
        "set DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"",
        "",
        "@rem Find java.exe",
        "if defined JAVA_HOME goto findJavaFromJavaHome",
        "",
        "set JAVA_EXE=java.exe",
        "%JAVA_EXE% -version >NUL 2>&1",
        "if \"%ERRORLEVEL%\" == \"0\" goto execute",
        "",
        "echo.",
        "echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.",
        "echo.",
        "echo Please set the JAVA_HOME variable in your environment to match the",
        "echo location of your Java installation.",
        "",
        "goto fail",
        "",
        ":findJavaFromJavaHome",
        "set JAVA_HOME=%JAVA_HOME:\"=%",
        "set JAVA_EXE=%JAVA_HOME%/bin/java.exe",
        "",
        "if exist \"%JAVA_EXE%\" goto execute",
        "",
        "echo.",
        "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%",
        "echo.",
        "echo Please set the JAVA_HOME variable in your environment to match the",
        "echo location of your Java installation.",
        "",
        "goto fail",
        "",
        ":execute",
        "@rem Setup the command line",
        "",
        "set CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar",
        "",
        "",
        "@rem Execute Gradle",
        "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*",
        "",
        ":end",
        "@rem End local scope for the variables with windows NT shell",
        "if \"%ERRORLEVEL%\"==\"0\" goto mainEnd",
        "",
        ":fail"
      ],
      "android/build.gradle.kts": [
        "plugins {",
        "    alias(cat.plugins.android.application) apply false",
        "    alias(cat.plugins.kotlin.android)      apply false",
        "    alias(cat.plugins.kotlin.compose)      apply false",
        "}",
        "",
        "tasks.register<Delete>(\"clean\") {",
        "    delete(rootProject.buildDir)",
        "}",
        "",
        "buildscript {",
        "    repositories {",
        "        google()",
        "        mavenCentral()",
        "    }",
        "}",
        "",
        "allprojects {",
        "    repositories {",
        "        google()",
        "        mavenCentral()",
        "    }",
        "}"
      ],
      "android/gradle/libs.versions.toml": [
        "[versions]",
        "agp = \"8.5.2\"",
        "kotlin = \"2.0.20\"",
        "compose-bom = \"2024.12.01\"",
        "coreKtx = \"1.13.1\"",
        "lifecycle = \"2.8.7\"",
        "activity = \"1.10.1\"",
        "navigation = \"2.8.9\"",
        "material3 = \"1.3.2\"",
        "constraintlayout = \"2.2.1\"",
        "dynamicanimation = \"1.1.0\"",
        "accompanist = \"0.36.0\"",
        "emoji2 = \"1.3.0\" # transitive; fine",
        "haze = \"1.5.3\"",
        "hiddenapibypass = \"6.1\"",
        "annotations = \"1.7.1\"",
        "",
        "[libraries]",
        "androidx-core-ktx = { module = \"androidx.core:core-ktx\", version.ref = \"coreKtx\" }",
        "",
        "androidx-lifecycle-runtime-ktx = { module = \"androidx.lifecycle:lifecycle-runtime-ktx\", version.ref = \"lifecycle\" }",
        "androidx-activity-compose = { module = \"androidx.activity:activity-compose\", version.ref = \"activity\" }",
        "",
        "# Compose (use BOM)",
        "androidx-compose-bom = { module = \"androidx.compose:compose-bom\", version.ref = \"compose-bom\" }",
        "androidx-ui = { module = \"androidx.compose.ui:ui\" }",
        "androidx-ui-graphics = { module = \"androidx.compose.ui:ui-graphics\" }",
        "androidx-ui-tooling-preview = { module = \"androidx.compose.ui:ui-tooling-preview\" }",
        "androidx-material3 = { module = \"androidx.compose.material3:material3\" }",
        "",
        "androidx-navigation-compose = { module = \"androidx.navigation:navigation-compose\", version.ref = \"navigation\" }",
        "androidx-constraintlayout = { module = \"androidx.constraintlayout:constraintlayout\", version.ref = \"constraintlayout\" }",
        "androidx-dynamicanimation = { module = \"androidx.dynamicanimation:dynamicanimation\", version.ref = \"dynamicanimation\" }",
        "",
        "accompanist-permissions = { module = \"com.google.accompanist:accompanist-permissions\", version.ref = \"accompanist\" }",
        "haze = { module = \"dev.chrisbanes.haze:haze-android\", version.ref = \"haze\" }",
        "haze-materials = { module = \"dev.chrisbanes.haze:haze-materials-android\", version.ref = \"haze\" }",
        "",
        "hiddenapibypass = { module = \"org.lsposed.hiddenapibypass:hiddenapibypass\", version.ref = \"hiddenapibypass\" }",
        "annotations = { module = \"org.jetbrains:annotations\", version.ref = \"annotations\" }",
        "",
        "[plugins]",
        "android-application = { id = \"com.android.application\", version = \"8.4.0\" }",
        "kotlin-android = { id = \"org.jetbrains.kotlin.android\", version = \"1.9.0\" }",
        "kotlin-compose = { id = \"org.jetbrains.kotlin.plugin.compose\", version = \"1.9.0\" }"
      ],
      "android/gradle/wrapper/gradle-wrapper.properties": [
        "distributionBase=GRADLE_USER_HOME",
        "distributionPath=wrapper/dists",
        "distributionUrl=https\\://services.gradle.org/distributions/gradle-8.7-bin.zip",
        "zipStoreBase=GRADLE_USER_HOME",
        "zipStorePath=wrapper/dists"
      ],
      "android/app/build.gradle.kts": [
        "plugins {",
        "    alias(cat.plugins.android.application)",
        "    alias(cat.plugins.kotlin.android)",
        "    alias(cat.plugins.kotlin.compose)",
        "    id(\"kotlin-parcelize\")",
        "}",
        "// \u2026and in dependencies: implementation(cat.androidx.core.ktx) etc.",
        "",
        "android {",
        "    namespace = \"me.kavishdevar.librepods\"",
        "    compileSdk = 35",
        "",
        "    defaultConfig {",
        "        applicationId = \"me.kavishdevar.librepods\"",
        "        minSdk = 28",
        "        targetSdk = 35",
        "        versionCode = 7",
        "        versionName = \"0.1.0-rc.4\"",
        "    }",
        "",
        "    buildTypes {",
        "        release {",
        "            isMinifyEnabled = false",
        "            proguardFiles(",
        "                getDefaultProguardFile(\"proguard-android-optimize.txt\"),",
        "                \"proguard-rules.pro\"",
        "            )",
        "        }",
        "        debug { isMinifyEnabled = false }",
        "    }",
        "",
        "    compileOptions {",
        "        sourceCompatibility = JavaVersion.VERSION_17",
        "        targetCompatibility = JavaVersion.VERSION_17",
        "    }",
        "    kotlinOptions { jvmTarget = \"17\" }",
        "",
        "    buildFeatures {",
        "        compose = true",
        "        viewBinding = true",
        "    }",
        "",
        "    // Keep if you actually have CMakeLists.txt",
        "    externalNativeBuild {",
        "        cmake {",
        "            path = file(\"src/main/cpp/CMakeLists.txt\")",
        "            version = \"3.22.1\"",
        "        }",
        "    }",
        "",
        "    packaging {",
        "        // Helpful defaults",
        "        resources.excludes += setOf(",
        "            \"META-INF/AL2.0\", \"META-INF/LGPL2.1\",",
        "            \"META-INF/*.kotlin_module\"",
        "        )",
        "    }",
        "}",
        "",
        "dependencies {",
        "    implementation(cat.accompanist.permissions)",
        "    implementation(cat.hiddenapibypass)",
        "    implementation(cat.androidx.core.ktx)",
        "    implementation(cat.androidx.lifecycle.runtime.ktx)",
        "    implementation(cat.androidx.activity.compose)",
        "",
        "    implementation(platform(cat.androidx.compose.bom))",
        "    implementation(cat.androidx.ui)",
        "    implementation(cat.androidx.ui.graphics)",
        "    implementation(cat.androidx.ui.tooling.preview)",
        "    implementation(cat.androidx.material3)",
        "",
        "    implementation(cat.annotations)",
        "    implementation(cat.androidx.navigation.compose)",
        "",
        "    implementation(cat.androidx.constraintlayout)",
        "    implementation(cat.haze)",
        "    implementation(cat.haze.materials)",
        "    implementation(cat.androidx.dynamicanimation)",
        ""
      ],
      "android/app/src/main/AndroidManifest.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
        "<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    package=\"me.kavishdevar.librepods\">",
        "",
        "    <application",
        "        android:label=\"@string/app_name\"",
        "        android:icon=\"@mipmap/ic_launcher\"",
        "        android:roundIcon=\"@mipmap/ic_launcher_round\"",
        "        android:allowBackup=\"true\"",
        "        android:supportsRtl=\"true\"",
        "        android:theme=\"@style/Theme.Material3.DayNight.NoActionBar\">",
        "",
        "        <activity",
        "            android:name=\".MainActivity\"",
        "            android:exported=\"true\">",
        "            <intent-filter>",
        "                <action android:name=\"android.intent.action.MAIN\" />",
        "                <category android:name=\"android.intent.category.LAUNCHER\" />",
        "            </intent-filter>",
        "        </activity>",
        "    </application>",
        "</manifest>"
      ],
      "android/app/src/main/cpp/CMakeLists.txt": [
        "cmake_minimum_required(VERSION 3.22)",
        "project(airpods_core LANGUAGES CXX)",
        "set(CMAKE_CXX_STANDARD 20)",
        "set(CMAKE_CXX_STANDARD_REQUIRED ON)",
        "add_library(airpods_core SHARED jni_bridge.cpp)",
        "target_include_directories(airpods_core PRIVATE ${CMAKE_CURRENT_LIST_DIR})"
      ],
      "android/app/src/main/cpp/l2c_fcr_hook.h": [
        "#pragma once",
        "",
        "#include <cstdint>",
        "#include <vector>",
        "",
        "typedef int (*HookFunType)(void *func, void *replace, void **backup);",
        "",
        "typedef int (*UnhookFunType)(void *func);",
        "",
        "typedef void (*NativeOnModuleLoaded)(const char *name, void *handle);",
        "",
        "typedef struct {",
        "    uint32_t version;",
        "    HookFunType hook_func;",
        "    UnhookFunType unhook_func;",
        "} NativeAPIEntries;",
        "",
        "[[maybe_unused]] typedef NativeOnModuleLoaded (*NativeInit)(const NativeAPIEntries *entries);",
        "",
        "typedef struct t_l2c_ccb tL2C_CCB;",
        "typedef struct t_l2c_lcb tL2C_LCB;",
        "",
        "uintptr_t loadHookOffset(const char* package_name);",
        "uintptr_t getModuleBase(const char *module_name);",
        "uintptr_t loadL2cuProcessCfgReqOffset();",
        "uintptr_t loadL2cCsmConfigOffset();",
        "uintptr_t loadL2cuSendPeerInfoReqOffset();",
        "bool findAndHookFunction(const char *library_path);"
      ],
      "android/app/src/main/cpp/l2c_fcr_hook.cpp": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "#include <cstdint>",
        "#include <cstring>",
        "#include <dlfcn.h>",
        "#include <android/log.h>",
        "#include <fstream>",
        "#include <string>",
        "#include <sys/system_properties.h>",
        "#include \"l2c_fcr_hook.h\"",
        "",
        "#define LOG_TAG \"AirPodsHook\"",
        "#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)",
        "#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)",
        "",
        "static HookFunType hook_func = nullptr;",
        "#define L2CEVT_L2CAP_CONFIG_REQ     4",
        "#define L2CEVT_L2CAP_CONFIG_RSP 15",
        "",
        "struct t_l2c_lcb;",
        "typedef struct _BT_HDR {",
        "    uint16_t event;",
        "    uint16_t len;",
        "    uint16_t offset;",
        "    uint16_t layer_specific;",
        "    uint8_t data[];",
        "} BT_HDR;",
        "",
        "typedef struct {",
        "    uint8_t mode;",
        "    uint8_t tx_win_sz;",
        "    uint8_t max_transmit;",
        "    uint16_t rtrans_tout;",
        "    uint16_t mon_tout;",
        "    uint16_t mps;",
        "} tL2CAP_FCR;",
        "",
        "// Flow spec structure",
        "typedef struct {",
        "    uint8_t  qos_present;",
        "    uint8_t  flow_direction;",
        "    uint8_t  service_type;",
        "    uint32_t token_rate;",
        "    uint32_t token_bucket_size;",
        "    uint32_t peak_bandwidth;",
        "    uint32_t latency;",
        "    uint32_t delay_variation;",
        "} FLOW_SPEC;",
        "",
        "// Configuration info structure",
        "typedef struct {",
        "    uint16_t result;",
        "    uint16_t mtu_present;",
        "    uint16_t mtu;",
        "    uint16_t flush_to_present;",
        "    uint16_t flush_to;",
        "    uint16_t qos_present;",
        "    FLOW_SPEC qos;",
        "    uint16_t fcr_present;",
        "    tL2CAP_FCR fcr;",
        "    uint16_t fcs_present;",
        "    uint16_t fcs;",
        "    uint16_t ext_flow_spec_present;",
        "    FLOW_SPEC ext_flow_spec;"
      ],
      "android/app/src/main/cpp/jni_bridge.cpp": [
        "#include <jni.h>",
        "#include <string>",
        "#include <cstdio>",
        "",
        "static const char* NameForModel(uint16_t id) {",
        "  switch (id) {",
        "    case 0x2002: return \"AirPods (1st gen)\";",
        "    case 0x2008: return \"AirPods (2nd gen)\";",
        "    case 0x2015: return \"AirPods (3rd gen)\";",
        "    case 0x2019: return \"AirPods 4\";",
        "    case 0x201B: return \"AirPods 4 (ANC)\";",
        "    case 0x2101: return \"AirPods Pro\";",
        "    case 0x2201: return \"AirPods Pro (2nd gen)\";",
        "    case 0x2301: return \"AirPods Max\";",
        "    default:     return nullptr;",
        "  }",
        "}",
        "",
        "static std::string FallbackName(uint16_t id) {",
        "  char buf[64];",
        "  std::snprintf(buf, sizeof(buf), \"AirPods (0x%04X)\", id);",
        "  return std::string(buf);",
        "}",
        "",
        "extern \"C\" JNIEXPORT jstring JNICALL",
        "Java_com_yourco_airpods_NativeBridge_parseAirPodsPayload(",
        "    JNIEnv* env, jobject, jbyteArray payload) {",
        "  const jsize n = env->GetArrayLength(payload);",
        "  if (n < 2) return env->NewStringUTF(\"AirPods (Unknown model)\");",
        "  std::string buf(n, '\\0');",
        "  env->GetByteArrayRegion(payload, 0, n, reinterpret_cast<jbyte*>(&buf[0]));",
        "  uint16_t model_id = static_cast<uint8_t>(buf[0]) | (static_cast<uint16_t>(static_cast<uint8_t>(buf[1]))<<8);",
        "  if (const char* known = NameForModel(model_id)) return env->NewStringUTF(known);",
        "  std::string pretty = FallbackName(model_id);",
        "  return env->NewStringUTF(pretty.c_str());",
        "}"
      ],
      "android/app/src/main/res/xml/backup_rules.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?><!--",
        "   Sample backup rules file; uncomment and customize as necessary.",
        "   See https://developer.android.com/guide/topics/data/autobackup",
        "   for details.",
        "   Note: This file is ignored for devices older that API 31",
        "   See https://developer.android.com/about/versions/12/backup-restore",
        "-->",
        "<full-backup-content>",
        "    <!--",
        "   <include domain=\"sharedpref\" path=\".\"/>",
        "   <exclude domain=\"sharedpref\" path=\"device.xml\"/>",
        "-->",
        "</full-backup-content>"
      ],
      "android/app/src/main/res/xml/noise_control_widget_info.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
        "<appwidget-provider xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    xmlns:tools=\"http://schemas.android.com/tools\"",
        "    android:description=\"@string/noise_control_widget_description\"",
        "    android:initialKeyguardLayout=\"@layout/noise_control_widget\"",
        "    android:initialLayout=\"@layout/noise_control_widget\"",
        "    android:minWidth=\"180dp\"",
        "    android:minHeight=\"40dp\"",
        "    android:previewImage=\"@drawable/example_appwidget_preview\"",
        "    android:previewLayout=\"@layout/noise_control_widget\"",
        "    android:resizeMode=\"horizontal\"",
        "    android:targetCellWidth=\"3\"",
        "    android:targetCellHeight=\"1\"",
        "    android:updatePeriodMillis=\"30000\"",
        "    android:widgetCategory=\"home_screen|keyguard\"",
        "    tools:ignore=\"UnusedAttribute\" />"
      ],
      "android/app/src/main/res/xml/data_extraction_rules.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?><!--",
        "   Sample data extraction rules file; uncomment and customize as necessary.",
        "   See https://developer.android.com/about/versions/12/backup-restore#xml-changes",
        "   for details.",
        "-->",
        "<data-extraction-rules>",
        "    <cloud-backup>",
        "        <!-- TODO: Use <include> and <exclude> to control what is backed up.",
        "        <include .../>",
        "        <exclude .../>",
        "        -->",
        "    </cloud-backup>",
        "    <!--",
        "    <device-transfer>",
        "        <include .../>",
        "        <exclude .../>",
        "    </device-transfer>",
        "    -->",
        "</data-extraction-rules>"
      ],
      "android/app/src/main/res/xml/file_paths.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
        "<paths>",
        "    <files-path name=\"logs\" path=\"logs/\"/>",
        "</paths>"
      ],
      "android/app/src/main/res/xml/battery_widget_info.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
        "<appwidget-provider xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    xmlns:tools=\"http://schemas.android.com/tools\"",
        "    android:description=\"@string/app_widget_description\"",
        "    android:initialKeyguardLayout=\"@layout/battery_widget\"",
        "    android:initialLayout=\"@layout/battery_widget\"",
        "    android:minWidth=\"180dp\"",
        "    android:minHeight=\"40dp\"",
        "    android:previewImage=\"@drawable/example_appwidget_preview\"",
        "    android:previewLayout=\"@layout/battery_widget\"",
        "    android:resizeMode=\"horizontal|vertical\"",
        "    android:targetCellWidth=\"3\"",
        "    android:targetCellHeight=\"1\"",
        "    android:updatePeriodMillis=\"30000\"",
        "    android:widgetCategory=\"home_screen|keyguard\"",
        "    tools:ignore=\"UnusedAttribute\" />"
      ],
      "android/app/src/main/res/values-v21/styles.xml": [
        "<resources>",
        "",
        "  <style name=\"Widget.LibrePods.AppWidget.Container\" parent=\"android:Widget\">",
        "    <item name=\"android:id\">@android:id/background</item>",
        "    <item name=\"android:padding\">?attr/appWidgetPadding</item>",
        "    <item name=\"android:background\">@drawable/app_widget_background</item>",
        "  </style>",
        "",
        "  <style name=\"Widget.LibrePods.AppWidget.InnerView\" parent=\"android:Widget\">",
        "    <item name=\"android:padding\">?attr/appWidgetPadding</item>",
        "    <item name=\"android:background\">@drawable/app_widget_inner_view_background</item>",
        "    <item name=\"android:textColor\">?android:attr/textColorPrimary</item>",
        "  </style>",
        "</resources>"
      ],
      "android/app/src/main/res/values-v31/themes.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
        "<resources>",
        "  <!--",
        "    Having themes.xml for v31 variant because @android:dimen/system_app_widget_background_radius",
        "     and @android:dimen/system_app_widget_internal_padding requires API level 31",
        "    -->",
        "  <style name=\"Theme.LibrePods.AppWidgetContainerParent\" parent=\"@android:style/Theme.DeviceDefault.DayNight\">",
        "    <item name=\"appWidgetRadius\">@android:dimen/system_app_widget_background_radius</item>",
        "    <item name=\"appWidgetInnerRadius\">@android:dimen/system_app_widget_inner_radius</item>",
        "  </style>",
        "</resources>"
      ],
      "android/app/src/main/res/values-v31/styles.xml": [
        "<resources>",
        "",
        "  <style name=\"Widget.LibrePods.AppWidget.Container\" parent=\"android:Widget\">",
        "    <item name=\"android:id\">@android:id/background</item>",
        "    <item name=\"android:padding\">?attr/appWidgetPadding</item>",
        "    <item name=\"android:background\">@drawable/app_widget_background</item>",
        "    <item name=\"android:clipToOutline\">true</item>",
        "  </style>",
        "",
        "  <style name=\"Widget.LibrePods.AppWidget.InnerView\" parent=\"android:Widget\">",
        "    <item name=\"android:padding\">?attr/appWidgetPadding</item>",
        "    <item name=\"android:background\">@drawable/app_widget_inner_view_background</item>",
        "    <item name=\"android:textColor\">?android:attr/textColorPrimary</item>",
        "    <item name=\"android:clipToOutline\">true</item>",
        "  </style>",
        "</resources>"
      ],
      "android/app/src/main/res/layout/notification_expanded.xml": [
        "<LinearLayout",
        "    xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    xmlns:tools=\"http://schemas.android.com/tools\"",
        "    android:layout_width=\"match_parent\"",
        "    android:layout_height=\"wrap_content\"",
        "    android:orientation=\"vertical\">",
        "",
        "    <TextView",
        "        android:id=\"@+id/notification_title\"",
        "        android:layout_width=\"match_parent\"",
        "        android:layout_height=\"wrap_content\"",
        "        android:textSize=\"16sp\"",
        "        android:textColor=\"?android:attr/textColorPrimary\"",
        "        android:fontFamily=\"@font/sf_pro\" />",
        "",
        "    <LinearLayout",
        "        android:layout_width=\"match_parent\"",
        "        android:layout_height=\"wrap_content\"",
        "        android:orientation=\"horizontal\"",
        "        android:paddingTop=\"8dp\"",
        "        android:gravity=\"center\">",
        "        <TextView",
        "            android:id=\"@+id/left_battery_notification\"",
        "            android:layout_width=\"0dp\"",
        "            android:layout_height=\"wrap_content\"",
        "            android:fontFamily=\"@font/sf_pro\"",
        "            android:textSize=\"15sp\"",
        "            android:paddingEnd=\"16dp\"",
        "            android:layout_weight=\"1\"",
        "            tools:ignore=\"RtlSymmetry\" />",
        "        <TextView",
        "            android:id=\"@+id/right_battery_notification\"",
        "            android:layout_width=\"0dp\"",
        "            android:layout_height=\"wrap_content\"",
        "            android:fontFamily=\"@font/sf_pro\"",
        "            android:textSize=\"15sp\"",
        "            android:layout_weight=\"1\"",
        "            android:paddingEnd=\"16dp\"",
        "            tools:ignore=\"RtlSymmetry\" />",
        "        <TextView",
        "            android:id=\"@+id/case_battery_notification\"",
        "            android:layout_width=\"0dp\"",
        "            android:layout_height=\"wrap_content\"",
        "            android:fontFamily=\"@font/sf_pro\"",
        "            android:layout_weight=\"1\"",
        "            android:textSize=\"15sp\" />",
        "    </LinearLayout>",
        "",
        "</LinearLayout>"
      ],
      "android/app/src/main/res/layout/notification.xml": [
        "<LinearLayout",
        "    xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    android:layout_width=\"match_parent\"",
        "    android:layout_height=\"wrap_content\"",
        "    android:orientation=\"vertical\">",
        "",
        "    <TextView",
        "        android:id=\"@+id/notification_title\"",
        "        android:layout_width=\"match_parent\"",
        "        android:layout_height=\"wrap_content\"",
        "        android:textSize=\"16sp\"",
        "        />",
        "</LinearLayout>"
      ],
      "android/app/src/main/res/layout/popup_window.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
        "<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    xmlns:app=\"http://schemas.android.com/apk/res-auto\"",
        "    xmlns:tools=\"http://schemas.android.com/tools\"",
        "    android:layout_width=\"match_parent\"",
        "    android:layout_height=\"wrap_content\"",
        "    android:layout_margin=\"16.dp\"",
        "    android:id=\"@+id/linear_layout\"",
        "    android:orientation=\"vertical\"",
        "    android:background=\"@drawable/popup_shape\">",
        "",
        "    <androidx.constraintlayout.widget.ConstraintLayout",
        "        android:layout_width=\"match_parent\"",
        "        android:layout_height=\"wrap_content\"",
        "        android:gravity=\"end\"",
        "        android:id=\"@+id/constraint_layout\"",
        "        android:paddingBottom=\"48dp\"",
        "        android:orientation=\"horizontal\">",
        "",
        "        <TextView",
        "            android:id=\"@+id/name\"",
        "            android:layout_width=\"match_parent\"",
        "            android:layout_height=\"wrap_content\"",
        "            android:layout_marginTop=\"16dp\"",
        "            android:fontFamily=\"@font/sf_pro\"",
        "            android:gravity=\"center\"",
        "            android:text=\"Kavish's AirPods Pro\"",
        "            android:textColor=\"@color/popup_text\"",
        "",
        "            android:textSize=\"28sp\"",
        "            app:layout_constraintTop_toTopOf=\"parent\"",
        "            tools:ignore=\"HardcodedText\" />",
        "",
        "        <ImageButton",
        "            android:id=\"@+id/close_button\"",
        "            android:layout_width=\"28dp\"",
        "            android:layout_height=\"28dp\"",
        "            android:layout_marginTop=\"12dp\"",
        "            android:layout_marginEnd=\"24dp\"",
        "            android:background=\"@drawable/popup_button_shape\"",
        "            android:contentDescription=\"Close Button\"",
        "            android:src=\"@drawable/close\"",
        "            app:layout_constraintEnd_toEndOf=\"parent\"",
        "            app:layout_constraintTop_toTopOf=\"parent\"",
        "            tools:ignore=\"HardcodedText\" />",
        "    </androidx.constraintlayout.widget.ConstraintLayout>",
        "    <VideoView",
        "        android:layout_width=\"match_parent\"",
        "        android:layout_height=\"wrap_content\"",
        "        android:id=\"@+id/video\"",
        "        android:contentDescription=\"AirPods\"",
        "        android:src=\"@raw/connected\"",
        "        tools:ignore=\"HardcodedText\" />",
        "",
        "    <LinearLayout",
        "        android:layout_width=\"match_parent\"",
        "        android:layout_height=\"wrap_content\"",
        "        android:orientation=\"horizontal\">",
        "",
        "        <!-- Left Half -->",
        "        <LinearLayout",
        "            android:layout_width=\"0dp\"",
        "            android:layout_height=\"wrap_content\"",
        "            android:layout_weight=\"1\"",
        "            android:orientation=\"horizontal\">",
        "",
        "            <TextView",
        "                android:layout_width=\"0dp\"",
        "                android:layout_height=\"match_parent\"",
        "                android:layout_weight=\"1\"",
        "                android:textAlignment=\"center\"",
        "                android:layout_marginTop=\"16dp\"",
        "                android:fontFamily=\"@font/sf_pro\"",
        "                android:text=\"\"",
        "                android:textColor=\"@color/popup_text\"",
        "                android:textSize=\"20sp\"",
        "                android:id=\"@+id/left_battery\"",
        "                android:gravity=\"center\"",
        "                tools:ignore=\"NestedWeights\" />",
        ""
      ],
      "android/app/src/main/res/layout/island_window.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
        "<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    xmlns:tools=\"http://schemas.android.com/tools\"",
        "    android:id=\"@+id/island_window_layout\"",
        "    android:layout_width=\"match_parent\"",
        "    android:layout_height=\"wrap_content\"",
        "    android:layout_margin=\"16dp\"",
        "    android:background=\"@drawable/island_background\"",
        "    android:elevation=\"4dp\"",
        "    android:gravity=\"center\"",
        "    android:minHeight=\"115dp\"",
        "    android:orientation=\"horizontal\"",
        "    android:outlineAmbientShadowColor=\"#4EFFFFFF\"",
        "    android:outlineSpotShadowColor=\"#4EFFFFFF\"",
        "    android:padding=\"8dp\">",
        "",
        "    <VideoView",
        "        android:id=\"@+id/island_video_view\"",
        "        android:layout_width=\"80dp\"",
        "        android:layout_height=\"80dp\"",
        "        android:layout_marginStart=\"8dp\"",
        "        android:importantForAccessibility=\"no\" />",
        "",
        "    <LinearLayout",
        "        android:layout_width=\"0dp\"",
        "        android:layout_height=\"wrap_content\"",
        "        android:layout_margin=\"0dp\"",
        "        android:layout_weight=\"1\"",
        "        android:gravity=\"bottom\"",
        "        android:orientation=\"vertical\"",
        "        android:padding=\"12dp\">",
        "",
        "        <TextView",
        "            android:id=\"@+id/island_connected_text\"",
        "            android:layout_width=\"match_parent\"",
        "            android:layout_height=\"wrap_content\"",
        "            android:layout_margin=\"0dp\"",
        "            android:fontFamily=\"@font/sf_pro\"",
        "            android:gravity=\"bottom\"",
        "            android:includeFontPadding=\"false\"",
        "            android:lineSpacingExtra=\"0dp\"",
        "            android:lineSpacingMultiplier=\"1\"",
        "            android:padding=\"0dp\"",
        "            android:text=\"@string/island_connected_text\"",
        "            android:textColor=\"#707072\"",
        "            android:textSize=\"16sp\" />",
        "",
        "        <TextView",
        "            android:id=\"@+id/island_device_name\"",
        "            android:layout_width=\"match_parent\"",
        "            android:layout_height=\"wrap_content\"",
        "            android:layout_margin=\"0dp\"",
        "            android:fontFamily=\"@font/sf_pro\"",
        "            android:gravity=\"bottom\"",
        "            android:includeFontPadding=\"false\"",
        "            android:lineSpacingExtra=\"0dp\"",
        "            android:lineSpacingMultiplier=\"1\"",
        "            android:padding=\"0dp\"",
        "            android:text=\"AirPods Pro\"",
        "            android:textColor=\"@color/white\"",
        "            android:textSize=\"24sp\"",
        "            tools:ignore=\"HardcodedText\" />",
        "    </LinearLayout>",
        "",
        "    <FrameLayout",
        "        android:id=\"@+id/island_battery_container\"",
        "        android:layout_width=\"wrap_content\"",
        "        android:layout_height=\"wrap_content\"",
        "        android:gravity=\"center\">",
        "",
        "        <ProgressBar",
        "            style=\"@style/Widget.AppCompat.ProgressBar.Horizontal\"",
        "            android:layout_width=\"84dp\"",
        "            android:layout_height=\"84dp\"",
        "            android:layout_gravity=\"center\"",
        "            android:indeterminate=\"false\"",
        "            android:max=\"100\"",
        "            android:progress=\"100\"",
        "            android:progressDrawable=\"@drawable/island_battery_background\" />",
        ""
      ],
      "android/app/src/main/res/layout/battery_widget.xml": [
        "<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    xmlns:tools=\"http://schemas.android.com/tools\"",
        "    style=\"@style/Widget.LibrePods.AppWidget.Container\"",
        "    android:layout_width=\"match_parent\"",
        "    android:layout_height=\"wrap_content\"",
        "    android:layout_margin=\"0dp\"",
        "    android:padding=\"0dp\"",
        "    android:id=\"@+id/battery_widget\"",
        "    android:theme=\"@style/Theme.LibrePods.AppWidgetContainer\"",
        "    android:background=\"@drawable/widget_background\">",
        "",
        "    <LinearLayout",
        "        android:layout_width=\"match_parent\"",
        "        android:layout_height=\"wrap_content\"",
        "        android:baselineAligned=\"false\"",
        "        android:orientation=\"horizontal\"",
        "        android:layout_margin=\"0dp\"",
        "        android:id=\"@android:id/background\"",
        "        android:layout_gravity=\"center\">",
        "",
        "        <LinearLayout",
        "            android:layout_width=\"0dp\"",
        "            android:layout_weight=\"1\"",
        "            android:layout_height=\"match_parent\"",
        "            android:gravity=\"center\"",
        "            android:id=\"@+id/phone_battery_widget_container\"",
        "            android:orientation=\"vertical\">",
        "            <FrameLayout",
        "                android:layout_width=\"90dp\"",
        "                android:layout_height=\"90dp\"",
        "                android:layout_margin=\"0dp\"",
        "                android:padding=\"6dp\"",
        "                android:layout_gravity=\"center\">",
        "                <ProgressBar",
        "                    android:id=\"@+id/phone_battery_progress_background\"",
        "                    style=\"@style/Widget.AppCompat.ProgressBar.Horizontal\"",
        "                    android:layout_width=\"match_parent\"",
        "                    android:layout_height=\"match_parent\"",
        "                    android:indeterminate=\"false\"",
        "                    android:max=\"100\"",
        "                    android:progress=\"100\"",
        "                    android:progressDrawable=\"@drawable/progress_bar_background\" />",
        "                <ProgressBar",
        "                    android:id=\"@+id/phone_battery_progress\"",
        "                    style=\"@style/Widget.AppCompat.ProgressBar.Horizontal\"",
        "                    android:layout_width=\"match_parent\"",
        "                    android:layout_height=\"match_parent\"",
        "                    android:indeterminate=\"false\"",
        "                    android:max=\"100\"",
        "                    android:progress=\"50\"",
        "                    android:progressDrawable=\"@drawable/circular_progress_bar\" />",
        "                <ImageView",
        "                    android:id=\"@+id/phone_charging_icon\"",
        "                    android:layout_width=\"20dp\"",
        "                    android:layout_height=\"20dp\"",
        "                    android:layout_gravity=\"top|center_horizontal\"",
        "                    android:importantForAccessibility=\"no\"",
        "                    android:src=\"@drawable/ic_power\"",
        "                    android:visibility=\"gone\"",
        "                    android:tint=\"@color/white\"",
        "                    tools:ignore=\"HardcodedText\" />",
        "                <ImageView",
        "                    android:layout_width=\"28dp\"",
        "                    android:layout_height=\"28dp\"",
        "                    android:src=\"@drawable/smartphone\"",
        "                    android:tint=\"@color/white\"",
        "                    android:layout_gravity=\"center\"",
        "                    android:importantForAccessibility=\"no\"",
        "                    tools:ignore=\"HardcodedText\" />",
        "            </FrameLayout>",
        "            <TextView",
        "                android:id=\"@+id/phone_battery_widget\"",
        "                android:layout_width=\"wrap_content\"",
        "                android:layout_height=\"wrap_content\"",
        "                android:textSize=\"24sp\"",
        "                android:textColor=\"@color/white\"",
        "                android:fontFamily=\"@font/sf_pro\"",
        "                android:gravity=\"center\"",
        "                android:textFontWeight=\"300\"",
        "                android:text=\"Phone\""
      ],
      "android/app/src/main/res/layout/activity_main.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
        "<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    xmlns:app=\"http://schemas.android.com/apk/res-auto\"",
        "    xmlns:tools=\"http://schemas.android.com/tools\"",
        "    android:layout_width=\"match_parent\"",
        "    android:layout_height=\"match_parent\"",
        "    tools:context=\".MainActivity\">",
        "",
        "    <TextView",
        "        android:id=\"@+id/hello\"",
        "        android:layout_width=\"wrap_content\"",
        "        android:layout_height=\"wrap_content\"",
        "        android:text=\"@string/app_hello\"",
        "        app:layout_constraintTop_toTopOf=\"parent\"",
        "        app:layout_constraintStart_toStartOf=\"parent\"",
        "        app:layout_constraintEnd_toEndOf=\"parent\"",
        "        app:layout_constraintBottom_toBottomOf=\"parent\"/>",
        "</androidx.constraintlayout.widget.ConstraintLayout>"
      ],
      "android/app/src/main/res/layout/noise_control_widget.xml": [
        "<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    xmlns:tools=\"http://schemas.android.com/tools\"",
        "    style=\"@style/Widget.LibrePods.AppWidget.Container\"",
        "    android:id=\"@+id/noise_control_widget\"",
        "    android:layout_width=\"match_parent\"",
        "    android:layout_height=\"match_parent\"",
        "    android:theme=\"@style/Theme.LibrePods.AppWidgetContainer\">",
        "",
        "    <LinearLayout",
        "        android:id=\"@android:id/background\"",
        "        android:layout_width=\"match_parent\"",
        "        android:layout_height=\"match_parent\"",
        "        android:orientation=\"horizontal\">",
        "",
        "        <LinearLayout",
        "            android:id=\"@+id/widget_off_button\"",
        "            android:layout_width=\"0dp\"",
        "            android:layout_height=\"match_parent\"",
        "            android:layout_marginVertical=\"12dp\"",
        "            android:layout_marginStart=\"12dp\"",
        "            android:layout_marginEnd=\"2dp\"",
        "            android:layout_weight=\"1\"",
        "            android:background=\"@drawable/widget_button_shape_start\"",
        "            android:clickable=\"true\"",
        "            android:gravity=\"center\"",
        "            android:orientation=\"vertical\">",
        "",
        "            <ImageView",
        "                android:layout_width=\"52dp\"",
        "                android:layout_height=\"52dp\"",
        "                android:src=\"@drawable/noise_cancellation\"",
        "                android:tint=\"@color/white\" />",
        "",
        "            <TextView",
        "                android:layout_width=\"wrap_content\"",
        "                android:layout_height=\"0dp\"",
        "                android:layout_weight=\"1\"",
        "                android:gravity=\"center\"",
        "                android:shadowColor=\"@color/black\"",
        "                android:shadowRadius=\"12\"",
        "                android:text=\"@string/off\"",
        "                android:textColor=\"@color/white\"",
        "                android:textSize=\"12sp\" />",
        "        </LinearLayout>",
        "",
        "        <LinearLayout",
        "            android:id=\"@+id/widget_transparency_button\"",
        "            android:layout_width=\"0dp\"",
        "            android:layout_height=\"match_parent\"",
        "            android:layout_marginVertical=\"12dp\"",
        "            android:layout_marginEnd=\"2dp\"",
        "            android:layout_weight=\"1\"",
        "            android:background=\"@drawable/widget_button_shape_middle\"",
        "            android:clickable=\"true\"",
        "            android:gravity=\"center\"",
        "            android:orientation=\"vertical\">",
        "",
        "            <ImageView",
        "                android:layout_width=\"52dp\"",
        "                android:layout_height=\"52dp\"",
        "                android:src=\"@drawable/transparency\"",
        "                android:tint=\"@color/white\" />",
        "",
        "            <TextView",
        "                android:layout_width=\"wrap_content\"",
        "                android:layout_height=\"0dp\"",
        "                android:layout_weight=\"1\"",
        "                android:gravity=\"center\"",
        "                android:shadowColor=\"@color/black\"",
        "                android:shadowRadius=\"12\"",
        "                android:text=\"@string/transparency\"",
        "                android:textColor=\"@color/white\"",
        "                android:textSize=\"12sp\" />",
        "        </LinearLayout>",
        "",
        "        <LinearLayout",
        "            android:id=\"@+id/widget_adaptive_button\"",
        "            android:layout_width=\"0dp\"",
        "            android:layout_height=\"match_parent\"",
        "            android:layout_marginVertical=\"12dp\""
      ],
      "android/app/src/main/res/values-night/colors.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
        "<resources>",
        "    <color name=\"popup_background\">#1C1B1E</color>",
        "    <color name=\"popup_text\">@color/white</color>",
        "    <color name=\"widget_background\">#1C1B1E</color>",
        "    <color name=\"widget_text\">@color/white</color>",
        "    <color name=\"colorBackground\">#0B0B0B</color>",
        "</resources>"
      ],
      "android/app/src/main/res/drawable-v24/ic_launcher_foreground.xml": [
        "<vector xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    xmlns:aapt=\"http://schemas.android.com/aapt\"",
        "    android:width=\"108dp\"",
        "    android:height=\"108dp\"",
        "    android:viewportWidth=\"108\"",
        "    android:viewportHeight=\"108\">",
        "    <group",
        "        android:translateX=\"13.5\"",
        "        android:translateY=\"13.5\"",
        "        android:scaleX=\"0.75\"",
        "        android:scaleY=\"0.75\">",
        "        <path",
        "            android:pathData=\"M30.07 66.68l-1.73-1.32c-1.35-1.18-2.58-2.49-3.68-3.9l-0.12-0.17-1.28-1.92-0.72-1.24-1.02-2.3c-0.52-1.4-0.9-2.86-1.1-4.34l-0.06-0.45-0.08-1.13-0.07-1.28 0.03-0.79c0-0.37 0.04-0.75 0.1-1.12l0.02-0.14 0.14-0.52c0.2-0.72 0.8-1.27 1.54-1.4l0.3-0.01c0.2-0.01 0.4 0 0.6 0.07 0.22 0.06 0.43 0.18 0.62 0.33l0.62 0.52L26.1 47c1.61 1.26 3.3 2.4 5.09 3.37 0.6 0.33 1.23 0.66 1.77 0.93 0.87 0.43 1.77 0.82 2.68 1.18l0.9 0.36 0.45 0.14c0.7 0.2 1.42 0.36 2.15 0.46l0.56 0.04h0.14c0.12 0 0.18-0.14 0.1-0.23l-0.04-0.02L39.5 53l-0.76-0.41-1.24-0.64-3.39-1.47-2.78-1.62-1.44-0.87-1.69-1.35-1.96-1.58-1.92-1.89-1.36-1.73-0.1-0.13c-0.88-1.16-1.64-2.42-2.27-3.75l-0.71-2.22-0.57-1.89c-0.12-0.57-0.2-1.16-0.22-1.75l-0.05-1.14L19 25.88l0.01-0.11c0.07-0.78 0.2-1.54 0.4-2.3l0.3-1.01 0.38-1.1 0.4-0.87c0.06-0.15 0.14-0.28 0.23-0.4l0.05-0.07c0.1-0.13 0.22-0.25 0.35-0.34 0.22-0.16 0.47-0.25 0.73-0.29h0.04c0.1-0.01 0.22-0.02 0.33-0.01l0.21 0.01c0.12 0.01 0.25 0.03 0.36 0.06h0.03c0.26 0.07 0.5 0.2 0.72 0.36 0.14 0.1 0.26 0.23 0.36 0.37l0.41 0.54 1.54 1.77 1.81 2.08c0.88 0.9 1.82 1.73 2.83 2.5l0.8 0.6 2.16 1.23c0.15 0.09 0.3 0.15 0.47 0.2l1.66 0.53c0.34 0.11 0.53 0.47 0.44 0.81l-0.05 0.12-0.11 0.23c-0.24 0.47-0.36 0.98-0.36 1.5v2.3c0 1.27 0.18 2.52 0.54 3.73l0.5 1.68c0.63 1.66 1.48 3.23 2.54 4.66l0.48 0.66c0.96 1.3 2.04 2.51 3.22 3.62l3.22 3 1.69 1.27c0.2 0.15 0.44 0.27 0.69 0.34l0.17 0.04c0.3 0.09 0.55 0.25 0.75 0.49 0.22 0.27 0.34 0.6 0.34 0.95v33c0 0.18 0.13 0.33 0.31 0.36h0.07-0.07l-5.87-0.51-2.37-0.45C40 87.1 38.32 86.63 36.7 86l-2.44-1.3-1.01-0.73c-0.87-0.62-1.67-1.31-2.41-2.07-0.71-0.72-1.36-1.5-1.93-2.32l-0.66-0.94-0.98-1.39c-0.48-0.67-0.84-1.4-1.1-2.18-0.17-0.56-0.28-1.14-0.33-1.72l-0.01-0.08c-0.04-0.46-0.04-0.92 0-1.38l0.06-0.97V70.9c0-0.71 0.08-1.41 0.23-2.1l0.23-0.68c0.09-0.24 0.23-0.45 0.41-0.62 0.17-0.16 0.38-0.28 0.6-0.34l0.18-0.05c0.37-0.11 0.76-0.1 1.12 0.03 0.14 0.05 0.28 0.11 0.4 0.2l1.04 0.69 2.21 1.62 2.67 1.86 1.94 1.17 1.77 0.95c0.5 0.27 1.04 0.5 1.58 0.7l1.97 0.73 0.12 0.02h0.1c0.11 0 0.21-0.1 0.23-0.21 0-0.1-0.04-0.19-0.12-0.23l-0.94-0.57-1.68-1.05-3.72-2.05-2.88-2.13-3.28-2.16Z\">",
        "            <aapt:attr name=\"android:fillColor\">",
        "                <gradient",
        "                    android:type=\"linear\"",
        "                    android:startX=\"34.51\"",
        "                    android:startY=\"19.37\"",
        "                    android:endX=\"34.51\"",
        "                    android:endY=\"88.4\">",
        "                    <item",
        "                        android:color=\"#FF64AB5D\"",
        "                        android:offset=\"0\"/>",
        "                    <item",
        "                        android:color=\"#FF21395B\"",
        "                        android:offset=\"1\"/>",
        "                </gradient>",
        "            </aapt:attr>",
        "        </path>",
        "        <path",
        "            android:strokeColor=\"@color/popup_text\"",
        "            android:strokeWidth=\"0.5\"",
        "            android:pathData=\"M30.07 66.68l-1.73-1.32c-1.35-1.18-2.58-2.49-3.68-3.9l-0.12-0.17-1.28-1.92-0.72-1.24-1.02-2.3c-0.52-1.4-0.9-2.86-1.1-4.34l-0.06-0.45-0.08-1.13-0.07-1.28 0.03-0.79c0-0.37 0.04-0.75 0.1-1.12l0.02-0.14 0.14-0.52c0.2-0.72 0.8-1.27 1.54-1.4l0.3-0.01c0.2-0.01 0.4 0 0.6 0.07 0.22 0.06 0.43 0.18 0.62 0.33l0.62 0.52L26.1 47c1.61 1.26 3.3 2.4 5.09 3.37 0.6 0.33 1.23 0.66 1.77 0.93 0.87 0.43 1.77 0.82 2.68 1.18l0.9 0.36 0.45 0.14c0.7 0.2 1.42 0.36 2.15 0.46l0.56 0.04h0.14c0.12 0 0.18-0.14 0.1-0.23l-0.04-0.02L39.5 53l-0.76-0.41-1.24-0.64-3.39-1.47-2.78-1.62-1.44-0.87-1.69-1.35-1.96-1.58-1.92-1.89-1.36-1.73-0.1-0.13c-0.88-1.16-1.64-2.42-2.27-3.75l-0.71-2.22-0.57-1.89c-0.12-0.57-0.2-1.16-0.22-1.75l-0.05-1.14L19 25.88l0.01-0.11c0.07-0.78 0.2-1.54 0.4-2.3l0.3-1.01 0.38-1.1 0.4-0.87c0.06-0.15 0.14-0.28 0.23-0.4l0.05-0.07c0.1-0.13 0.22-0.25 0.35-0.34 0.22-0.16 0.47-0.25 0.73-0.29h0.04c0.1-0.01 0.22-0.02 0.33-0.01l0.21 0.01c0.12 0.01 0.25 0.03 0.36 0.06h0.03c0.26 0.07 0.5 0.2 0.72 0.36 0.14 0.1 0.26 0.23 0.36 0.37l0.41 0.54 1.54 1.77 1.81 2.08c0.88 0.9 1.82 1.73 2.83 2.5l0.8 0.6 2.16 1.23c0.15 0.09 0.3 0.15 0.47 0.2l1.66 0.53c0.34 0.11 0.53 0.47 0.44 0.81l-0.05 0.12-0.11 0.23c-0.24 0.47-0.36 0.98-0.36 1.5v2.3c0 1.27 0.18 2.52 0.54 3.73l0.5 1.68c0.63 1.66 1.48 3.23 2.54 4.66l0.48 0.66c0.96 1.3 2.04 2.51 3.22 3.62l3.22 3 1.69 1.27c0.2 0.15 0.44 0.27 0.69 0.34l0.17 0.04c0.3 0.09 0.55 0.25 0.75 0.49 0.22 0.27 0.34 0.6 0.34 0.95v33c0 0.18 0.13 0.33 0.31 0.36h0.07-0.07l-5.87-0.51-2.37-0.45C40 87.1 38.32 86.63 36.7 86l-2.44-1.3-1.01-0.73c-0.87-0.62-1.67-1.31-2.41-2.07-0.71-0.72-1.36-1.5-1.93-2.32l-0.66-0.94-0.98-1.39c-0.48-0.67-0.84-1.4-1.1-2.18-0.17-0.56-0.28-1.14-0.33-1.72l-0.01-0.08c-0.04-0.46-0.04-0.92 0-1.38l0.06-0.97V70.9c0-0.71 0.08-1.41 0.23-2.1l0.23-0.68c0.09-0.24 0.23-0.45 0.41-0.62 0.17-0.16 0.38-0.28 0.6-0.34l0.18-0.05c0.37-0.11 0.76-0.1 1.12 0.03 0.14 0.05 0.28 0.11 0.4 0.2l1.04 0.69 2.21 1.62 2.67 1.86 1.94 1.17 1.77 0.95c0.5 0.27 1.04 0.5 1.58 0.7l1.97 0.73 0.12 0.02h0.1c0.11 0 0.21-0.1 0.23-0.21 0-0.1-0.04-0.19-0.12-0.23l-0.94-0.57-1.68-1.05-3.72-2.05-2.88-2.13-3.28-2.16Z\"/>",
        "        <path",
        "            android:strokeColor=\"@color/popup_text\"",
        "            android:strokeWidth=\"2\"",
        "            android:pathData=\"M49.59 54.33v33.15 0.04c0 0.62 0.14 1.23 0.42 1.78m-0.42-34.97l-2.1-1.4-0.29-0.2c-1.67-1.17-3.26-2.46-4.75-3.86l-0.35-0.35c-1.54-1.53-2.88-3.24-4-5.1l-0.86-1.57c-0.45-0.82-0.82-1.68-1.1-2.57-0.46-1.43-0.7-2.92-0.7-4.42v-0.54-0.74c0-1.27 0.16-2.53 0.47-3.77 0.25-1 0.6-1.97 1.04-2.9l0.74-1.54 0.4-0.67c0.85-1.41 1.84-2.73 2.96-3.94l0.84-0.78c0.56-0.5 1.17-0.95 1.82-1.32l0.98-0.56 1.1-0.56 1.28-0.56 1-0.36c0.63-0.23 1.3-0.4 1.97-0.5 0.54-0.08 1.08-0.12 1.63-0.12h1.7 0.61c0.62 0 1.23 0.04 1.85 0.13 0.69 0.1 1.37 0.25 2.04 0.46l1.24 0.39 2.24 0.56 2.1 0.84 1.54 0.84 1.96 1.12 1.82 1.26 1.68 1.25 0.23 0.2c0.87 0.7 1.68 1.48 2.43 2.32l1.12 1.12 1.26 1.54 1.12 1.54 0.84 1.4 0.59 1.3M49.59 54.34l0.06 0.04c0.33 0.25 0.68 0.47 1.06 0.66l1.54 0.7 1.68 0.7 1.68 0.56 1.54 0.42 1.54 0.42 1.54 0.28 0.84 0.14 1.12 0.04 0.56-0.04h0.56m14.73-25.97l-1.01-0.05h-1.54-0.06c-0.8 0-1.58 0.14-2.32 0.42l-1.12 0.42-0.55 0.3c-0.66 0.35-1.28 0.78-1.86 1.26-0.54 0.45-1.04 0.94-1.49 1.48l-0.72 0.87-0.16 0.19c-0.83 1-1.57 2.05-2.22 3.17l-0.84 1.4-0.84 1.4-0.84 1.82-0.7 1.95-0.42 1.96-0.28 2.1v0.11c0 0.95 0.1 1.9 0.28 2.83l0.42 1.4c0.28 0.92 0.7 1.8 1.28 2.58l0.26 0.36m14.73-25.97l1.65 0.37c0.84 0.18 1.65 0.46 2.43 0.82l0.14 0.07c0.52 0.24 1.03 0.53 1.52 0.85l0.11 0.08c0.56 0.37 1.08 0.8 1.55 1.26 0.37 0.37 0.7 0.76 1 1.18l1.09 1.47c0.65 0.93 1.17 1.94 1.55 3l0.13 0.36 0.02 0.06c0.36 1.17 0.62 2.37 0.77 3.58v0.8c0 0.78-0.06 1.55-0.18 2.32-0.22 1.45-0.65 2.87-1.27 4.2l-0.13 0.27-0.89 1.64-1.54 2.1-0.42 0.5c-0.56 0.69-1.17 1.33-1.84 1.92l-0.06 0.05c-0.88 0.77-1.84 1.44-2.86 2l-0.25 0.11c-1.14 0.5-2.32 0.88-3.53 1.15l-0.17 0.04c-0.72 0.16-1.47 0.24-2.21 0.24h-0.79c-1.15 0-2.3-0.14-3.41-0.42l-1.82-0.7-1.68-0.7-0.62-0.33c-0.61-0.34-1.17-0.76-1.67-1.25-0.34-0.34-0.71-0.65-1.12-0.92l-0.23-0.15m0 0v1.81 0.84 1.4l-0.42 24.9v0.43c0 0.55-0.1 1.1-0.28 1.61M50 89.3l0.3 0.52c0.17 0.3 0.38 0.58 0.63 0.83 0.4 0.4 0.88 0.71 1.4 0.9l0.33 0.13 0.1 0.04c0.29 0.11 0.58 0.2 0.88 0.26 0.37 0.08 0.75 0.12 1.13 0.12h0.55 0.84H57h0.7c0.37 0 0.75-0.05 1.11-0.14l0.3-0.07c0.56-0.14 1.1-0.35 1.62-0.6l0.05-0.03 0.42-0.28 0.28-0.18c0.18-0.12 0.35-0.26 0.5-0.42 0.22-0.25 0.4-0.54 0.51-0.86l0.1-0.28M50 89.3l12.6-0.06M48.9 31.81l-0.86-0.65c-0.17-0.13-0.32-0.28-0.45-0.47-0.06-0.1-0.12-0.2-0.16-0.3l-0.14-0.32c-0.14-0.33-0.21-0.69-0.21-1.05 0-0.28 0.04-0.57 0.13-0.84L47.26 28l0.2-0.5 0.16-0.3c0.1-0.2 0.23-0.38 0.39-0.54 0.12-0.12 0.25-0.22 0.4-0.31l0.29-0.17c0.12-0.08 0.26-0.15 0.4-0.2l0.11-0.05c0.25-0.1 0.51-0.15 0.78-0.15 0.2 0 0.4 0.03 0.58 0.08l0.26 0.08c0.3 0.08 0.57 0.2 0.83 0.34l1.15 0.62 1.4 0.84 1.12 0.84 1.4 0.98 1.17 0.89 0.3 0.28c0.14 0.15 0.25 0.32 0.34 0.5l0.02 0.03c0.18 0.35 0.27 0.74 0.27 1.13v0.25 0.19c0 0.42-0.1 0.84-0.3 1.22-0.08 0.18-0.18 0.34-0.3 0.5l-0.1 0.12c-0.19 0.23-0.42 0.41-0.68 0.54-0.1 0.06-0.22 0.1-0.34 0.14l-0.21 0.06c-0.4 0.1-0.8 0.16-1.2 0.16h-0.37c-0.28 0-0.55-0.05-0.81-0.15l-0.12-0.05c-0.13-0.05-0.25-0.11-0.37-0.18l-1.5-0.88-1.82-1.25-1.82-1.26Zm36.96 17.06l0.06-0.42c0.05-0.37 0.05-0.74-0.01-1.11l-0.01-0.07c-0.03-0.14-0.06-0.29-0.11-0.43l-0.1-0.28c-0.07-0.23-0.2-0.43-0.37-0.6l-0.07-0.07c-0.15-0.15-0.34-0.26-0.55-0.31-0.16-0.04-0.32-0.05-0.48-0.02l-0.25 0.04c-0.23 0.04-0.46 0.1-0.67 0.22l-0.14 0.07c-0.25 0.12-0.49 0.28-0.7 0.46l-0.26 0.22c-0.27 0.23-0.51 0.48-0.74 0.75l-0.36 0.43-0.56 0.84-0.84 1.26-0.14 0.21c-0.28 0.42-0.51 0.87-0.7 1.33l-0.56 1.54-0.1 0.36c-0.12 0.4-0.18 0.84-0.18 1.27v0.39c0 0.24 0.04 0.47 0.11 0.7l0.08 0.22c0.06 0.18 0.16 0.35 0.3 0.49l0.05 0.05c0.1 0.1 0.23 0.18 0.37 0.23 0.14 0.04 0.28 0.06 0.43 0.04l0.36-0.06c0.26-0.03 0.52-0.11 0.76-0.23l0.44-0.22c0.4-0.2 0.77-0.45 1.11-0.74l0.47-0.4 0.03-0.04c0.73-0.81 1.37-1.69 1.93-2.62 0.37-0.65 0.69-1.33 0.95-2.04l0.17-0.48 0.28-0.98Z\"/>",
        "    </group>",
        "</vector>"
      ],
      "android/app/src/main/res/drawable-v24/ic_launcher_monochrome.xml": [
        "<vector xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    android:width=\"108dp\"",
        "    android:height=\"108dp\"",
        "    android:viewportWidth=\"108\"",
        "    android:viewportHeight=\"108\">",
        "    <group",
        "        android:translateX=\"21.6\"",
        "        android:translateY=\"21.6\"",
        "        android:scaleX=\"0.6\"",
        "        android:scaleY=\"0.6\">",
        "        <group>",
        "            <path",
        "                android:strokeColor=\"@color/popup_text\"",
        "                android:strokeWidth=\"3.25\"",
        "                android:pathData=\"M49.64 54.5v33.52c0 0.21 0.17 0.38 0.38 0.38l-5.94-0.52-2.37-0.45C40 87.1 38.32 86.63 36.7 86l-2.44-1.3-1.01-0.73c-0.87-0.62-1.67-1.31-2.41-2.07-0.71-0.72-1.36-1.5-1.93-2.32l-0.66-0.94-0.98-1.39c-0.48-0.67-0.84-1.4-1.1-2.18-0.17-0.56-0.28-1.14-0.33-1.72l-0.01-0.08c-0.04-0.46-0.04-0.92 0-1.38l0.06-0.97V70.9c0-0.71 0.08-1.41 0.23-2.1l0.23-0.68c0.09-0.24 0.23-0.45 0.41-0.62 0.17-0.16 0.38-0.28 0.6-0.34l0.18-0.05c0.37-0.11 0.76-0.1 1.12 0.03 0.14 0.05 0.28 0.11 0.4 0.2l1.04 0.69 2.21 1.62 2.67 1.86 1.94 1.17 1.77 0.95c0.5 0.27 1.04 0.5 1.58 0.7l1.97 0.73 0.12 0.02h0.1c0.11 0 0.21-0.1 0.23-0.21 0-0.1-0.04-0.19-0.12-0.23l-0.94-0.57-1.68-1.05-3.72-2.05-2.88-2.13-3.28-2.16-1.73-1.32c-1.35-1.18-2.58-2.49-3.68-3.9l-0.12-0.17-1.28-1.92-0.72-1.24-1.02-2.3c-0.52-1.4-0.9-2.86-1.1-4.34l-0.06-0.45-0.08-1.13-0.07-1.28 0.03-0.79c0-0.37 0.04-0.75 0.1-1.12l0.02-0.14 0.14-0.52c0.2-0.72 0.8-1.27 1.54-1.4l0.3-0.01c0.2-0.01 0.4 0 0.6 0.07 0.22 0.06 0.43 0.18 0.62 0.33l0.62 0.52L26.1 47c1.61 1.26 3.3 2.4 5.09 3.37 0.6 0.33 1.23 0.66 1.77 0.93 0.87 0.43 1.77 0.82 2.68 1.18l0.9 0.36 0.45 0.14c0.7 0.2 1.42 0.36 2.15 0.46l0.56 0.04h0.14c0.12 0 0.18-0.14 0.1-0.23l-0.04-0.02L39.5 53l-0.76-0.41-1.24-0.64-3.39-1.47-2.78-1.62-1.44-0.87-1.69-1.35-1.96-1.58-1.92-1.89-1.36-1.73-0.1-0.13c-0.88-1.16-1.64-2.42-2.27-3.75l-0.71-2.22-0.57-1.89c-0.12-0.57-0.2-1.16-0.22-1.75l-0.05-1.14L19 25.88l0.01-0.11c0.07-0.78 0.2-1.54 0.4-2.3l0.3-1.01 0.38-1.1 0.4-0.87c0.06-0.15 0.14-0.28 0.23-0.4l0.05-0.07c0.1-0.13 0.22-0.25 0.35-0.34 0.22-0.16 0.47-0.25 0.73-0.29h0.04c0.1-0.01 0.22-0.02 0.33-0.01l0.21 0.01c0.12 0.01 0.25 0.03 0.36 0.06h0.03c0.26 0.07 0.5 0.2 0.72 0.36 0.14 0.1 0.26 0.23 0.36 0.37l0.41 0.54 1.54 1.77 1.81 2.08c0.88 0.9 1.82 1.73 2.83 2.5l0.8 0.6 0.09 0.05c1.53 0.87 3.14 1.58 4.8 2.1\"/>",
        "        </group>",
        "        <path",
        "            android:strokeColor=\"@color/popup_text\"",
        "            android:strokeWidth=\"3.75\"",
        "            android:pathData=\"M49.59 54.33v33.15 0.04c0 0.62 0.14 1.23 0.42 1.78m-0.42-34.97l-2.1-1.4-0.29-0.2c-1.67-1.17-3.26-2.46-4.75-3.86l-0.35-0.35c-1.54-1.53-2.88-3.24-4-5.1l-0.86-1.57c-0.45-0.82-0.82-1.68-1.1-2.57-0.46-1.43-0.7-2.92-0.7-4.42v-0.54-0.74c0-1.27 0.16-2.53 0.47-3.77 0.25-1 0.6-1.97 1.04-2.9l0.74-1.54 0.4-0.67c0.85-1.41 1.84-2.73 2.96-3.94l0.84-0.78c0.56-0.5 1.17-0.95 1.82-1.32l0.98-0.56 1.1-0.56 1.28-0.56 1-0.36c0.63-0.23 1.3-0.4 1.97-0.5 0.54-0.08 1.08-0.12 1.63-0.12h1.7 0.61c0.62 0 1.23 0.04 1.85 0.13 0.69 0.1 1.37 0.25 2.04 0.46l1.24 0.39 2.24 0.56 2.1 0.84 1.54 0.84 1.96 1.12 1.82 1.26 1.68 1.25 0.23 0.2c0.87 0.7 1.68 1.48 2.43 2.32l1.12 1.12 1.26 1.54 1.12 1.54 0.84 1.4 0.59 1.3M49.59 54.34l0.06 0.04c0.33 0.25 0.68 0.47 1.06 0.66l1.54 0.7 1.68 0.7 1.68 0.56 1.54 0.42 1.54 0.42 1.54 0.28 0.84 0.14 1.12 0.04 0.56-0.04h0.56m14.73-25.97l-1.01-0.05h-1.54-0.06c-0.8 0-1.58 0.14-2.32 0.42l-1.12 0.42-0.55 0.3c-0.66 0.35-1.28 0.78-1.86 1.26-0.54 0.45-1.04 0.94-1.49 1.48l-0.72 0.87-0.16 0.19c-0.83 1-1.57 2.05-2.22 3.17l-0.84 1.4-0.84 1.4-0.84 1.82-0.7 1.95-0.42 1.96-0.28 2.1v0.11c0 0.95 0.1 1.9 0.28 2.83l0.42 1.4c0.28 0.92 0.7 1.8 1.28 2.58l0.26 0.36m14.73-25.97l1.65 0.37c0.84 0.18 1.65 0.46 2.43 0.82l0.14 0.07c0.52 0.24 1.03 0.53 1.52 0.85l0.11 0.08c0.56 0.37 1.08 0.8 1.55 1.26 0.37 0.37 0.7 0.76 1 1.18l1.09 1.47c0.65 0.93 1.17 1.94 1.55 3l0.13 0.36 0.02 0.06c0.36 1.17 0.62 2.37 0.77 3.58v0.8c0 0.78-0.06 1.55-0.18 2.32-0.22 1.45-0.65 2.87-1.27 4.2l-0.13 0.27-0.89 1.64-1.54 2.1-0.42 0.5c-0.56 0.69-1.17 1.33-1.84 1.92l-0.06 0.05c-0.88 0.77-1.84 1.44-2.86 2l-0.25 0.11c-1.14 0.5-2.32 0.88-3.53 1.15l-0.17 0.04c-0.72 0.16-1.47 0.24-2.21 0.24h-0.79c-1.15 0-2.3-0.14-3.41-0.42l-1.82-0.7-1.68-0.7-0.62-0.33c-0.61-0.34-1.17-0.76-1.67-1.25-0.34-0.34-0.71-0.65-1.12-0.92l-0.23-0.15m0 0v1.81 0.84 1.4l-0.42 24.9v0.43c0 0.55-0.1 1.1-0.28 1.61M50 89.3l0.3 0.52c0.17 0.3 0.38 0.58 0.63 0.83 0.4 0.4 0.88 0.71 1.4 0.9l0.33 0.13 0.1 0.04c0.29 0.11 0.58 0.2 0.88 0.26 0.37 0.08 0.75 0.12 1.13 0.12h0.55 0.84H57h0.7c0.37 0 0.75-0.05 1.11-0.14l0.3-0.07c0.56-0.14 1.1-0.35 1.62-0.6l0.05-0.03 0.42-0.28 0.28-0.18c0.18-0.12 0.35-0.26 0.5-0.42 0.22-0.25 0.4-0.54 0.51-0.86l0.1-0.28M50 89.3l12.6-0.06M48.9 31.81l-0.86-0.65c-0.17-0.13-0.32-0.28-0.45-0.47-0.06-0.1-0.12-0.2-0.16-0.3l-0.14-0.32c-0.14-0.33-0.21-0.69-0.21-1.05 0-0.28 0.04-0.57 0.13-0.84L47.26 28l0.2-0.5 0.16-0.3c0.1-0.2 0.23-0.38 0.39-0.54 0.12-0.12 0.25-0.22 0.4-0.31l0.29-0.17c0.12-0.08 0.26-0.15 0.4-0.2l0.11-0.05c0.25-0.1 0.51-0.15 0.78-0.15 0.2 0 0.4 0.03 0.58 0.08l0.26 0.08c0.3 0.08 0.57 0.2 0.83 0.34l1.15 0.62 1.4 0.84 1.12 0.84 1.4 0.98 1.17 0.89 0.3 0.28c0.14 0.15 0.25 0.32 0.34 0.5l0.02 0.03c0.18 0.35 0.27 0.74 0.27 1.13v0.25 0.19c0 0.42-0.1 0.84-0.3 1.22-0.08 0.18-0.18 0.34-0.3 0.5l-0.1 0.12c-0.19 0.23-0.42 0.41-0.68 0.54-0.1 0.06-0.22 0.1-0.34 0.14l-0.21 0.06c-0.4 0.1-0.8 0.16-1.2 0.16h-0.37c-0.28 0-0.55-0.05-0.81-0.15l-0.12-0.05c-0.13-0.05-0.25-0.11-0.37-0.18l-1.5-0.88-1.82-1.25-1.82-1.26Zm36.96 17.06l0.06-0.42c0.05-0.37 0.05-0.74-0.01-1.11l-0.01-0.07c-0.03-0.14-0.06-0.29-0.11-0.43l-0.1-0.28c-0.07-0.23-0.2-0.43-0.37-0.6l-0.07-0.07c-0.15-0.15-0.34-0.26-0.55-0.31-0.16-0.04-0.32-0.05-0.48-0.02l-0.25 0.04c-0.23 0.04-0.46 0.1-0.67 0.22l-0.14 0.07c-0.25 0.12-0.49 0.28-0.7 0.46l-0.26 0.22c-0.27 0.23-0.51 0.48-0.74 0.75l-0.36 0.43-0.56 0.84-0.84 1.26-0.14 0.21c-0.28 0.42-0.51 0.87-0.7 1.33l-0.56 1.54-0.1 0.36c-0.12 0.4-0.18 0.84-0.18 1.27v0.39c0 0.24 0.04 0.47 0.11 0.7l0.08 0.22c0.06 0.18 0.16 0.35 0.3 0.49l0.05 0.05c0.1 0.1 0.23 0.18 0.37 0.23 0.14 0.04 0.28 0.06 0.43 0.04l0.36-0.06c0.26-0.03 0.52-0.11 0.76-0.23l0.44-0.22c0.4-0.2 0.77-0.45 1.11-0.74l0.47-0.4 0.03-0.04c0.73-0.81 1.37-1.69 1.93-2.62 0.37-0.65 0.69-1.33 0.95-2.04l0.17-0.48 0.28-0.98Z\"/>",
        "    </group>",
        "</vector>"
      ],
      "android/app/src/main/res/drawable-v24/ic_launcher_background.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
        "<vector xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    android:width=\"108dp\"",
        "    android:height=\"108dp\"",
        "    android:viewportWidth=\"108\"",
        "    android:viewportHeight=\"108\">",
        "    <path",
        "        android:fillColor=\"@color/colorBackground\"",
        "        android:pathData=\"M0,0h108v108h-108z\" />",
        "</vector>"
      ],
      "android/app/src/main/res/values-night-v31/themes.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
        "<resources>",
        "  <!--",
        "    Having themes.xml for night-v31 because of the priority order of the resource qualifiers.",
        "    -->",
        "  <style name=\"Theme.LibrePods.AppWidgetContainerParent\" parent=\"@android:style/Theme.DeviceDefault.DayNight\">",
        "    <item name=\"appWidgetRadius\">@android:dimen/system_app_widget_background_radius</item>",
        "    <item name=\"appWidgetInnerRadius\">@android:dimen/system_app_widget_inner_radius</item>",
        "  </style>",
        "</resources>"
      ],
      "android/app/src/main/res/drawable-v21/app_widget_background.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?><!--",
        "Background for widgets to make the rounded corners based on the",
        "appWidgetRadius attribute value",
        "-->",
        "<shape xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    android:shape=\"rectangle\">",
        "",
        "    <corners android:radius=\"?attr/appWidgetRadius\" />",
        "    <solid android:color=\"?android:attr/colorBackground\" />",
        "</shape>"
      ],
      "android/app/src/main/res/drawable-v21/app_widget_inner_view_background.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?><!--",
        "Background for views inside widgets to make the rounded corners based on the",
        "appWidgetInnerRadius attribute value",
        "-->",
        "<shape xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    android:shape=\"rectangle\">",
        "    <corners android:radius=\"?attr/appWidgetInnerRadius\" />",
        "    <solid android:color=\"?android:attr/colorAccent\" />",
        "</shape>"
      ],
      "android/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
        "<adaptive-icon xmlns:android=\"http://schemas.android.com/apk/res/android\">",
        "    <background android:drawable=\"@drawable/ic_launcher_background\"/>",
        "    <foreground android:drawable=\"@drawable/ic_launcher_foreground\"/>",
        "    <monochrome android:drawable=\"@drawable/ic_launcher_foreground\"/>",
        "</adaptive-icon>"
      ],
      "android/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
        "<adaptive-icon xmlns:android=\"http://schemas.android.com/apk/res/android\">",
        "    <background android:drawable=\"@drawable/ic_launcher_background\"/>",
        "    <foreground android:drawable=\"@drawable/ic_launcher_foreground\"/>",
        "    <monochrome android:drawable=\"@drawable/ic_launcher_foreground\"/>",
        "</adaptive-icon>"
      ],
      "android/app/src/main/res/values/attrs.xml": [
        "<resources>",
        "  <declare-styleable name=\"AppWidgetAttrs\">",
        "    <attr name=\"appWidgetPadding\" format=\"dimension\" />",
        "    <attr name=\"appWidgetInnerRadius\" format=\"dimension\" />",
        "    <attr name=\"appWidgetRadius\" format=\"dimension\" />",
        "  </declare-styleable>",
        "</resources>"
      ],
      "android/app/src/main/res/values/dimens.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
        "<resources>",
        "",
        "  <!--",
        "Refer to App Widget Documentation for margin information",
        "http://developer.android.com/guide/topics/appwidgets/index.html#CreatingLayout",
        "    -->",
        "  <dimen name=\"widget_margin\">0dp</dimen>",
        "",
        "</resources>"
      ],
      "android/app/src/main/res/values/themes.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
        "<resources xmlns:tools=\"http://schemas.android.com/tools\">",
        "",
        "    <!-- Base application theme. -->",
        "    <style name=\"Theme.LibrePods\" parent=\"Theme.AppCompat.DayNight\">",
        "        <!-- Customize your light theme here. -->",
        "        <!-- <item name=\"colorPrimary\">@color/my_light_primary</item> -->",
        "         <item name=\"android:windowLightStatusBar\" >true</item>",
        "         <item name=\"android:windowLightNavigationBar\" >true</item>",
        "         <item name=\"android:statusBarColor\">@android:color/transparent</item>",
        "         <item name=\"android:navigationBarColor\">@android:color/transparent</item>",
        "    </style>",
        "",
        "    <!-- Theme for the transparent dialog activity -->",
        "    <style name=\"Theme.TransparentDialog\" parent=\"Theme.AppCompat.Dialog\">",
        "        <item name=\"android:windowIsTranslucent\">true</item>",
        "        <item name=\"android:windowBackground\">@android:color/transparent</item>",
        "        <item name=\"android:windowContentOverlay\">@null</item>",
        "        <item name=\"android:windowNoTitle\">true</item>",
        "        <item name=\"android:windowIsFloating\">false</item> <!-- Set to false for full width -->",
        "        <item name=\"android:backgroundDimEnabled\">true</item> <!-- Dim background -->",
        "        <item name=\"android:windowAnimationStyle\">@android:style/Animation.Translucent</item> <!-- Optional: Add animation -->",
        "        <item name=\"android:statusBarColor\">@android:color/transparent</item>",
        "        <item name=\"android:navigationBarColor\">@android:color/transparent</item>",
        "        <!-- Request blur behind (Android 12+) -->",
        "        <item name=\"android:windowBlurBehindEnabled\" tools:targetApi=\"s\">true</item>",
        "        <item name=\"android:windowBlurBehindRadius\" tools:targetApi=\"s\">32dp</item> <!-- Optional: Adjust radius -->",
        "    </style>",
        "",
        "  <style name=\"Theme.LibrePods.AppWidgetContainerParent\" parent=\"@android:style/Theme.DeviceDefault\">",
        "    <item name=\"appWidgetRadius\">32dp</item>",
        "    <item name=\"appWidgetPadding\">0dp</item>",
        "  </style>",
        "",
        "  <style name=\"Theme.LibrePods.AppWidgetContainer\" parent=\"Theme.LibrePods.AppWidgetContainerParent\">",
        "    <item name=\"appWidgetPadding\">0dp</item>",
        "  </style>",
        "</resources>"
      ],
      "android/app/src/main/res/values/styles.xml": [
        "<resources>",
        "",
        "  <style name=\"Widget.LibrePods.AppWidget.Container\" parent=\"android:Widget\">",
        "    <item name=\"android:id\">@android:id/background</item>",
        "    <item name=\"android:background\">?android:attr/colorBackground</item>",
        "  </style>",
        "",
        "  <style name=\"Widget.LibrePods.AppWidget.InnerView\" parent=\"android:Widget\">",
        "    <item name=\"android:background\">?android:attr/colorBackground</item>",
        "    <item name=\"android:textColor\">?android:attr/textColorPrimary</item>",
        "  </style>",
        "</resources>"
      ],
      "android/app/src/main/res/values/strings.xml": [
        "<resources>",
        "    <string name=\"app_name\">LibrePods</string>",
        "    <string name=\"app_hello\">Hello from LibrePods Android!</string>",
        "</resources>"
      ],
      "android/app/src/main/res/values/colors.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
        "<resources>",
        "    <color name=\"black\">#FF000000</color>",
        "    <color name=\"white\">#FFFFFFFF</color>",
        "    <color name=\"popup_background\">#FFFFFF</color>",
        "    <color name=\"popup_text\">@color/black</color>",
        "    <color name=\"widget_background\">#87FFFFFF</color>",
        "    <color name=\"widget_text\">@color/black</color>",
        "    <color name=\"light_blue_50\">#FFE1F5FE</color>",
        "    <color name=\"light_blue_200\">#FF81D4FA</color>",
        "    <color name=\"light_blue_600\">#FF039BE5</color>",
        "    <color name=\"light_blue_900\">#FF01579B</color>",
        "    <color name=\"colorBackground\">#FFFFFF</color>",
        "</resources>"
      ],
      "android/app/src/main/res/drawable/ic_launcher_foreground.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
        "<vector xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    android:width=\"108dp\"",
        "    android:height=\"108dp\"",
        "    android:viewportWidth=\"108\"",
        "    android:viewportHeight=\"108\">",
        "    <group android:scaleX=\"0.65\" android:scaleY=\"0.65\" android:translateX=\"19\" android:translateY=\"19\">",
        "        <path",
        "            android:fillColor=\"#FFFFFF\"",
        "            android:pathData=\"M54,8a8,8 0,0 1,8 8v20a8,8 0,0 1,-8 8h-8v8h-8v-8h-8a8,8 0,0 1,-8 -8V16a8,8 0,0 1,8 -8z\"/>",
        "        <path",
        "            android:fillColor=\"#000000\"",
        "            android:fillAlpha=\"0.1\"",
        "            android:pathData=\"M54,8c4.4,0 8,3.6 8,8v20c0,4.4 -3.6,8 -8,8h-8v8h-4V8h12z\"/>",
        "    </group>",
        "</vector>"
      ],
      "android/app/src/main/res/drawable/ic_save.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
        "<vector xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    android:width=\"24dp\"",
        "    android:height=\"24dp\"",
        "    android:viewportWidth=\"24\"",
        "    android:viewportHeight=\"24\">",
        "    <path",
        "        android:fillColor=\"#FFFFFF\"",
        "        android:pathData=\"M17,3L5,3c-1.11,0 -2,0.9 -2,2v14c0,1.1 0.89,2 2,2h14c1.1,0 2,-0.9 2,-2L21,7l-4,-4zM19,19L5,19L5,5h11.17L19,7.83L19,19zM12,12c-1.66,0 -3,1.34 -3,3s1.34,3 3,3 3,-1.34 3,-3 -1.34,-3 -3,-3zM6,6h9v4L6,10z\" />",
        "</vector>"
      ],
      "android/app/src/main/res/drawable/popup_shape.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
        "<shape",
        "    xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    android:shape=\"rectangle\">",
        "",
        "    <solid",
        "        android:color=\"@color/popup_background\">",
        "    </solid>",
        "",
        "    <padding",
        "        android:bottom=\"56dp\"",
        "        android:top=\"16dp\">",
        "    </padding>",
        "",
        "    <corners",
        "        android:radius=\"56dp\">",
        "    </corners>",
        "",
        "</shape>"
      ],
      "android/app/src/main/res/drawable/island_battery_progress.xml": [
        "<rotate",
        "    xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    android:fromDegrees=\"270\"",
        "    android:toDegrees=\"270\">",
        "    <shape",
        "        android:shape=\"ring\"",
        "        android:innerRadiusRatio=\"3.0\"",
        "        android:thickness=\"4dp\" >",
        "        <solid android:color=\"#1ceb72\" />",
        "    </shape>",
        "</rotate>"
      ],
      "android/app/src/main/res/drawable/close.xml": [
        "<vector xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    android:width=\"24dp\"",
        "    android:height=\"24dp\"",
        "    android:viewportWidth=\"960\"",
        "    android:viewportHeight=\"960\">",
        "  <path",
        "      android:fillColor=\"@android:color/white\"",
        "      android:pathData=\"M256,760L200,704L424,480L200,256L256,200L480,424L704,200L760,256L536,480L760,704L704,760L480,536L256,760Z\"/>",
        "</vector>"
      ],
      "android/app/src/main/res/drawable/ic_bluetooth.xml": [
        "<vector xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    android:width=\"24dp\"",
        "    android:height=\"24dp\"",
        "    android:viewportWidth=\"960\"",
        "    android:viewportHeight=\"960\">",
        "  <path",
        "      android:pathData=\"M440,880v-304L256,760l-56,-56 224,-224 -224,-224 56,-56 184,184v-304h40l228,228 -172,172 172,172L480,880h-40ZM520,384 L596,308 520,234v150ZM520,726 L596,652 520,576v150Z\"",
        "      android:fillColor=\"#e8eaed\"/>",
        "</vector>"
      ],
      "android/app/src/main/res/drawable/airpods_pro_left_notification.xml": [
        "<vector xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    android:width=\"94.19dp\"",
        "    android:height=\"123.31dp\"",
        "    android:viewportWidth=\"94.19\"",
        "    android:viewportHeight=\"123.31\">",
        "  <path",
        "      android:fillColor=\"#FF000000\"",
        "      android:pathData=\"M0,0h94.19v123.31h-94.19z\"",
        "      android:strokeAlpha=\"0\"",
        "      android:fillAlpha=\"0\"/>",
        "  <path",
        "      android:pathData=\"M46.81,73.29L46.81,111.06C46.81,114.94 44.25,116.94 40.38,116.94L35.5,116.94C31.63,116.94 29.06,114.94 29.06,111.06L29.06,69.82C33.68,71.55 39.25,72.79 46.81,73.29Z\"",
        "      android:fillColor=\"#ffffff\"",
        "      android:fillAlpha=\"0.85\"/>",
        "  <path",
        "      android:pathData=\"M62,22.63C62.94,23.8 64.28,25.84 65.55,28.29C51.19,30.59 40.75,43.46 40.75,56.13C40.75,60.05 41.47,63.51 42.75,66.49C34.56,65.53 29.44,63.52 24.75,60.88C14.44,54.94 6.31,45.31 6.31,31.5C6.31,15.56 17.56,6.5 31.38,6.38C42.06,6.25 54,11.5 62,22.63ZM19.44,21.25C18.31,22.5 18.38,24.38 19.69,25.44L29,33.19C30.19,34.25 32.13,34.13 33.19,32.81C34.25,31.5 34.13,29.63 32.75,28.56L23.63,20.81C22.31,19.75 20.44,19.94 19.44,21.25Z\"",
        "      android:fillColor=\"#ffffff\"",
        "      android:fillAlpha=\"0.85\"/>",
        "  <path",
        "      android:pathData=\"M65.13,74.25C76.31,74.25 87.81,65.38 87.81,51.81C87.81,42.75 81.44,33.88 70.19,33.88C57,33.88 46.81,45.31 46.81,56.13C46.81,68.25 55.38,74.25 65.13,74.25ZM68.19,64.75C66.44,63.25 67.44,60.25 71,55.69C74.69,51.19 77.63,49.69 79.5,51.31C81.19,52.81 80.25,55.88 76.69,60.31C72.94,64.75 70,66.31 68.19,64.75Z\"",
        "      android:fillColor=\"#ffffff\"",
        "      android:fillAlpha=\"0.85\"/>",
        "</vector>"
      ],
      "android/app/src/main/res/drawable/circular_progress_bar.xml": [
        "<rotate",
        "    xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    android:fromDegrees=\"270\"",
        "    android:toDegrees=\"270\">",
        "    <shape",
        "        android:shape=\"ring\"",
        "        android:innerRadiusRatio=\"3.0\"",
        "        android:thickness=\"6dp\"",
        "        android:useLevel=\"true\">",
        "        <solid android:color=\"#00D85B\" />",
        "        <corners android:radius=\"10dp\" />",
        "    </shape>",
        "</rotate>"
      ],
      "android/app/src/main/res/drawable/progress_bar_background.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
        "<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">",
        "    <item>",
        "        <shape",
        "            android:shape=\"ring\"",
        "            android:innerRadiusRatio=\"3.0\"",
        "            android:thickness=\"6dp\">",
        "            <solid android:color=\"#49474E\" />",
        "        </shape>",
        "    </item>",
        "</selector>"
      ],
      "android/app/src/main/res/drawable/airpods_pro_right_notification.xml": [
        "<vector xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    android:width=\"94.19dp\"",
        "    android:height=\"123.31dp\"",
        "    android:viewportWidth=\"94.19\"",
        "    android:viewportHeight=\"123.31\">",
        "  <path",
        "      android:fillColor=\"#FF000000\"",
        "      android:pathData=\"M0,0h94.19v123.31h-94.19z\"",
        "      android:strokeAlpha=\"0\"",
        "      android:fillAlpha=\"0\"/>",
        "  <path",
        "      android:pathData=\"M65.06,111.06C65.06,114.94 62.56,116.94 58.69,116.94L53.81,116.94C49.88,116.94 47.31,114.94 47.31,111.06L47.31,73.29C54.87,72.79 60.44,71.56 65.06,69.84Z\"",
        "      android:fillColor=\"#ffffff\"",
        "      android:fillAlpha=\"0.85\"/>",
        "  <path",
        "      android:pathData=\"M87.81,31.5C87.81,45.31 79.69,54.94 69.44,60.88C64.74,63.52 59.6,65.54 51.37,66.5C52.65,63.51 53.38,60.05 53.38,56.13C53.38,43.47 43,30.6 28.61,28.29C29.89,25.84 31.25,23.8 32.19,22.63C40.19,11.5 52.06,6.25 62.81,6.38C76.56,6.5 87.81,15.56 87.81,31.5ZM70.56,20.81L61.38,28.56C60.06,29.63 59.94,31.5 61,32.81C62.06,34.13 63.94,34.25 65.19,33.19L74.44,25.44C75.75,24.38 75.81,22.5 74.75,21.25C73.75,19.94 71.81,19.75 70.56,20.81Z\"",
        "      android:fillColor=\"#ffffff\"",
        "      android:fillAlpha=\"0.85\"/>",
        "  <path",
        "      android:pathData=\"M29.06,74.25C38.81,74.25 47.38,68.25 47.38,56.13C47.38,45.31 37.19,33.88 23.94,33.88C12.75,33.88 6.31,42.75 6.31,51.81C6.31,65.38 17.88,74.25 29.06,74.25ZM26,64.75C24.19,66.31 21.25,64.75 17.5,60.31C13.88,55.88 12.94,52.81 14.69,51.31C16.56,49.69 19.44,51.19 23.19,55.69C26.75,60.25 27.75,63.25 26,64.75Z\"",
        "      android:fillColor=\"#ffffff\"",
        "      android:fillAlpha=\"0.85\"/>",
        "</vector>"
      ],
      "android/app/src/main/res/drawable/widget_button_shape_start.xml": [
        "<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">",
        "    <item android:state_pressed=\"true\">",
        "        <shape android:shape=\"rectangle\">",
        "            <solid android:color=\"#3D3B40\" />",
        "            <corners android:topLeftRadius=\"24dp\" android:topRightRadius=\"4dp\" android:bottomLeftRadius=\"24dp\" android:bottomRightRadius=\"4dp\" />",
        "            <padding android:left=\"8dp\" android:top=\"8dp\" android:right=\"8dp\" android:bottom=\"8dp\" />",
        "        </shape>",
        "    </item>",
        "    <item>",
        "        <shape android:shape=\"rectangle\">",
        "            <solid android:color=\"#49474E\" />",
        "            <corners android:topLeftRadius=\"24dp\" android:topRightRadius=\"4dp\" android:bottomLeftRadius=\"24dp\" android:bottomRightRadius=\"4dp\" />",
        "            <padding android:left=\"8dp\" android:top=\"8dp\" android:right=\"8dp\" android:bottom=\"8dp\" />",
        "        </shape>",
        "    </item>",
        "</selector>"
      ],
      "android/app/src/main/res/drawable/widget_button_checked_shape_start.xml": [
        "<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">",
        "    <item>",
        "        <shape android:shape=\"rectangle\">",
        "            <solid android:color=\"#2C2A2F\" />",
        "            <corners android:topLeftRadius=\"24dp\" android:topRightRadius=\"4dp\" android:bottomLeftRadius=\"24dp\" android:bottomRightRadius=\"4dp\" />",
        "            <padding android:bottom=\"8dp\" android:left=\"8dp\" android:right=\"8dp\" android:top=\"8dp\" />",
        "        </shape>",
        "    </item>",
        "</selector>"
      ],
      "android/app/src/main/res/drawable/island_battery_background.xml": [
        "<rotate",
        "    xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    android:fromDegrees=\"270\"",
        "    android:toDegrees=\"270\">",
        "    <shape",
        "        android:shape=\"ring\"",
        "        android:innerRadiusRatio=\"3.0\"",
        "        android:thickness=\"4dp\"",
        "        android:useLevel=\"true\">",
        "        <solid android:color=\"#0f4524\" />",
        "    </shape>",
        "</rotate>"
      ],
      "android/app/src/main/res/drawable/widget_button_shape_end.xml": [
        "<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">",
        "    <item android:state_pressed=\"true\">",
        "        <shape android:shape=\"rectangle\">",
        "            <solid android:color=\"#3D3B40\" />",
        "            <corners android:topLeftRadius=\"4dp\" android:topRightRadius=\"24dp\" android:bottomLeftRadius=\"4dp\" android:bottomRightRadius=\"24dp\" />",
        "            <padding android:left=\"8dp\" android:top=\"8dp\" android:right=\"8dp\" android:bottom=\"8dp\" />",
        "        </shape>",
        "    </item>",
        "    <item>",
        "        <shape android:shape=\"rectangle\">",
        "            <solid android:color=\"#49474E\" />",
        "            <corners android:topLeftRadius=\"4dp\" android:topRightRadius=\"24dp\" android:bottomLeftRadius=\"4dp\" android:bottomRightRadius=\"24dp\" />",
        "            <padding android:left=\"8dp\" android:top=\"8dp\" android:right=\"8dp\" android:bottom=\"8dp\" />",
        "        </shape>",
        "    </item>",
        "</selector>"
      ],
      "android/app/src/main/res/drawable/airpods.xml": [
        "<vector xmlns:android=\"http://schemas.android.com/apk/res/android\" android:height=\"43dp\" android:viewportHeight=\"607.69\" android:viewportWidth=\"902.34\" android:width=\"63.849365dp\">",
        "    <path android:fillAlpha=\"0\" android:fillColor=\"#FF000000\" android:pathData=\"M0,0h902.34v607.69h-902.34z\" android:strokeAlpha=\"0\"/>",
        "",
        "    <path android:fillAlpha=\"0.85\" android:fillColor=\"#ffffff\" android:pathData=\"M315.92,550.31C315.92,567.88 304.69,577.41 286.13,577.41L261.48,577.41C242.92,577.41 231.45,567.88 231.45,550.31L231.45,358.73C267.25,355.98 293.73,349.94 315.92,341.64ZM670.9,358.73L670.9,550.31C670.9,567.88 659.42,577.41 640.87,577.41L616.21,577.41C597.66,577.41 586.43,567.88 586.43,550.31L586.43,341.64C608.62,349.94 635.09,355.98 670.9,358.73Z\"/>",
        "",
        "    <path android:fillAlpha=\"0.85\" android:fillColor=\"#ffffff\" android:pathData=\"M429.2,153.09C429.2,221.45 388.18,270.28 335.2,299.57C312.69,312 288.17,321.38 249.56,326.11C255.64,311.65 259.03,294.95 259.03,276.14C259.03,213.57 207.98,151 137.53,139.93C143.33,128.37 149.48,118.78 153.81,113.29C192.14,56.65 252.44,29.55 306.64,30.29C375.24,31.02 429.2,76.43 429.2,153.09ZM748.53,113.29C752.86,118.78 759.01,128.37 764.82,139.93C694.36,151 643.31,213.57 643.31,276.14C643.31,294.95 646.71,311.65 652.78,326.11C614.17,321.38 589.66,312 567.14,299.57C514.16,270.28 473.14,221.45 473.14,153.09C473.14,76.43 527.1,31.02 595.7,30.29C649.9,29.55 710.21,56.65 748.53,113.29ZM346.19,100.11L301.51,137.71C295.41,142.84 294.68,151.62 299.56,157.48C304.69,163.83 313.72,164.32 319.34,159.44L364.75,121.84C370.85,116.71 371.09,107.92 365.97,102.06C361.33,95.72 352.3,94.98 346.19,100.11ZM536.38,102.06C531.25,107.92 531.49,116.71 537.6,121.84L583.01,159.44C588.62,164.32 597.66,163.83 602.78,157.48C607.67,151.62 606.93,142.84 600.83,137.71L556.15,100.11C550.05,94.98 541.02,95.72 536.38,102.06Z\"/>",
        "",
        "    <path android:fillAlpha=\"0.85\" android:fillColor=\"#ffffff\" android:pathData=\"M140.87,364.76C189.45,364.76 229.98,334.48 229.98,276.14C229.98,222.43 180.18,167.25 114.99,167.25C61.28,167.25 29.05,209.24 29.05,254.65C29.05,320.08 84.72,364.76 140.87,364.76ZM125.98,319.59C117.19,327.16 102.29,319.35 84.23,297.38C66.41,275.89 61.52,260.51 70.07,252.94C79.1,245.37 93.75,252.94 111.82,274.92C129.4,297.13 134.52,312.27 125.98,319.59ZM761.47,364.76C817.63,364.76 873.29,320.08 873.29,254.65C873.29,209.24 841.06,167.25 787.35,167.25C722.17,167.25 672.36,222.43 672.36,276.14C672.36,334.48 712.89,364.76 761.47,364.76ZM776.37,319.59C767.82,312.27 772.95,297.13 790.53,274.92C808.59,252.94 823.24,245.37 832.28,252.94C840.82,260.51 835.94,275.89 818.11,297.38C800.29,319.35 785.16,327.16 776.37,319.59Z\"/>",
        "",
        "</vector>"
      ],
      "android/app/src/main/res/drawable/airpods_pro_case_notification.xml": [
        "<vector xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    android:width=\"141.5dp\"",
        "    android:height=\"109.06dp\"",
        "    android:viewportWidth=\"141.5\"",
        "    android:viewportHeight=\"109.06\">",
        "  <path",
        "      android:fillColor=\"#FF000000\"",
        "      android:pathData=\"M0,0h141.5v109.06h-141.5z\"",
        "      android:strokeAlpha=\"0\"",
        "      android:fillAlpha=\"0\"/>",
        "  <path",
        "      android:pathData=\"M37.88,109L103.63,109C129.19,109 141.5,96.75 141.5,71.31L141.5,41.63L102.81,41.63C101.75,44.44 99.13,46.25 95.81,46.25L45.75,46.25C42.5,46.25 39.75,44.44 38.75,41.63L0,41.63L0,71.31C0,96.75 12.38,109 37.88,109ZM70.75,70.06C67.63,70.13 65.06,67.5 65.06,64.44C65.06,61.31 67.63,58.69 70.75,58.69C73.88,58.69 76.5,61.31 76.5,64.44C76.5,67.38 73.88,70 70.75,70.06ZM0,35.94L38.63,35.94C39.63,33.06 42.38,31.31 45.63,31.31L95.75,31.31C99,31.31 101.69,33.06 102.69,35.94L141.31,35.94L141.31,33.94C141.31,11.13 127.81,0 103.44,0L37.88,0C13.56,0 0,11.13 0,33.94Z\"",
        "      android:fillColor=\"#ffffff\"",
        "      android:fillAlpha=\"0.85\"/>",
        "</vector>"
      ],
      "android/app/src/main/res/drawable/popup_button_shape.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
        "<shape",
        "    xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    android:shape=\"rectangle\">",
        "",
        "    <solid",
        "        android:color=\"#902E2E2E\">",
        "    </solid>",
        "",
        "    <padding",
        "        android:left=\"1dp\"",
        "        android:top=\"1dp\"",
        "        android:right=\"1dp\"",
        "        android:bottom=\"1dp\" />",
        "",
        "    <corners",
        "        android:radius=\"5000dp\">",
        "    </corners>",
        "",
        "</shape>"
      ],
      "android/app/src/main/res/drawable/island_background.xml": [
        "<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">",
        "    <item>",
        "        <shape android:shape=\"rectangle\">",
        "            <solid android:color=\"#000000\"/>",
        "            <corners android:radius=\"56dp\"/>",
        "            <padding android:left=\"4dp\" android:top=\"4dp\" android:right=\"4dp\" android:bottom=\"4dp\"/>",
        "        </shape>",
        "    </item>",
        "</layer-list>"
      ],
      "android/app/src/main/res/drawable/ic_layers.xml": [
        "<vector xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    android:width=\"24dp\"",
        "    android:height=\"24dp\"",
        "    android:viewportWidth=\"960\"",
        "    android:viewportHeight=\"960\">",
        "  <path",
        "      android:pathData=\"M480,842 L120,562l66,-50 294,228 294,-228 66,50 -360,280ZM480,640L120,360l360,-280 360,280 -360,280ZM480,360ZM480,538 L710,360 480,182 250,360 480,538Z\"",
        "      android:fillColor=\"#e8eaed\"/>",
        "</vector>"
      ],
      "android/app/src/main/res/drawable/widget_button_shape_middle.xml": [
        "<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">",
        "    <item android:state_pressed=\"true\">",
        "        <shape android:shape=\"rectangle\">",
        "            <solid android:color=\"#3D3B40\" />",
        "            <corners android:radius=\"4dp\" />",
        "            <padding android:left=\"8dp\" android:top=\"8dp\" android:right=\"8dp\" android:bottom=\"8dp\" />",
        "        </shape>",
        "    </item>",
        "    <item>",
        "        <shape android:shape=\"rectangle\">",
        "            <solid android:color=\"#49474E\" />",
        "            <corners android:radius=\"4dp\" />",
        "            <padding android:left=\"8dp\" android:top=\"8dp\" android:right=\"8dp\" android:bottom=\"8dp\" />",
        "        </shape>",
        "    </item>",
        "</selector>"
      ],
      "android/app/src/main/res/drawable/settings_voice.xml": [
        "<vector xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    android:width=\"24dp\"",
        "    android:height=\"24dp\"",
        "    android:viewportWidth=\"960\"",
        "    android:viewportHeight=\"960\"",
        "    android:tint=\"?attr/colorControlNormal\">",
        "  <path",
        "      android:fillColor=\"@android:color/white\"",
        "      android:pathData=\"M320,960Q303,960 291.5,948.5Q280,937 280,920Q280,903 291.5,891.5Q303,880 320,880Q337,880 348.5,891.5Q360,903 360,920Q360,937 348.5,948.5Q337,960 320,960ZM480,960Q463,960 451.5,948.5Q440,937 440,920Q440,903 451.5,891.5Q463,880 480,880Q497,880 508.5,891.5Q520,903 520,920Q520,937 508.5,948.5Q497,960 480,960ZM640,960Q623,960 611.5,948.5Q600,937 600,920Q600,903 611.5,891.5Q623,880 640,880Q657,880 668.5,891.5Q680,903 680,920Q680,937 668.5,948.5Q657,960 640,960ZM480,560Q430,560 395,525Q360,490 360,440L360,200Q360,150 395,115Q430,80 480,80Q530,80 565,115Q600,150 600,200L600,440Q600,490 565,525Q530,560 480,560ZM440,840L440,716Q336,702 268,623.5Q200,545 200,440L280,440Q280,523 338.5,581.5Q397,640 480,640Q563,640 621.5,581.5Q680,523 680,440L760,440Q760,545 692,623.5Q624,702 520,716L520,840L440,840Z\"/>",
        "</vector>"
      ],
      "android/app/src/main/res/drawable/widget_button_checked_shape_end.xml": [
        "<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">",
        "    <item>",
        "        <shape android:shape=\"rectangle\">",
        "            <solid android:color=\"#2C2A2F\" />",
        "            <corners android:topLeftRadius=\"4dp\" android:topRightRadius=\"24dp\" android:bottomLeftRadius=\"4dp\" android:bottomRightRadius=\"24dp\" />",
        "            <padding android:bottom=\"8dp\" android:left=\"8dp\" android:right=\"8dp\" android:top=\"8dp\" />",
        "        </shape>",
        "    </item>",
        "</selector>"
      ],
      "android/app/src/main/res/drawable/widget_button_checked_shape_middle.xml": [
        "<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">",
        "    <item>",
        "        <shape android:shape=\"rectangle\">",
        "            <solid android:color=\"#2C2A2F\" />",
        "            <corners android:radius=\"4dp\" />",
        "            <padding android:bottom=\"8dp\" android:left=\"8dp\" android:right=\"8dp\" android:top=\"8dp\" />",
        "        </shape>",
        "    </item>",
        "</selector>"
      ],
      "android/app/src/main/res/drawable/ic_launcher_background.xml": [
        "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
        "<shape xmlns:android=\"http://schemas.android.com/apk/res/android\" android:shape=\"rectangle\">",
        "    <solid android:color=\"#3DDC84\"/>",
        "</shape>"
      ],
      "android/app/src/main/res/drawable/conversational_awareness.xml": [
        "<vector xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    android:width=\"154.38dp\"",
        "    android:height=\"148.1dp\"",
        "    android:viewportWidth=\"154.38\"",
        "    android:viewportHeight=\"148.1\">",
        "  <path",
        "      android:fillColor=\"#FF000000\"",
        "      android:pathData=\"M0,0h154.38v148.1h-154.38z\"",
        "      android:strokeAlpha=\"0\"",
        "      android:fillAlpha=\"0\"/>",
        "  <path",
        "      android:pathData=\"M134.81,86.77C137.13,88.33 140,87.77 141.69,85.39C149.69,74.39 154.38,59.27 154.38,43.83C154.38,28.39 149.75,13.14 141.69,2.27C140,-0.17 137.13,-0.67 134.81,0.89C132.5,2.46 132.13,5.39 133.94,7.96C140.81,17.58 144.69,30.52 144.69,43.83C144.69,57.14 140.69,69.96 133.94,79.71C132.19,82.27 132.5,85.21 134.81,86.77Z\"",
        "      android:fillColor=\"#ffffff\"",
        "      android:fillAlpha=\"0.85\"/>",
        "  <path",
        "      android:pathData=\"M111.69,70.46C113.75,71.89 116.69,71.46 118.38,69.02C123.19,62.71 126.06,53.39 126.06,43.83C126.06,34.27 123.19,25.02 118.38,18.58C116.69,16.21 113.75,15.71 111.69,17.21C109.13,18.96 108.75,22.08 110.69,24.64C114.31,29.64 116.38,36.58 116.38,43.83C116.38,51.08 114.25,57.96 110.69,63.02C108.81,65.64 109.13,68.64 111.69,70.46Z\"",
        "      android:fillColor=\"#ffffff\"",
        "      android:fillAlpha=\"0.85\"/>",
        "  <path",
        "      android:pathData=\"M26.13,130.21L104.63,130.21C114.44,130.21 117.94,127.39 117.94,121.89C117.94,105.77 97.75,83.52 65.38,83.52C32.94,83.52 12.75,105.77 12.75,121.89C12.75,127.39 16.25,130.21 26.13,130.21ZM65.38,72.33C78.81,72.33 90.38,60.33 90.38,44.71C90.38,29.27 78.75,17.83 65.38,17.83C52,17.83 40.38,29.52 40.38,44.83C40.38,60.33 52,72.33 65.38,72.33Z\"",
        "      android:fillColor=\"#ffffff\"",
        "      android:fillAlpha=\"0.85\"/>",
        "</vector>"
      ],
      "android/app/src/main/res/drawable/widget_background.xml": [
        "<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">",
        "    <item>",
        "        <shape android:shape=\"rectangle\">",
        "            <padding android:bottom=\"0dp\" android:left=\"0dp\" android:right=\"0dp\" android:top=\"0dp\" />",
        "            <solid android:color=\"#222222\" />",
        "            <corners android:radius=\"32dp\" />",
        "        </shape>",
        "    </item>",
        "</layer-list>"
      ],
      "android/app/src/main/res/drawable/smartphone.xml": [
        "<vector xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    android:width=\"80.31dp\"",
        "    android:height=\"132.44dp\"",
        "    android:viewportWidth=\"80.31\"",
        "    android:viewportHeight=\"132.44\">",
        "  <path",
        "      android:fillColor=\"#FF000000\"",
        "      android:pathData=\"M0,0h80.31v132.44h-80.31z\"",
        "      android:strokeAlpha=\"0\"",
        "      android:fillAlpha=\"0\"/>",
        "  <path",
        "      android:pathData=\"M12.44,114.31C11.06,114.31 10.06,113.31 10.06,111.94L10.06,12.44C10.06,11 11,10.06 12.44,10.06L67.88,10.06C69.31,10.06 70.25,11 70.25,12.44L70.25,111.94C70.25,113.31 69.31,114.31 67.88,114.31Z\"",
        "      android:fillColor=\"#ffffff\"",
        "      android:fillAlpha=\"0.2125\"/>",
        "  <path",
        "      android:pathData=\"M7.75,132.31L72.56,132.31C77.13,132.31 80.31,129.13 80.31,124.56L80.31,7.75C80.31,3.19 77.13,0 72.56,0L7.75,0C3.19,0 0,3.19 0,7.75L0,124.56C0,129.13 3.25,132.31 7.75,132.31ZM12.44,114.31C11.06,114.31 10.06,113.31 10.06,111.94L10.06,12.44C10.06,11 11,10.06 12.44,10.06L67.88,10.06C69.31,10.06 70.25,11 70.25,12.44L70.25,111.94C70.25,113.31 69.31,114.31 67.88,114.31Z\"",
        "      android:fillColor=\"#ffffff\"",
        "      android:fillAlpha=\"0.85\"/>",
        "</vector>"
      ],
      "android/app/src/main/res/drawable/ic_power.xml": [
        "<vector xmlns:android=\"http://schemas.android.com/apk/res/android\"",
        "    android:width=\"88.06dp\"",
        "    android:height=\"140.66dp\"",
        "    android:viewportWidth=\"88.06\"",
        "    android:viewportHeight=\"140.66\">",
        "  <path",
        "      android:fillColor=\"#FF000000\"",
        "      android:pathData=\"M0,0h88.06v140.66h-88.06z\"",
        "      android:strokeAlpha=\"0\"",
        "      android:fillAlpha=\"0\"/>",
        "  <path",
        "      android:pathData=\"M0,77.55C0,79.99 1.88,81.8 4.5,81.8L39.81,81.8L21.19,132.42C18.75,138.86 25.44,142.3 29.63,137.05L86.44,66.05C87.5,64.74 88.06,63.49 88.06,62.05C88.06,59.67 86.19,57.8 83.56,57.8L48.25,57.8L66.88,7.17C69.31,0.74 62.63,-2.7 58.44,2.61L1.63,73.55C0.56,74.92 0,76.17 0,77.55Z\"",
        "      android:fillColor=\"#ffffff\"",
        "      android:fillAlpha=\"0.85\"/>",
        "</vector>"
      ],
      "android/app/src/main/java/com/yourco/airpods/L2capCocManager.kt": [
        "package com.yourco.airpods",
        "",
        "import android.bluetooth.*",
        "import android.os.Build",
        "import android.util.Log",
        "import kotlinx.coroutines.*",
        "import java.io.InputStream",
        "import java.io.OutputStream",
        "",
        "/**",
        " * Minimal BLE L2CAP CoC helper for API 29+.",
        " * - Server: listenUsingL2capChannel() \u2192 accept()",
        " * - Client: device.createL2capChannel(psm)",
        " * Falls back to GATT when unavailable.",
        " */",
        "class L2capCocManager {",
        "  data class Channel(val socket: BluetoothSocket, val input: InputStream, val output: OutputStream)",
        "",
        "  fun isSupported(): Boolean = Build.VERSION.SDK_INT >= 29",
        "",
        "  /** Start a server; returns the assigned PSM. Accept runs on a coroutine and invokes onClient */",
        "  fun startServer(scope: CoroutineScope, adapter: BluetoothAdapter, onClient: (Channel) -> Unit): Int {",
        "    require(isSupported()) { \"L2CAP CoC requires API 29+\" }",
        "    val server: BluetoothServerSocket = adapter.listenUsingL2capChannel()",
        "    val psm = server.psm",
        "    scope.launch(Dispatchers.IO) {",
        "      try {",
        "        val sock = server.accept()",
        "        onClient(Channel(sock, sock.inputStream, sock.outputStream))",
        "      } catch (e: Throwable) {",
        "        Log.e(\"L2capCoc\", \"Server accept failed: ${e.message}\", e)",
        "      } finally {",
        "        try { server.close() } catch (_: Throwable) {}",
        "      }",
        "    }",
        "    return psm",
        "  }",
        "",
        "  /** Connect as a client to a remote PSM */",
        "  fun connectClient(device: BluetoothDevice, psm: Int): Channel {",
        "    require(isSupported()) { \"L2CAP CoC requires API 29+\" }",
        "    val sock = device.createL2capChannel(psm)",
        "    sock.connect()",
        "    return Channel(sock, sock.inputStream, sock.outputStream)",
        "  }",
        "}"
      ],
      "android/app/src/main/java/com/yourco/airpods/MainActivity.kt": [
        "package com.yourco.airpods",
        "",
        "import android.os.Bundle",
        "import androidx.appcompat.app.AppCompatActivity",
        "",
        "class MainActivity : AppCompatActivity() {",
        "    override fun onCreate(savedInstanceState: Bundle?) {",
        "        super.onCreate(savedInstanceState)",
        "        setContentView(R.layout.activity_main)",
        "    }",
        "}"
      ],
      "android/app/src/main/java/com/yourco/airpods/BleClient.kt": [
        "import me.kavishdevar.librepods.utils.SettingsManager",
        "package com.yourco.airpods",
        "",
        "import android.bluetooth.*",
        "import android.bluetooth.le.*",
        "import android.content.Context",
        "import android.os.ParcelUuid",
        "import java.util.*",
        "",
        "private val SERVICE_UUID = UUID.fromString(\"D0611E78-BBB4-4591-A5F8-487910AE4366\")",
        "private val CHAR_UUID    = UUID.fromString(\"8667556C-9A37-4C91-84ED-54EE27D90049\")",
        "",
        "class BleClient(private val ctx: Context): BluetoothGattCallback() {",
        "  private val coc = L2capCocManager()",
        "  @Volatile private var useCocPreferred = SettingsManager.isUseCoc(ctx) // user setting, defaults true",
        "  private val adapter = BluetoothAdapter.getDefaultAdapter()",
        "  private val scanner get() = adapter?.bluetoothLeScanner",
        "",
        "  fun startScan() {",
        "    val filter = ScanFilter.Builder().setServiceUuid(ParcelUuid(SERVICE_UUID)).build()",
        "    val settings = ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY).build()",
        "    scanner?.startScan(listOf(filter), settings, scanCb)",
        "  }",
        "",
        "  private val scanCb = object: ScanCallback() {",
        "    override fun onScanResult(type:Int, result:ScanResult) {",
        "      scanner?.stopScan(this)",
        "      result.device.connectGatt(ctx, false, this@BleClient, BluetoothDevice.TRANSPORT_LE)",
        "    }",
        "  }",
        "",
        "  override fun onConnectionStateChange(gatt: BluetoothGatt, status: Int, newState: Int) {",
        "    if (newState == BluetoothProfile.STATE_CONNECTED) gatt.discoverServices()",
        "    if (newState == BluetoothProfile.STATE_DISCONNECTED) gatt.close()",
        "  }",
        "",
        "  override fun onServicesDiscovered(gatt: BluetoothGatt, status: Int) {",
        "    val svc = gatt.getService(SERVICE_UUID) ?: return gatt.disconnect()",
        "    val chr = svc.getCharacteristic(CHAR_UUID) ?: return gatt.disconnect()",
        "",
        "    // Try L2CAP CoC if supported and PSM characteristic present; otherwise read data over GATT",
        "    val psmChar = try { svc.getCharacteristic(UUID.fromString(\"0000FF01-0000-1000-8000-00805F9B34FB\")) } catch (_: Throwable) { null }",
        "    if (psmChar != null && coc.isSupported() && useCocPreferred) {",
        "      // Read PSM",
        "      gatt.readCharacteristic(psmChar)",
        "      return",
        "    }",
        "    gatt.readCharacteristic(chr)",
        "  }",
        "",
        "  override fun onCharacteristicRead(gatt: BluetoothGatt, chr: BluetoothGattCharacteristic, status: Int) {",
        "    if (status == BluetoothGatt.GATT_SUCCESS) {",
        "      val bytes = chr.value",
        "",
        "    // If we just read the PSM characteristic, try L2CAP CoC",
        "    if (chr.uuid == UUID.fromString(\"0000FF01-0000-1000-8000-00805F9B34FB\") && coc.isSupported() && useCocPreferred) {",
        "      val psm = java.nio.ByteBuffer.wrap(bytes).order(java.nio.ByteOrder.LITTLE_ENDIAN).short.toInt() and 0xFFFF",
        "      try {",
        "        val ch = coc.connectClient(gatt.device, psm)",
        "        // Example: request a simple info packet over CoC then close",
        "        ch.output.write(byteArrayOf(0x01, 0x00)) // app-specific",
        "        val tmp = ByteArray(128)",
        "        val n = ch.input.read(tmp)",
        "        // parse via JNI if it matches expected payload, else ignore",
        "        gatt.disconnect()",
        "        return",
        "      } catch (e: Throwable) {",
        "        // Fall back to GATT if CoC connect fails",
        "        useCocPreferred = false",
        "      }",
        "    }",
        "      val model = NativeBridge.parseAirPodsPayload(bytes)",
        "    }",
        "    gatt.disconnect()",
        "  }",
        "}"
      ],
      "android/app/src/main/java/com/yourco/airpods/NativeBridge.kt": [
        "package com.yourco.airpods",
        "",
        "object NativeBridge {",
        "  init { System.loadLibrary(\"airpods_core\") }",
        "  external fun parseAirPodsPayload(payload: ByteArray): String",
        "}"
      ],
      "android/app/src/main/java/com/yourco/airpods/Prefs.kt": [
        "package com.yourco.airpods",
        "",
        "import android.content.Context",
        "import android.content.SharedPreferences",
        "",
        "object Prefs {",
        "  private const val FILE = \"airpods_prefs\"",
        "  private const val KEY_PREFER_COC = \"prefer_coc\"",
        "",
        "  private fun prefs(ctx: Context): SharedPreferences =",
        "    ctx.getSharedPreferences(FILE, Context.MODE_PRIVATE)",
        "",
        "  fun setPreferCoc(ctx: Context, value: Boolean) {",
        "    prefs(ctx).edit().putBoolean(KEY_PREFER_COC, value).apply()",
        "  }",
        "",
        "  fun getPreferCoc(ctx: Context): Boolean =",
        "    prefs(ctx).getBoolean(KEY_PREFER_COC, /*default=*/true)",
        "}"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/MainActivity.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods",
        "",
        "import android.annotation.SuppressLint",
        "import android.content.BroadcastReceiver",
        "import android.content.ComponentName",
        "import android.content.Context",
        "import android.content.Context.MODE_PRIVATE",
        "import android.content.Intent",
        "import android.content.ServiceConnection",
        "import android.content.SharedPreferences",
        "import android.net.Uri",
        "import android.os.Build",
        "import android.os.Bundle",
        "import android.os.IBinder",
        "import android.provider.Settings",
        "import android.util.Log",
        "import android.widget.Toast",
        "import androidx.activity.ComponentActivity",
        "import androidx.activity.compose.setContent",
        "import androidx.activity.enableEdgeToEdge",
        "import androidx.compose.animation.core.RepeatMode",
        "import androidx.compose.animation.core.animateFloat",
        "import androidx.compose.animation.core.infiniteRepeatable",
        "import androidx.compose.animation.core.rememberInfiniteTransition",
        "import androidx.compose.animation.core.tween",
        "import androidx.compose.animation.fadeIn",
        "import androidx.compose.animation.fadeOut",
        "import androidx.compose.animation.slideInHorizontally",
        "import androidx.compose.animation.slideOutHorizontally",
        "import androidx.compose.foundation.Canvas",
        "import androidx.compose.foundation.background",
        "import androidx.compose.foundation.isSystemInDarkTheme",
        "import androidx.compose.foundation.layout.Box",
        "import androidx.compose.foundation.layout.Column",
        "import androidx.compose.foundation.layout.Row",
        "import androidx.compose.foundation.layout.Spacer",
        "import androidx.compose.foundation.layout.fillMaxSize",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.layout.size",
        "import androidx.compose.foundation.rememberScrollState",
        "import androidx.compose.foundation.shape.RoundedCornerShape",
        "import androidx.compose.foundation.verticalScroll",
        "import androidx.compose.material.icons.Icons",
        "import androidx.compose.material.icons.filled.Notifications",
        "import androidx.compose.material.icons.filled.Phone",
        "import androidx.compose.material3.Button",
        "import androidx.compose.material3.ButtonDefaults",
        "import androidx.compose.material3.Card",
        "import androidx.compose.material3.CardDefaults",
        "import androidx.compose.material3.ExperimentalMaterial3Api",
        "import androidx.compose.material3.Icon",
        "import androidx.compose.material3.MaterialTheme",
        "import androidx.compose.material3.Text",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.LaunchedEffect",
        "import androidx.compose.runtime.getValue",
        "import androidx.compose.runtime.mutableStateOf",
        "import androidx.compose.runtime.remember"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/QuickSettingsDialogActivity.kt": [
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods",
        "",
        "import android.annotation.SuppressLint",
        "import android.content.BroadcastReceiver",
        "import android.content.ComponentName",
        "import android.content.Context",
        "import android.content.Intent",
        "import android.content.IntentFilter",
        "import android.content.ServiceConnection",
        "import android.media.AudioManager",
        "import android.os.Build",
        "import android.os.Bundle",
        "import android.os.IBinder",
        "import android.util.Log",
        "import android.view.Gravity",
        "import android.view.WindowManager",
        "import androidx.activity.ComponentActivity",
        "import androidx.activity.compose.setContent",
        "import androidx.compose.animation.Crossfade",
        "import androidx.compose.animation.animateContentSize",
        "import androidx.compose.animation.core.Animatable",
        "import androidx.compose.animation.core.FastOutSlowInEasing",
        "import androidx.compose.animation.core.Spring",
        "import androidx.compose.animation.core.animateFloatAsState",
        "import androidx.compose.animation.core.spring",
        "import androidx.compose.animation.core.tween",
        "import androidx.compose.foundation.background",
        "import androidx.compose.foundation.clickable",
        "import androidx.compose.foundation.gestures.detectVerticalDragGestures",
        "import androidx.compose.foundation.interaction.MutableInteractionSource",
        "import androidx.compose.foundation.layout.Arrangement",
        "import androidx.compose.foundation.layout.Box",
        "import androidx.compose.foundation.layout.Column",
        "import androidx.compose.foundation.layout.Row",
        "import androidx.compose.foundation.layout.Spacer",
        "import androidx.compose.foundation.layout.fillMaxSize",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.layout.size",
        "import androidx.compose.foundation.layout.width",
        "import androidx.compose.foundation.shape.CircleShape",
        "import androidx.compose.material3.Icon",
        "import androidx.compose.material3.Text",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.DisposableEffect",
        "import androidx.compose.runtime.LaunchedEffect",
        "import androidx.compose.runtime.getValue",
        "import androidx.compose.runtime.mutableFloatStateOf",
        "import androidx.compose.runtime.mutableIntStateOf",
        "import androidx.compose.runtime.mutableStateOf",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.runtime.rememberCoroutineScope",
        "import androidx.compose.runtime.setValue",
        "import androidx.compose.ui.Alignment",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.draw.clip",
        "import androidx.compose.ui.graphics.Brush",
        "import androidx.compose.ui.graphics.Color",
        "import androidx.compose.ui.graphics.graphicsLayer",
        "import androidx.compose.ui.input.pointer.pointerInput",
        "import androidx.compose.ui.platform.LocalContext",
        "import androidx.compose.ui.res.painterResource",
        "import androidx.compose.ui.text.font.FontWeight",
        "import androidx.compose.ui.unit.dp",
        "import androidx.compose.ui.unit.sp",
        "import kotlinx.coroutines.launch",
        "import me.kavishdevar.librepods.composables.AdaptiveRainbowBrush",
        "import me.kavishdevar.librepods.composables.ControlCenterNoiseControlSegmentedButton",
        "import me.kavishdevar.librepods.composables.IconAreaSize",
        "import me.kavishdevar.librepods.composables.VerticalVolumeSlider",
        "import me.kavishdevar.librepods.constants.AirPodsNotifications",
        "import me.kavishdevar.librepods.constants.NoiseControlMode",
        "import me.kavishdevar.librepods.services.AirPodsService",
        "import me.kavishdevar.librepods.ui.theme.LibrePodsTheme",
        "import me.kavishdevar.librepods.utils.AACPManager",
        "import kotlin.io.encoding.ExperimentalEncodingApi",
        "import kotlin.math.abs"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/CustomDeviceActivity.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " * ",
        " * Copyright (C) 2025 LibrePods contributors",
        " * ",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " * ",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " * ",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "package me.kavishdevar.librepods",
        "",
        "import android.Manifest",
        "import android.annotation.SuppressLint",
        "import android.bluetooth.BluetoothDevice",
        "import android.bluetooth.BluetoothDevice.TRANSPORT_LE",
        "import android.bluetooth.BluetoothGatt",
        "import android.bluetooth.BluetoothGattCallback",
        "import android.bluetooth.BluetoothGattCharacteristic",
        "import android.bluetooth.BluetoothManager",
        "import android.os.Build",
        "import android.os.Bundle",
        "import android.util.Log",
        "import androidx.activity.ComponentActivity",
        "import androidx.activity.compose.setContent",
        "import androidx.activity.enableEdgeToEdge",
        "import androidx.annotation.RequiresPermission",
        "import androidx.compose.foundation.layout.Arrangement",
        "import androidx.compose.foundation.layout.Column",
        "import androidx.compose.foundation.layout.fillMaxSize",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.material3.Button",
        "import androidx.compose.material3.MaterialTheme",
        "import androidx.compose.material3.Scaffold",
        "import androidx.compose.material3.Text",
        "import androidx.compose.runtime.mutableStateOf",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.ui.Alignment",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.unit.dp",
        "import me.kavishdevar.librepods.ui.theme.LibrePodsTheme",
        "import org.lsposed.hiddenapibypass.HiddenApiBypass",
        "import java.util.UUID",
        "",
        "class CustomDevice : ComponentActivity() {",
        "    @SuppressLint(\"MissingPermission\", \"CoroutineCreationDuringComposition\")",
        "    override fun onCreate(savedInstanceState: Bundle?) {",
        "        super.onCreate(savedInstanceState)",
        "        enableEdgeToEdge()",
        "        setContent {",
        "            LibrePodsTheme {",
        "                val connect = remember { mutableStateOf(false) }",
        "                Scaffold(",
        "                    modifier = Modifier.fillMaxSize(),",
        "                    topBar = {",
        "                        Column(",
        "                            modifier = Modifier.fillMaxWidth(),",
        "                            verticalArrangement = Arrangement.Center,",
        "                            horizontalAlignment = Alignment.CenterHorizontally",
        "                        ) {",
        "                            Text(\"Custom Device\", style = MaterialTheme.typography.titleLarge)",
        "                        }",
        "                    }",
        "                ) { innerPadding ->",
        "                    HiddenApiBypass.addHiddenApiExemptions(\"Landroid/bluetooth/BluetoothSocket;\")",
        "                    val manager = getSystemService(BLUETOOTH_SERVICE) as BluetoothManager",
        "//                    val device: BluetoothDevice = manager.adapter.getRemoteDevice(\"EC:D6:F4:3D:89:B8\")",
        "                    val device: BluetoothDevice = manager.adapter.getRemoteDevice(\"E7:48:92:3B:7D:A5\")",
        "//                    val socket = device.createInsecureL2capChannel(31)",
        "",
        "//                    val batteryLevel = remember { mutableStateOf(\"\") }"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/utils/PopupWindow.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "",
        "package me.kavishdevar.librepods.utils",
        "",
        "import android.animation.Animator",
        "import android.animation.AnimatorListenerAdapter",
        "import android.animation.ObjectAnimator",
        "import android.animation.PropertyValuesHolder",
        "import android.annotation.SuppressLint",
        "import android.content.BroadcastReceiver",
        "import android.content.Context",
        "import android.content.Intent",
        "import android.content.IntentFilter",
        "import android.graphics.PixelFormat",
        "import android.os.Build",
        "import android.os.Handler",
        "import android.os.Looper",
        "import android.util.Log",
        "import android.view.Gravity",
        "import android.view.LayoutInflater",
        "import android.view.MotionEvent",
        "import android.view.View",
        "import android.view.WindowManager",
        "import android.view.animation.AccelerateInterpolator",
        "import android.view.animation.DecelerateInterpolator",
        "import android.widget.ImageButton",
        "import android.widget.LinearLayout",
        "import android.widget.TextView",
        "import android.widget.VideoView",
        "import me.kavishdevar.librepods.R",
        "import me.kavishdevar.librepods.constants.AirPodsNotifications",
        "import me.kavishdevar.librepods.constants.Battery",
        "import me.kavishdevar.librepods.constants.BatteryComponent",
        "import me.kavishdevar.librepods.constants.BatteryStatus",
        "import kotlin.collections.find",
        "",
        "@SuppressLint(\"InflateParams\", \"ClickableViewAccessibility\")",
        "class PopupWindow(",
        "    private val context: Context,",
        "    private val onCloseCallback: () -> Unit = {}",
        ") {",
        "    private val mView: View",
        "    private var isClosing = false",
        "    private var autoCloseHandler = Handler(Looper.getMainLooper())",
        "    private var autoCloseRunnable: Runnable? = null",
        "    private var batteryUpdateReceiver: BroadcastReceiver? = null",
        "",
        "    @Suppress(\"DEPRECATION\")",
        "    private val mParams: WindowManager.LayoutParams = WindowManager.LayoutParams().apply {",
        "        height = WindowManager.LayoutParams.WRAP_CONTENT",
        "        width = WindowManager.LayoutParams.MATCH_PARENT",
        "        type = WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY",
        "        format = PixelFormat.TRANSLUCENT",
        "        gravity = Gravity.BOTTOM",
        "        dimAmount = 0.3f",
        "        flags = WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS or",
        "            WindowManager.LayoutParams.FLAG_FULLSCREEN or",
        "            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE or",
        "            WindowManager.LayoutParams.FLAG_DIM_BEHIND or",
        "            WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH",
        "    }",
        "",
        "    private val mWindowManager: WindowManager"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/utils/KotlinModule.kt": [
        "package me.kavishdevar.librepods.utils",
        "",
        "import android.content.Context",
        "import android.content.Intent",
        "import android.content.pm.ApplicationInfo",
        "import android.content.res.ColorStateList",
        "import android.graphics.Color",
        "import android.graphics.drawable.GradientDrawable",
        "import android.os.ParcelUuid",
        "import android.util.Log",
        "import android.view.Gravity",
        "import android.view.View",
        "import android.view.ViewGroup",
        "import android.view.animation.AccelerateInterpolator",
        "import android.view.animation.DecelerateInterpolator",
        "import android.widget.FrameLayout",
        "import android.widget.ImageButton",
        "import android.widget.ImageView",
        "import android.widget.LinearLayout",
        "import io.github.libxposed.api.XposedInterface",
        "import io.github.libxposed.api.XposedInterface.AfterHookCallback",
        "import io.github.libxposed.api.XposedModule",
        "import io.github.libxposed.api.XposedModuleInterface",
        "import io.github.libxposed.api.XposedModuleInterface.ModuleLoadedParam",
        "import io.github.libxposed.api.annotations.AfterInvocation",
        "import io.github.libxposed.api.annotations.XposedHooker",
        "",
        "private const val TAG = \"AirPodsHook\"",
        "private lateinit var module: KotlinModule",
        "",
        "class KotlinModule(base: XposedInterface, param: ModuleLoadedParam): XposedModule(base, param) {",
        "    init {",
        "        Log.i(TAG, \"AirPodsHook module initialized at :: ${param.processName}\")",
        "        module = this",
        "    }",
        "",
        "    override fun onPackageLoaded(param: XposedModuleInterface.PackageLoadedParam) {",
        "        super.onPackageLoaded(param)",
        "        Log.i(TAG, \"onPackageLoaded :: ${param.packageName}\")",
        "",
        "        if (param.packageName == \"com.google.android.bluetooth\" || param.packageName == \"com.android.bluetooth\") {",
        "            Log.i(TAG, \"Bluetooth app detected, hooking l2c_fcr_chk_chan_modes\")",
        "",
        "            try {",
        "                if (param.isFirstPackage) {",
        "                    Log.i(TAG, \"Loading native library for Bluetooth hook\")",
        "                    System.loadLibrary(\"l2c_fcr_hook\")",
        "                    Log.i(TAG, \"Native library loaded successfully\")",
        "                }",
        "            } catch (e: Exception) {",
        "                Log.e(TAG, \"Failed to load native library: ${e.message}\", e)",
        "            }",
        "        }",
        "",
        "        if (param.packageName == \"com.google.android.settings\") {",
        "            Log.i(TAG, \"Settings app detected, hooking Bluetooth icon handling\")",
        "            try {",
        "                val headerControllerClass = param.classLoader.loadClass(",
        "                    \"com.google.android.settings.bluetooth.AdvancedBluetoothDetailsHeaderController\")",
        "",
        "                val updateIconMethod = headerControllerClass.getDeclaredMethod(",
        "                    \"updateIcon\",",
        "                    android.widget.ImageView::class.java,",
        "                    String::class.java)",
        "",
        "                hook(updateIconMethod, BluetoothIconHooker::class.java)",
        "                Log.i(TAG, \"Successfully hooked updateIcon method in Bluetooth settings\")",
        "",
        "                try {",
        "                    val displayPreferenceMethod = headerControllerClass.getDeclaredMethod(",
        "                        \"displayPreference\",",
        "                        param.classLoader.loadClass(\"androidx.preference.PreferenceScreen\"))",
        "",
        "                    hook(displayPreferenceMethod, BluetoothSettingsAirPodsHooker::class.java)",
        "                    Log.i(TAG, \"Successfully hooked displayPreference for AirPods button injection\")",
        "                } catch (e: Exception) {",
        "                    Log.e(TAG, \"Failed to hook displayPreference: ${e.message}\", e)",
        "                }",
        "            } catch (e: Exception) {",
        "                Log.e(TAG, \"Failed to hook Bluetooth icon handler: ${e.message}\", e)"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/utils/AACPManager.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple's ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.utils",
        "",
        "import android.util.Log",
        "import me.kavishdevar.librepods.utils.AACPManager.Companion.ControlCommandIdentifiers.entries",
        "import me.kavishdevar.librepods.utils.AACPManager.Companion.StemPressBudType.entries",
        "import me.kavishdevar.librepods.utils.AACPManager.Companion.StemPressType.entries",
        "import kotlin.io.encoding.ExperimentalEncodingApi",
        "",
        "/**",
        " * Manager class for Apple Accessory Communication Protocol (AACP)",
        " * This class is responsible for handling the L2CAP socket management,",
        " * constructing and parsing packets for communication with AirPods.",
        " */",
        "class AACPManager {",
        "    companion object {",
        "        private const val TAG = \"AACPManager\"",
        "",
        "        object Opcodes {",
        "            const val SET_FEATURE_FLAGS: Byte = 0x4d",
        "            const val REQUEST_NOTIFICATIONS: Byte = 0x0f",
        "            const val BATTERY_INFO: Byte = 0x04",
        "            const val CONTROL_COMMAND: Byte = 0x09",
        "            const val EAR_DETECTION: Byte = 0x06",
        "            const val CONVERSATION_AWARENESS: Byte = 0x4b",
        "            const val DEVICE_METADATA: Byte = 0x1d",
        "            const val RENAME: Byte = 0x1E",
        "            const val HEADTRACKING: Byte = 0x17",
        "            const val PROXIMITY_KEYS_REQ: Byte = 0x30",
        "            const val PROXIMITY_KEYS_RSP: Byte = 0x31",
        "            const val STEM_PRESS: Byte = 0x19",
        "        }",
        "",
        "        private val HEADER_BYTES = byteArrayOf(0x04, 0x00, 0x04, 0x00)",
        "",
        "        data class ControlCommandStatus(",
        "            val identifier: ControlCommandIdentifiers,",
        "            val value: ByteArray",
        "        ) {",
        "            override fun equals(other: Any?): Boolean {",
        "                if (this === other) return true",
        "                if (javaClass != other?.javaClass) return false",
        "",
        "                other as ControlCommandStatus",
        "",
        "                if (identifier != other.identifier) return false",
        "                if (!value.contentEquals(other.value)) return false",
        "",
        "                return true",
        "            }",
        "",
        "            override fun hashCode(): Int {",
        "                var result: Int = identifier.hashCode()",
        "                result = 31 * result + value.contentHashCode()",
        "                return result",
        "            }",
        "        }",
        "",
        "//        @Suppress(\"unused\")",
        "        enum class ControlCommandIdentifiers(val value: Byte) {",
        "            MIC_MODE(0x01),"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/utils/IslandWindow.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.utils",
        "",
        "import android.animation.Animator",
        "import android.animation.AnimatorListenerAdapter",
        "import android.animation.ObjectAnimator",
        "import android.animation.PropertyValuesHolder",
        "import android.animation.ValueAnimator",
        "import android.annotation.SuppressLint",
        "import android.content.BroadcastReceiver",
        "import android.content.Context",
        "import android.content.Intent",
        "import android.content.IntentFilter",
        "import android.content.res.Resources",
        "import android.graphics.PixelFormat",
        "import android.graphics.drawable.GradientDrawable",
        "import android.net.Uri",
        "import android.os.Build",
        "import android.os.Handler",
        "import android.os.Looper",
        "import android.util.Log.e",
        "import android.view.Gravity",
        "import android.view.LayoutInflater",
        "import android.view.MotionEvent",
        "import android.view.VelocityTracker",
        "import android.view.View",
        "import android.view.WindowManager",
        "import android.view.animation.AccelerateInterpolator",
        "import android.view.animation.AnticipateOvershootInterpolator",
        "import android.view.animation.DecelerateInterpolator",
        "import android.view.animation.OvershootInterpolator",
        "import android.widget.FrameLayout",
        "import android.widget.LinearLayout",
        "import android.widget.ProgressBar",
        "import android.widget.TextView",
        "import android.widget.VideoView",
        "import androidx.core.content.ContextCompat.getString",
        "import androidx.dynamicanimation.animation.DynamicAnimation",
        "import androidx.dynamicanimation.animation.SpringAnimation",
        "import androidx.dynamicanimation.animation.SpringForce",
        "import me.kavishdevar.librepods.R",
        "import me.kavishdevar.librepods.constants.AirPodsNotifications",
        "import me.kavishdevar.librepods.constants.Battery",
        "import me.kavishdevar.librepods.constants.BatteryComponent",
        "import me.kavishdevar.librepods.constants.BatteryStatus",
        "import me.kavishdevar.librepods.services.ServiceManager",
        "import kotlin.io.encoding.ExperimentalEncodingApi",
        "import kotlin.math.abs",
        "",
        "enum class IslandType {",
        "    CONNECTED,",
        "    TAKING_OVER,",
        "    MOVED_TO_REMOTE,",
        "}",
        "",
        "class IslandWindow(private val context: Context) {",
        "    private val windowManager: WindowManager = context.getSystemService(Context.WINDOW_SERVICE) as WindowManager",
        "    @SuppressLint(\"InflateParams\")",
        "    private val islandView: View = LayoutInflater.from(context).inflate(R.layout.island_window, null)",
        "    private var isClosing = false",
        "    private var params: WindowManager.LayoutParams? = null"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/utils/SystemAPIUtils.kt": [
        "package me.kavishdevar.librepods.utils",
        "",
        "import android.bluetooth.BluetoothDevice",
        "import android.util.Log",
        "import org.lsposed.hiddenapibypass.HiddenApiBypass",
        "",
        "object SystemApisUtils {",
        "",
        "    /**",
        "     * Device type which is used in METADATA_DEVICE_TYPE",
        "     * Indicates this Bluetooth device is an untethered headset.",
        "     * @hide",
        "     */",
        "    val BluetoothDevice.DEVICE_TYPE_UNTETHERED_HEADSET: String",
        "        get() = \"Untethered Headset\"",
        "",
        "    /**",
        "     * Maximum length of a metadata entry, this is to avoid exploding Bluetooth",
        "     * disk usage",
        "     * @hide",
        "     */",
        "    val BluetoothDevice.METADATA_MAX_LENGTH: Int",
        "        get() = 2048",
        "",
        "    /**",
        "     * Manufacturer name of this Bluetooth device",
        "     * Data type should be {@String} as [Byte] array.",
        "     * @hide",
        "     */",
        "    val BluetoothDevice.METADATA_MANUFACTURER_NAME: Int",
        "        get() = 0",
        "",
        "    /**",
        "     * Model name of this Bluetooth device",
        "     * Data type should be {@String} as [Byte] array.",
        "     * @hide",
        "     */",
        "    val BluetoothDevice.METADATA_MODEL_NAME: Int",
        "        get() = 1",
        "",
        "    /**",
        "     * Software version of this Bluetooth device",
        "     * Data type should be {@String} as [Byte] array.",
        "     * @hide",
        "     */",
        "    val BluetoothDevice.METADATA_SOFTWARE_VERSION: Int",
        "        get() = 2",
        "",
        "    /**",
        "     * Hardware version of this Bluetooth device",
        "     * Data type should be {@String} as [Byte] array.",
        "     * @hide",
        "     */",
        "    val BluetoothDevice.METADATA_HARDWARE_VERSION: Int",
        "        get() = 3",
        "",
        "    /**",
        "     * Package name of the companion app, if any",
        "     * Data type should be {@String} as [Byte] array.",
        "     * @hide",
        "     */",
        "    val BluetoothDevice.METADATA_COMPANION_APP: Int",
        "        get() = 4",
        "",
        "    /**",
        "     * URI to the main icon shown on the settings UI",
        "     * Data type should be [Byte] array.",
        "     * @hide",
        "     */",
        "    val BluetoothDevice.METADATA_MAIN_ICON: Int",
        "        get() = 5",
        "",
        "    /**",
        "     * Whether this device is an untethered headset with left, right and case",
        "     * Data type should be {@String} as [Byte] array.",
        "     * @hide",
        "     */",
        "    val BluetoothDevice.METADATA_IS_UNTETHERED_HEADSET: Int",
        "        get() = 6",
        ""
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/utils/BLEManager.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple's ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods Contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "package me.kavishdevar.librepods.utils",
        "",
        "import android.annotation.SuppressLint",
        "import android.bluetooth.BluetoothManager",
        "import android.bluetooth.le.BluetoothLeScanner",
        "import android.bluetooth.le.ScanCallback",
        "import android.bluetooth.le.ScanFilter",
        "import android.bluetooth.le.ScanResult",
        "import android.bluetooth.le.ScanSettings",
        "import android.content.Context",
        "import android.content.SharedPreferences",
        "import android.os.Handler",
        "import android.os.Looper",
        "import android.util.Log",
        "import me.kavishdevar.librepods.services.ServiceManager",
        "import javax.crypto.Cipher",
        "import javax.crypto.spec.SecretKeySpec",
        "import kotlin.io.encoding.Base64",
        "import kotlin.io.encoding.ExperimentalEncodingApi",
        "",
        "/**",
        " * Manager for Bluetooth Low Energy scanning operations specifically for AirPods",
        " */",
        "@OptIn(ExperimentalEncodingApi::class)",
        "class BLEManager(private val context: Context) {",
        "",
        "    data class AirPodsStatus(",
        "        val address: String,",
        "        val lastSeen: Long = System.currentTimeMillis(),",
        "        val paired: Boolean = false,",
        "        val model: String = \"Unknown\",",
        "        val leftBattery: Int? = null,",
        "        val rightBattery: Int? = null,",
        "        val caseBattery: Int? = null,",
        "        val isLeftInEar: Boolean = false,",
        "        val isRightInEar: Boolean = false,",
        "        val isLeftCharging: Boolean = false,",
        "        val isRightCharging: Boolean = false,",
        "        val isCaseCharging: Boolean = false,",
        "        val lidOpen: Boolean = false,",
        "        val color: String = \"Unknown\",",
        "        val connectionState: String = \"Unknown\"",
        "    )",
        "",
        "    fun getMostRecentStatus(): AirPodsStatus? {",
        "        return deviceStatusMap.values.maxByOrNull { it.lastSeen }",
        "    }",
        "",
        "    interface AirPodsStatusListener {",
        "        fun onDeviceStatusChanged(device: AirPodsStatus, previousStatus: AirPodsStatus?)",
        "        fun onBroadcastFromNewAddress(device: AirPodsStatus)",
        "        fun onLidStateChanged(lidOpen: Boolean)",
        "        fun onEarStateChanged(device: AirPodsStatus, leftInEar: Boolean, rightInEar: Boolean)",
        "        fun onBatteryChanged(device: AirPodsStatus)",
        "    }",
        "",
        "    private var mBluetoothLeScanner: BluetoothLeScanner? = null",
        "    private var mScanCallback: ScanCallback? = null",
        "    private var airPodsStatusListener: AirPodsStatusListener? = null",
        "    private val deviceStatusMap = mutableMapOf<String, AirPodsStatus>()",
        "    private val verifiedAddresses = mutableSetOf<String>()",
        "    private val sharedPreferences: SharedPreferences = context.getSharedPreferences(\"settings\", Context.MODE_PRIVATE)"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/utils/LogCollector.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple's ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "package me.kavishdevar.librepods.utils",
        "",
        "import android.content.Context",
        "import android.content.Intent",
        "import android.net.Uri",
        "import kotlinx.coroutines.Dispatchers",
        "import kotlinx.coroutines.withContext",
        "import java.io.BufferedReader",
        "import java.io.File",
        "import java.io.InputStreamReader",
        "",
        "class LogCollector(private val context: Context) {",
        "    private var isCollecting = false",
        "    private var logProcess: Process? = null",
        "    ",
        "    suspend fun openXposedSettings(context: Context) {",
        "        withContext(Dispatchers.IO) {",
        "            val command = if (android.os.Build.VERSION.SDK_INT >= 29) {",
        "                \"am broadcast -a android.telephony.action.SECRET_CODE -d android_secret_code://5776733 android\"",
        "            } else {",
        "                \"am broadcast -a android.provider.Telephony.SECRET_CODE -d android_secret_code://5776733 android\"",
        "            }",
        "            ",
        "            executeRootCommand(command)",
        "        }",
        "    }",
        "    ",
        "    suspend fun clearLogs() {",
        "        withContext(Dispatchers.IO) {",
        "            executeRootCommand(\"logcat -c\")",
        "        }",
        "    }",
        "    ",
        "    suspend fun killBluetoothService() {",
        "        withContext(Dispatchers.IO) {",
        "            executeRootCommand(\"killall com.android.bluetooth\")",
        "        }",
        "    }",
        "    ",
        "    private suspend fun getPackageUIDs(): Pair<String?, String?> {",
        "        return withContext(Dispatchers.IO) {",
        "            val btUid = executeRootCommand(\"dumpsys package com.android.bluetooth | grep -m 1 \\\"uid=\\\" | sed -E 's/.*uid=([0-9]+).*/\\\\1/'\")",
        "                .trim()",
        "                .takeIf { it.isNotEmpty() }",
        "            ",
        "            val appUid = executeRootCommand(\"dumpsys package me.kavishdevar.librepods | grep -m 1 \\\"uid=\\\" | sed -E 's/.*uid=([0-9]+).*/\\\\1/'\")",
        "                .trim()",
        "                .takeIf { it.isNotEmpty() }",
        "            ",
        "            Pair(btUid, appUid)",
        "        }",
        "    }",
        "    ",
        "    suspend fun startLogCollection(listener: (String) -> Unit, connectionDetectedCallback: () -> Unit): String {",
        "        return withContext(Dispatchers.IO) {",
        "            isCollecting = true",
        "            val (btUid, appUid) = getPackageUIDs()",
        "            ",
        "            val uidFilter = buildString {",
        "                if (!btUid.isNullOrEmpty() && !appUid.isNullOrEmpty()) {",
        "                    append(\"$btUid,$appUid\")",
        "                } else if (!btUid.isNullOrEmpty()) {"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/utils/HeadOrientation.kt": [
        "package me.kavishdevar.librepods.utils",
        "",
        "import kotlinx.coroutines.flow.MutableStateFlow",
        "import kotlinx.coroutines.flow.asStateFlow",
        "import kotlin.math.roundToInt",
        "",
        "data class Orientation(val pitch: Float = 0f, val yaw: Float = 0f)",
        "data class Acceleration(val vertical: Float = 0f, val horizontal: Float = 0f)",
        "",
        "object HeadTracking {",
        "    private val _orientation = MutableStateFlow(Orientation())",
        "    val orientation = _orientation.asStateFlow()",
        "",
        "    private val _acceleration = MutableStateFlow(Acceleration())",
        "    val acceleration = _acceleration.asStateFlow()",
        "",
        "    private val calibrationSamples = mutableListOf<Triple<Int, Int, Int>>()",
        "    private var isCalibrated = false",
        "    private var o1Neutral = 19000",
        "    private var o2Neutral = 0",
        "    private var o3Neutral = 0",
        "",
        "    private const val CALIBRATION_SAMPLE_COUNT = 10",
        "    private const val ORIENTATION_OFFSET = 5500",
        "",
        "    fun processPacket(packet: ByteArray) {",
        "        val o1 = bytesToInt(packet[43], packet[44])",
        "        val o2 = bytesToInt(packet[45], packet[46])",
        "        val o3 = bytesToInt(packet[47], packet[48])",
        "",
        "        val horizontalAccel = bytesToInt(packet[51], packet[52]).toFloat()",
        "        val verticalAccel = bytesToInt(packet[53], packet[54]).toFloat()",
        "",
        "        if (!isCalibrated) {",
        "            calibrationSamples.add(Triple(o1, o2, o3))",
        "            if (calibrationSamples.size >= CALIBRATION_SAMPLE_COUNT) {",
        "                calibrate()",
        "            }",
        "            return",
        "        }",
        "",
        "        val orientation = calculateOrientation(o1, o2, o3)",
        "        _orientation.value = orientation",
        "",
        "        _acceleration.value = Acceleration(verticalAccel, horizontalAccel)",
        "    }",
        "",
        "    private fun calibrate() {",
        "        if (calibrationSamples.size < 3) return",
        "",
        "        // Add offset during calibration",
        "        o1Neutral = calibrationSamples.map { it.first + ORIENTATION_OFFSET }.average().roundToInt()",
        "        o2Neutral = calibrationSamples.map { it.second + ORIENTATION_OFFSET }.average().roundToInt()",
        "        o3Neutral = calibrationSamples.map { it.third + ORIENTATION_OFFSET }.average().roundToInt()",
        "",
        "        isCalibrated = true",
        "    }",
        "",
        "    @Suppress(\"UnusedVariable\")",
        "    private fun calculateOrientation(o1: Int, o2: Int, o3: Int): Orientation {",
        "        if (!isCalibrated) return Orientation()",
        "",
        "        val o1Norm = (o1 + ORIENTATION_OFFSET) - o1Neutral",
        "        val o2Norm = (o2 + ORIENTATION_OFFSET) - o2Neutral",
        "        val o3Norm = (o3 + ORIENTATION_OFFSET) - o3Neutral",
        "",
        "        val pitch = (o2Norm + o3Norm) / 2f / 32000f * 180f",
        "        val yaw = (o2Norm - o3Norm) / 2f / 32000f * 180f",
        "",
        "        return Orientation(pitch, yaw)",
        "    }",
        "",
        "    private fun bytesToInt(b1: Byte, b2: Byte): Int {",
        "        return (b2.toInt() shl 8) or (b1.toInt() and 0xFF)",
        "    }",
        "",
        "    fun reset() {",
        "        calibrationSamples.clear()",
        "        isCalibrated = false",
        "        _orientation.value = Orientation()"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/utils/SettingsManager.kt": [
        "package me.kavishdevar.librepods.utils",
        "",
        "import android.content.Context",
        "import android.content.SharedPreferences",
        "",
        "object SettingsManager {",
        "    private const val PREFS_NAME = \"settings\"",
        "    private const val KEY_USE_COC = \"use_coc\"",
        "",
        "    fun setUseCoc(context: Context, enabled: Boolean) {",
        "        val prefs: SharedPreferences = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)",
        "        prefs.edit().putBoolean(KEY_USE_COC, enabled).apply()",
        "    }",
        "",
        "    fun isUseCoc(context: Context): Boolean {",
        "        val prefs: SharedPreferences = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)",
        "        return prefs.getBoolean(KEY_USE_COC, true)",
        "    }",
        "}"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/utils/MediaController.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.utils",
        "",
        "import android.content.SharedPreferences",
        "import android.media.AudioManager",
        "import android.media.AudioPlaybackConfiguration",
        "import android.os.Build",
        "import android.os.Handler",
        "import android.os.Looper",
        "import android.util.Log",
        "import android.view.KeyEvent",
        "import androidx.annotation.RequiresApi",
        "import me.kavishdevar.librepods.services.ServiceManager",
        "import kotlin.io.encoding.ExperimentalEncodingApi",
        "",
        "object MediaController {",
        "    private var initialVolume: Int? = null",
        "    private lateinit var audioManager: AudioManager",
        "    var iPausedTheMedia = false",
        "    var userPlayedTheMedia = false",
        "    private lateinit var sharedPreferences: SharedPreferences",
        "    private val handler = Handler(Looper.getMainLooper())",
        "    private lateinit var preferenceChangeListener: SharedPreferences.OnSharedPreferenceChangeListener",
        "",
        "    var pausedForCrossDevice = false",
        "",
        "    private var relativeVolume: Boolean = false",
        "    private var conversationalAwarenessVolume: Int = 2",
        "    private var conversationalAwarenessPauseMusic: Boolean = false",
        "",
        "    fun initialize(audioManager: AudioManager, sharedPreferences: SharedPreferences) {",
        "        if (this::audioManager.isInitialized) {",
        "            return",
        "        }",
        "        this.audioManager = audioManager",
        "        this.sharedPreferences = sharedPreferences",
        "        Log.d(\"MediaController\", \"Initializing MediaController\")",
        "        relativeVolume = sharedPreferences.getBoolean(\"relative_conversational_awareness_volume\", false)",
        "        conversationalAwarenessVolume = sharedPreferences.getInt(\"conversational_awareness_volume\", (audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC) / 0.4).toInt())",
        "        conversationalAwarenessPauseMusic = sharedPreferences.getBoolean(\"conversational_awareness_pause_music\", false)",
        "",
        "        preferenceChangeListener = SharedPreferences.OnSharedPreferenceChangeListener { _, key ->",
        "            when (key) {",
        "                \"relative_conversational_awareness_volume\" -> {",
        "                    relativeVolume = sharedPreferences.getBoolean(\"relative_conversational_awareness_volume\", false)",
        "                }",
        "                \"conversational_awareness_volume\" -> {",
        "                    conversationalAwarenessVolume = sharedPreferences.getInt(\"conversational_awareness_volume\", (audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC) * 0.4).toInt())",
        "                }",
        "                \"conversational_awareness_pause_music\" -> {",
        "                    conversationalAwarenessPauseMusic = sharedPreferences.getBoolean(\"conversational_awareness_pause_music\", false)",
        "                }",
        "            }",
        "        }",
        "",
        "        sharedPreferences.registerOnSharedPreferenceChangeListener(preferenceChangeListener)",
        "",
        "        audioManager.registerAudioPlaybackCallback(cb, null)",
        "    }",
        "",
        "    val cb = object : AudioManager.AudioPlaybackCallback() {"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/utils/GestureFeedback.kt": [
        "@file:Suppress(\"PrivatePropertyName\")",
        "",
        "package me.kavishdevar.librepods.utils",
        "",
        "import android.content.Context",
        "import android.media.AudioAttributes",
        "import android.media.SoundPool",
        "import android.os.Build",
        "import android.os.SystemClock",
        "import android.util.Log",
        "import androidx.annotation.RequiresApi",
        "import me.kavishdevar.librepods.R",
        "import java.util.concurrent.atomic.AtomicBoolean",
        "",
        "@RequiresApi(Build.VERSION_CODES.Q)",
        "class GestureFeedback(private val context: Context) {",
        "",
        "    private val TAG = \"GestureFeedback\"",
        "",
        "    private val soundsLoaded = AtomicBoolean(false)",
        "",
        "    private val soundPool = SoundPool.Builder()",
        "        .setMaxStreams(3)",
        "        .setAudioAttributes(",
        "            AudioAttributes.Builder()",
        "                .setUsage(AudioAttributes.USAGE_ASSISTANCE_ACCESSIBILITY)",
        "                .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)",
        "                .setFlags(AudioAttributes.FLAG_LOW_LATENCY or",
        "                         AudioAttributes.FLAG_AUDIBILITY_ENFORCED)",
        "                .build()",
        "        )",
        "        .build()",
        "",
        "",
        "    private var soundId = 0",
        "    private var confirmYesId = 0",
        "    private var confirmNoId = 0",
        "",
        "    private var lastHorizontalTime = 0L",
        "    private var lastLeftTime = 0L",
        "    private var lastRightTime = 0L",
        "",
        "    private var lastVerticalTime = 0L",
        "    private var lastUpTime = 0L",
        "    private var lastDownTime = 0L",
        "",
        "    private val MIN_TIME_BETWEEN_SOUNDS = 150L",
        "    private val MIN_TIME_BETWEEN_DIRECTION = 200L",
        "",
        "    private var currentHorizontalStreamId = 0",
        "    private var currentVerticalStreamId = 0",
        "",
        "",
        "    private val LEFT_VOLUME = Pair(1.0f, 0.0f)",
        "    private val RIGHT_VOLUME = Pair(0.0f, 1.0f)",
        "    private val VERTICAL_VOLUME = Pair(1.0f, 1.0f)",
        "",
        "    init {",
        "        soundId = soundPool.load(context, R.raw.blip_no, 1)",
        "        confirmYesId = soundPool.load(context, R.raw.confirm_yes, 1)",
        "        confirmNoId = soundPool.load(context, R.raw.confirm_no, 1)",
        "",
        "        soundPool.setOnLoadCompleteListener { _, _, _ ->",
        "            Log.d(TAG, \"Sounds loaded\")",
        "            soundsLoaded.set(true)",
        "",
        "            soundPool.play(soundId, 0.0f, 0.0f, 1, 0, 1.0f)",
        "        }",
        "    }",
        "",
        "    @RequiresApi(Build.VERSION_CODES.R)",
        "    fun playDirectional(isVertical: Boolean, value: Double) {",
        "        if (!soundsLoaded.get()) {",
        "            Log.d(TAG, \"Sounds not yet loaded, skipping playback\")",
        "            return",
        "        }",
        "",
        "        val now = SystemClock.uptimeMillis()",
        "",
        "        if (isVertical) {"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/utils/GestureDetector.kt": [
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.utils",
        "",
        "import android.os.Build",
        "import android.util.Log",
        "import androidx.annotation.RequiresApi",
        "import kotlinx.coroutines.CoroutineScope",
        "import kotlinx.coroutines.Dispatchers",
        "import kotlinx.coroutines.Job",
        "import kotlinx.coroutines.delay",
        "import kotlinx.coroutines.launch",
        "import kotlinx.coroutines.withContext",
        "import me.kavishdevar.librepods.services.AirPodsService",
        "import me.kavishdevar.librepods.services.ServiceManager",
        "import java.util.Collections",
        "import java.util.concurrent.CopyOnWriteArrayList",
        "import kotlin.io.encoding.ExperimentalEncodingApi",
        "import kotlin.math.abs",
        "import kotlin.math.max",
        "import kotlin.math.min",
        "import kotlin.math.pow",
        "",
        "@RequiresApi(Build.VERSION_CODES.Q)",
        "class GestureDetector(",
        "    private val airPodsService: AirPodsService",
        ") {",
        "    companion object {",
        "        private const val TAG = \"GestureDetector\"",
        "",
        "        private const val IMMEDIATE_FEEDBACK_THRESHOLD = 600",
        "        private const val DIRECTION_CHANGE_SENSITIVITY = 150",
        "",
        "        private const val FAST_MOVEMENT_THRESHOLD = 300.0",
        "        private const val MIN_REQUIRED_EXTREMES = 3",
        "        private const val MAX_REQUIRED_EXTREMES = 4",
        "",
        "        private const val MAX_VALID_ORIENTATION_VALUE = 6000",
        "    }",
        "",
        "    val audio = GestureFeedback(ServiceManager.getService()?.baseContext!!)",
        "",
        "    private val horizontalBuffer = Collections.synchronizedList(ArrayList<Double>())",
        "    private val verticalBuffer = Collections.synchronizedList(ArrayList<Double>())",
        "",
        "    private val horizontalAvgBuffer = Collections.synchronizedList(ArrayList<Double>())",
        "    private val verticalAvgBuffer = Collections.synchronizedList(ArrayList<Double>())",
        "",
        "    private var prevHorizontal: Double = 0.0",
        "    private var prevVertical: Double = 0.0",
        "",
        "    private val horizontalPeaks = CopyOnWriteArrayList<Triple<Int, Double, Long>>()",
        "    private val horizontalTroughs = CopyOnWriteArrayList<Triple<Int, Double, Long>>()",
        "    private val verticalPeaks = CopyOnWriteArrayList<Triple<Int, Double, Long>>()",
        "    private val verticalTroughs = CopyOnWriteArrayList<Triple<Int, Double, Long>>()",
        "",
        "    private var lastPeakTime: Long = 0",
        "    private val peakIntervals = Collections.synchronizedList(ArrayList<Double>())",
        "",
        "    private val movementSpeedIntervals = Collections.synchronizedList(ArrayList<Long>())",
        "",
        "    private val peakThreshold = 400",
        "    private val directionChangeThreshold = DIRECTION_CHANGE_SENSITIVITY",
        "    private val rhythmConsistencyThreshold = 0.5",
        "",
        "    private var horizontalIncreasing: Boolean? = null",
        "    private var verticalIncreasing: Boolean? = null",
        "",
        "    private val minConfidenceThreshold = 0.7",
        "",
        "    private var isRunning = false",
        "    private var detectionJob: Job? = null",
        "    private var gestureDetectedCallback: ((Boolean) -> Unit)? = null",
        "",
        "    private var significantMotion = false",
        "    private var lastSignificantMotionTime = 0L",
        "",
        "    init {",
        "        while (horizontalAvgBuffer.size < 3) horizontalAvgBuffer.add(0.0)",
        "        while (verticalAvgBuffer.size < 3) verticalAvgBuffer.add(0.0)"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/utils/BluetoothCryptography.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple's ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods Contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "package me.kavishdevar.librepods.utils",
        "",
        "import javax.crypto.Cipher",
        "import javax.crypto.spec.SecretKeySpec",
        "",
        "/**",
        " * Utilities for Bluetooth cryptography operations, particularly for",
        " * verifying Resolvable Private Addresses (RPA) used by AirPods.",
        " */",
        "object BluetoothCryptography {",
        "    ",
        "    /**",
        "     * Verifies if the provided Bluetooth address is an RPA that matches the given Identity Resolving Key (IRK)",
        "     * ",
        "     * @param addr The Bluetooth address to verify",
        "     * @param irk The Identity Resolving Key to use for verification",
        "     * @return true if the address is verified as an RPA matching the IRK",
        "     */",
        "    fun verifyRPA(addr: String, irk: ByteArray): Boolean {",
        "        val rpa = addr.split(\":\").map { it.toInt(16).toByte() }.reversed().toByteArray()",
        "        val prand = rpa.copyOfRange(3, 6)",
        "        val hash = rpa.copyOfRange(0, 3)",
        "        val computedHash = ah(irk, prand)",
        "        return hash.contentEquals(computedHash)",
        "    }",
        "",
        "    /**",
        "     * Performs E function (AES-128) as specified in Bluetooth Core Specification",
        "     * ",
        "     * @param key The key for encryption",
        "     * @param data The data to encrypt",
        "     * @return The encrypted data",
        "     */",
        "    fun e(key: ByteArray, data: ByteArray): ByteArray {",
        "        val swappedKey = key.reversedArray()",
        "        val swappedData = data.reversedArray()",
        "        val cipher = Cipher.getInstance(\"AES/ECB/NoPadding\")",
        "        val secretKey = SecretKeySpec(swappedKey, \"AES\")",
        "        cipher.init(Cipher.ENCRYPT_MODE, secretKey)",
        "        return cipher.doFinal(swappedData).reversedArray()",
        "    }",
        "",
        "    /**",
        "     * Performs the ah function as specified in Bluetooth Core Specification",
        "     * ",
        "     * @param k The IRK key",
        "     * @param r The random part of the address",
        "     * @return The hash part of the address",
        "     */",
        "    fun ah(k: ByteArray, r: ByteArray): ByteArray {",
        "        val rPadded = ByteArray(16)",
        "        r.copyInto(rPadded, 0, 0, 3)",
        "        val encrypted = e(k, rPadded)",
        "        return encrypted.copyOfRange(0, 3)",
        "    }",
        "}"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/utils/CrossDevice.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.utils",
        "",
        "import android.annotation.SuppressLint",
        "import android.bluetooth.BluetoothAdapter",
        "import android.bluetooth.BluetoothManager",
        "import android.bluetooth.BluetoothServerSocket",
        "import android.bluetooth.BluetoothSocket",
        "import android.bluetooth.le.AdvertiseCallback",
        "import android.bluetooth.le.AdvertiseData",
        "import android.bluetooth.le.AdvertiseSettings",
        "import android.bluetooth.le.BluetoothLeAdvertiser",
        "import android.content.Context",
        "import android.content.Intent",
        "import android.content.SharedPreferences",
        "import android.os.ParcelUuid",
        "import android.util.Log",
        "import kotlinx.coroutines.CoroutineScope",
        "import kotlinx.coroutines.Dispatchers",
        "import kotlinx.coroutines.delay",
        "import kotlinx.coroutines.launch",
        "import me.kavishdevar.librepods.services.ServiceManager",
        "import java.io.IOException",
        "import java.util.UUID",
        "import kotlin.io.encoding.ExperimentalEncodingApi",
        "",
        "enum class CrossDevicePackets(val packet: ByteArray) {",
        "    AIRPODS_CONNECTED(byteArrayOf(0x00, 0x01, 0x00, 0x01)),",
        "    AIRPODS_DISCONNECTED(byteArrayOf(0x00, 0x01, 0x00, 0x00)),",
        "    REQUEST_DISCONNECT(byteArrayOf(0x00, 0x02, 0x00, 0x00)),",
        "    REQUEST_BATTERY_BYTES(byteArrayOf(0x00, 0x02, 0x00, 0x01)),",
        "    REQUEST_ANC_BYTES(byteArrayOf(0x00, 0x02, 0x00, 0x02)),",
        "    REQUEST_CONNECTION_STATUS(byteArrayOf(0x00, 0x02, 0x00, 0x03)),",
        "    AIRPODS_DATA_HEADER(byteArrayOf(0x00, 0x04, 0x00, 0x01)),",
        "}",
        "",
        "",
        "object CrossDevice {",
        "    var initialized = false",
        "    private val uuid = UUID.fromString(\"1abbb9a4-10e4-4000-a75c-8953c5471342\")",
        "    private var serverSocket: BluetoothServerSocket? = null",
        "    private var clientSocket: BluetoothSocket? = null",
        "    private lateinit var bluetoothAdapter: BluetoothAdapter",
        "    private lateinit var bluetoothLeAdvertiser: BluetoothLeAdvertiser",
        "    private const val MANUFACTURER_ID = 0x1234",
        "    private const val MANUFACTURER_DATA = \"ALN_AirPods\"",
        "    var isAvailable: Boolean = false // set to true when airpods are connected to another device",
        "    var batteryBytes: ByteArray = byteArrayOf()",
        "    var ancBytes: ByteArray = byteArrayOf()",
        "    private lateinit var sharedPreferences: SharedPreferences",
        "    private const val PACKET_LOG_KEY = \"packet_log\"",
        "    private var earDetectionStatus = listOf(false, false)",
        "    var disconnectionRequested = false",
        "",
        "    @SuppressLint(\"MissingPermission\")",
        "    fun init(context: Context) {",
        "        CoroutineScope(Dispatchers.IO).launch {",
        "            Log.d(\"CrossDevice\", \"Initializing CrossDevice\")",
        "            sharedPreferences = context.getSharedPreferences(\"packet_logs\", Context.MODE_PRIVATE)",
        "            sharedPreferences.edit().putBoolean(\"CrossDeviceIsAvailable\", false).apply()",
        "            this@CrossDevice.bluetoothAdapter = context.getSystemService(BluetoothManager::class.java).adapter"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/utils/RadareOffsetFinder.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.utils",
        "",
        "import android.content.Context",
        "import android.util.Log",
        "import androidx.compose.runtime.NoLiveLiterals",
        "import kotlinx.coroutines.Dispatchers",
        "import kotlinx.coroutines.flow.MutableStateFlow",
        "import kotlinx.coroutines.flow.StateFlow",
        "import kotlinx.coroutines.withContext",
        "import me.kavishdevar.librepods.services.ServiceManager",
        "import java.io.BufferedReader",
        "import java.io.File",
        "import java.io.FileOutputStream",
        "import java.io.InputStreamReader",
        "import java.net.HttpURLConnection",
        "import java.net.URL",
        "import kotlin.io.encoding.ExperimentalEncodingApi",
        "",
        "@NoLiveLiterals",
        "class RadareOffsetFinder(context: Context) {",
        "    companion object {",
        "        private const val TAG = \"RadareOffsetFinder\"",
        "        private const val RADARE2_URL = \"https://hc-cdn.hel1.your-objectstorage.com/s/v3/c9898243c42c0d3d1387de9a37d57ce9df77f9c9_radare2-5.9.9-android-aarch64.tar.gz\"",
        "        private const val HOOK_OFFSET_PROP = \"persist.librepods.hook_offset\"",
        "        private const val CFG_REQ_OFFSET_PROP = \"persist.librepods.cfg_req_offset\"",
        "        private const val CSM_CONFIG_OFFSET_PROP = \"persist.librepods.csm_config_offset\"",
        "        private const val PEER_INFO_REQ_OFFSET_PROP = \"persist.librepods.peer_info_req_offset\"",
        "        private const val EXTRACT_DIR = \"/\"",
        "",
        "        private const val RADARE2_BIN_PATH = \"$EXTRACT_DIR/data/local/tmp/aln_unzip/org.radare.radare2installer/radare2/bin\"",
        "        private const val RADARE2_LIB_PATH = \"$EXTRACT_DIR/data/local/tmp/aln_unzip/org.radare.radare2installer/radare2/lib\"",
        "        private const val BUSYBOX_PATH = \"$EXTRACT_DIR/data/local/tmp/aln_unzip/busybox\"",
        "",
        "        private val LIBRARY_PATHS = listOf(",
        "            \"/apex/com.android.bt/lib64/libbluetooth_jni.so\",",
        "            \"/apex/com.android.btservices/lib64/libbluetooth_jni.so\",",
        "            \"/system/lib64/libbluetooth_jni.so\",",
        "            \"/system/lib64/libbluetooth_qti.so\",",
        "            \"/system_ext/lib64/libbluetooth_qti.so\"",
        "        )",
        "",
        "        fun findBluetoothLibraryPath(): String? {",
        "            for (path in LIBRARY_PATHS) {",
        "                if (File(path).exists()) {",
        "                    Log.d(TAG, \"Found Bluetooth library at $path\")",
        "                    return path",
        "                }",
        "            }",
        "            Log.e(TAG, \"Could not find Bluetooth library\")",
        "            return null",
        "        }",
        "",
        "        fun clearHookOffsets(): Boolean {",
        "            try {",
        "                val process = Runtime.getRuntime().exec(arrayOf(",
        "                    \"su\", \"-c\",",
        "                    \"setprop $HOOK_OFFSET_PROP '' && \" +",
        "                    \"setprop $CFG_REQ_OFFSET_PROP '' && \" +",
        "                    \"setprop $CSM_CONFIG_OFFSET_PROP '' && \" +",
        "                    \"setprop $PEER_INFO_REQ_OFFSET_PROP ''\""
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/utils/BluetoothConnectionManager.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple's ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods Contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "package me.kavishdevar.librepods.utils",
        "",
        "import android.bluetooth.BluetoothDevice",
        "import android.bluetooth.BluetoothSocket",
        "import android.util.Log",
        "",
        "object BluetoothConnectionManager {",
        "    private const val TAG = \"BluetoothConnectionManager\"",
        "",
        "    private var currentSocket: BluetoothSocket? = null",
        "    private var currentDevice: BluetoothDevice? = null",
        "",
        "    fun setCurrentConnection(socket: BluetoothSocket, device: BluetoothDevice) {",
        "        currentSocket = socket",
        "        currentDevice = device",
        "        Log.d(TAG, \"Current connection set to device: ${device.address}\")",
        "    }",
        "",
        "    fun getCurrentSocket(): BluetoothSocket? {",
        "        return currentSocket",
        "    }",
        "}"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/services/AirPodsService.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods Contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.services",
        "",
        "import android.Manifest",
        "import android.annotation.SuppressLint",
        "import android.app.Notification",
        "import android.app.NotificationChannel",
        "import android.app.NotificationManager",
        "import android.app.PendingIntent",
        "import android.app.Service",
        "import android.appwidget.AppWidgetManager",
        "import android.bluetooth.BluetoothDevice",
        "import android.bluetooth.BluetoothManager",
        "import android.bluetooth.BluetoothProfile",
        "import android.bluetooth.BluetoothSocket",
        "import android.content.BroadcastReceiver",
        "import android.content.ComponentName",
        "import android.content.ContentResolver",
        "import android.content.Context",
        "import android.content.Intent",
        "import android.content.IntentFilter",
        "import android.content.SharedPreferences",
        "import android.content.pm.PackageManager",
        "import android.content.res.Resources",
        "import android.media.AudioManager",
        "import android.net.Uri",
        "import android.os.BatteryManager",
        "import android.os.Binder",
        "import android.os.Build",
        "import android.os.Handler",
        "import android.os.IBinder",
        "import android.os.Looper",
        "import android.os.ParcelUuid",
        "import android.os.UserHandle",
        "import android.provider.Settings",
        "import android.telecom.TelecomManager",
        "import android.telephony.PhoneStateListener",
        "import android.telephony.TelephonyManager",
        "import android.util.Log",
        "import android.util.TypedValue",
        "import android.view.View",
        "import android.widget.RemoteViews",
        "import android.widget.Toast",
        "import androidx.annotation.RequiresApi",
        "import androidx.annotation.RequiresPermission",
        "import androidx.compose.material3.ExperimentalMaterial3Api",
        "import androidx.core.app.NotificationCompat",
        "import androidx.core.content.edit",
        "import kotlinx.coroutines.CoroutineScope",
        "import kotlinx.coroutines.Dispatchers",
        "import kotlinx.coroutines.ExperimentalCoroutinesApi",
        "import kotlinx.coroutines.delay",
        "import kotlinx.coroutines.flow.MutableStateFlow",
        "import kotlinx.coroutines.flow.StateFlow",
        "import kotlinx.coroutines.launch",
        "import kotlinx.coroutines.runBlocking",
        "import kotlinx.coroutines.suspendCancellableCoroutine",
        "import kotlinx.coroutines.withTimeout",
        "import me.kavishdevar.librepods.MainActivity",
        "import me.kavishdevar.librepods.R",
        "import me.kavishdevar.librepods.constants.AirPodsNotifications"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/services/AirPodsQSService.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods Contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.services",
        "",
        "import android.annotation.SuppressLint",
        "import android.app.PendingIntent",
        "import android.content.BroadcastReceiver",
        "import android.content.Context",
        "import android.content.Intent",
        "import android.content.IntentFilter",
        "import android.content.SharedPreferences",
        "import android.graphics.drawable.Icon",
        "import android.os.Build",
        "import android.service.quicksettings.Tile",
        "import android.service.quicksettings.TileService",
        "import android.util.Log",
        "import androidx.annotation.RequiresApi",
        "import me.kavishdevar.librepods.QuickSettingsDialogActivity",
        "import me.kavishdevar.librepods.R",
        "import me.kavishdevar.librepods.constants.AirPodsNotifications",
        "import me.kavishdevar.librepods.constants.NoiseControlMode",
        "import me.kavishdevar.librepods.utils.AACPManager",
        "import kotlin.io.encoding.ExperimentalEncodingApi",
        "",
        "@RequiresApi(Build.VERSION_CODES.Q)",
        "class AirPodsQSService : TileService() {",
        "",
        "    private lateinit var sharedPreferences: SharedPreferences",
        "    private var currentAncMode: Int = NoiseControlMode.OFF.ordinal + 1",
        "    private var isAirPodsConnected: Boolean = false",
        "",
        "    private val ancStatusReceiver = object : BroadcastReceiver() {",
        "        override fun onReceive(context: Context, intent: Intent) {",
        "            if (intent.action == AirPodsNotifications.ANC_DATA) {",
        "                val newMode = intent.getIntExtra(\"data\", NoiseControlMode.OFF.ordinal + 1)",
        "                Log.d(\"AirPodsQSService\", \"Received ANC update: $newMode\")",
        "                currentAncMode = newMode",
        "                updateTile()",
        "            }",
        "        }",
        "    }",
        "",
        "    private val availabilityReceiver = object : BroadcastReceiver() {",
        "        override fun onReceive(context: Context, intent: Intent) {",
        "            when (intent.action) {",
        "                AirPodsNotifications.AIRPODS_CONNECTED -> {",
        "                    Log.d(\"AirPodsQSService\", \"Received AIRPODS_CONNECTED\")",
        "                    isAirPodsConnected = true",
        "                    currentAncMode =",
        "                        ServiceManager.getService()?.getANC() ?: (NoiseControlMode.OFF.ordinal + 1)",
        "                    updateTile()",
        "                }",
        "                AirPodsNotifications.AIRPODS_DISCONNECTED -> {",
        "                    Log.d(\"AirPodsQSService\", \"Received AIRPODS_DISCONNECTED\")",
        "                    isAirPodsConnected = false",
        "                    updateTile()",
        "                }",
        "            }",
        "        }",
        "    }",
        "",
        "    private val preferenceChangeListener = SharedPreferences.OnSharedPreferenceChangeListener { _, key ->"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/constants/Packets.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "package me.kavishdevar.librepods.constants",
        "",
        "import android.os.Parcelable",
        "import android.util.Log",
        "import kotlinx.parcelize.Parcelize",
        "",
        "enum class Enums(val value: ByteArray) {",
        "    NOISE_CANCELLATION(Capabilities.NOISE_CANCELLATION),",
        "    PREFIX(byteArrayOf(0x04, 0x00, 0x04, 0x00)),",
        "    SETTINGS(byteArrayOf(0x09, 0x00)),",
        "    NOISE_CANCELLATION_PREFIX(PREFIX.value + SETTINGS.value + NOISE_CANCELLATION.value),",
        "    CONVERSATION_AWARENESS_RECEIVE_PREFIX(PREFIX.value + byteArrayOf(0x4b, 0x00, 0x02, 0x00)),",
        "}",
        "",
        "object BatteryComponent {",
        "    const val LEFT = 4",
        "    const val RIGHT = 2",
        "    const val CASE = 8",
        "}",
        "",
        "object BatteryStatus {",
        "    const val CHARGING = 1",
        "    const val NOT_CHARGING = 2",
        "    const val DISCONNECTED = 4",
        "}",
        "",
        "@Parcelize",
        "data class Battery(val component: Int, val level: Int, val status: Int) : Parcelable {",
        "    fun getComponentName(): String? {",
        "        return when (component) {",
        "            BatteryComponent.LEFT -> \"LEFT\"",
        "            BatteryComponent.RIGHT -> \"RIGHT\"",
        "            BatteryComponent.CASE -> \"CASE\"",
        "            else -> null",
        "        }",
        "    }",
        "",
        "    fun getStatusName(): String? {",
        "        return when (status) {",
        "            BatteryStatus.CHARGING -> \"CHARGING\"",
        "            BatteryStatus.NOT_CHARGING -> \"NOT_CHARGING\"",
        "            BatteryStatus.DISCONNECTED -> \"DISCONNECTED\"",
        "            else -> null",
        "        }",
        "    }",
        "}",
        "",
        "enum class NoiseControlMode {",
        "    OFF,  NOISE_CANCELLATION, TRANSPARENCY, ADAPTIVE",
        "}",
        "",
        "class AirPodsNotifications {",
        "    companion object {",
        "        const val AIRPODS_CONNECTED = \"me.kavishdevar.librepods.AIRPODS_CONNECTED\"",
        "        const val AIRPODS_DATA = \"me.kavishdevar.librepods.AIRPODS_DATA\"",
        "        const val EAR_DETECTION_DATA = \"me.kavishdevar.librepods.EAR_DETECTION_DATA\"",
        "        const val ANC_DATA = \"me.kavishdevar.librepods.ANC_DATA\"",
        "        const val BATTERY_DATA = \"me.kavishdevar.librepods.BATTERY_DATA\"",
        "        const val CA_DATA = \"me.kavishdevar.librepods.CA_DATA\"",
        "        const val AIRPODS_DISCONNECTED = \"me.kavishdevar.librepods.AIRPODS_DISCONNECTED\"",
        "        const val AIRPODS_CONNECTION_DETECTED = \"me.kavishdevar.librepods.AIRPODS_CONNECTION_DETECTED\"",
        "        const val DISCONNECT_RECEIVERS = \"me.kavishdevar.librepods.DISCONNECT_RECEIVERS\""
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/constants/StemAction.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "package me.kavishdevar.librepods.constants",
        "",
        "import me.kavishdevar.librepods.constants.StemAction.entries",
        "import me.kavishdevar.librepods.utils.AACPManager",
        "",
        "enum class StemAction {",
        "    PLAY_PAUSE,",
        "    PREVIOUS_TRACK,",
        "    NEXT_TRACK,",
        "    CAMERA_SHUTTER,",
        "    DIGITAL_ASSISTANT,",
        "    CYCLE_NOISE_CONTROL_MODES;",
        "    companion object {",
        "        fun fromString(action: String): StemAction? {",
        "            return entries.find { it.name == action }",
        "        }",
        "        val defaultActions: Map<AACPManager.Companion.StemPressType, StemAction> = mapOf(",
        "            AACPManager.Companion.StemPressType.SINGLE_PRESS to PLAY_PAUSE,",
        "            AACPManager.Companion.StemPressType.DOUBLE_PRESS to NEXT_TRACK,",
        "            AACPManager.Companion.StemPressType.TRIPLE_PRESS to PREVIOUS_TRACK,",
        "            AACPManager.Companion.StemPressType.LONG_PRESS to CYCLE_NOISE_CONTROL_MODES,",
        "        )",
        "    }",
        "}"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/composables/StyledSwitch.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " * ",
        " * Copyright (C) 2025 LibrePods contributors",
        " * ",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " * ",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " * ",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "package me.kavishdevar.librepods.composables",
        "",
        "import androidx.compose.animation.core.animateDpAsState",
        "import androidx.compose.foundation.background",
        "import androidx.compose.foundation.clickable",
        "import androidx.compose.foundation.isSystemInDarkTheme",
        "import androidx.compose.foundation.layout.Box",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.offset",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.layout.size",
        "import androidx.compose.foundation.layout.width",
        "import androidx.compose.foundation.shape.CircleShape",
        "import androidx.compose.foundation.shape.RoundedCornerShape",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.getValue",
        "import androidx.compose.ui.Alignment",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.draw.clip",
        "import androidx.compose.ui.graphics.Color",
        "import androidx.compose.ui.tooling.preview.Preview",
        "import androidx.compose.ui.unit.dp",
        "",
        "@Composable",
        "fun StyledSwitch(",
        "    checked: Boolean,",
        "    onCheckedChange: (Boolean) -> Unit,",
        "    enabled: Boolean = true,",
        ") {",
        "    val isDarkTheme = isSystemInDarkTheme()",
        "",
        "    val thumbColor = Color.White",
        "    val trackColor = if (enabled) (",
        "        if (isDarkTheme) {",
        "            if (checked) Color(0xFF34C759) else Color(0xFF5B5B5E)",
        "        } else {",
        "            if (checked) Color(0xFF34C759) else Color(0xFFD1D1D6)",
        "        }",
        "    ) else {",
        "        if (isDarkTheme) Color(0xFF5B5B5E) else Color(0xFFD1D1D6)",
        "    }",
        "",
        "",
        "    val thumbOffsetX by animateDpAsState(targetValue = if (checked) 20.dp else 0.dp, label = \"Test\")",
        "",
        "    Box(",
        "        modifier = Modifier",
        "            .width(51.dp)",
        "            .height(31.dp)",
        "            .clip(RoundedCornerShape(15.dp))",
        "            .background(trackColor) // Dynamic track background",
        "            .padding(horizontal = 3.dp),",
        "        contentAlignment = Alignment.CenterStart",
        "    ) {",
        "        Box(",
        "            modifier = Modifier",
        "                .offset(x = thumbOffsetX)",
        "                .size(27.dp)",
        "                .clip(CircleShape)",
        "                .background(thumbColor)",
        "                .clickable { if (enabled) onCheckedChange(!checked) }",
        "        )"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/composables/NavigationButton.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " * ",
        " * Copyright (C) 2025 LibrePods contributors",
        " * ",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " * ",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " * ",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "package me.kavishdevar.librepods.composables",
        "",
        "import androidx.compose.animation.animateColorAsState",
        "import androidx.compose.animation.core.tween",
        "import androidx.compose.foundation.background",
        "import androidx.compose.foundation.gestures.detectTapGestures",
        "import androidx.compose.foundation.isSystemInDarkTheme",
        "import androidx.compose.foundation.layout.Row",
        "import androidx.compose.foundation.layout.Spacer",
        "import androidx.compose.foundation.layout.fillMaxHeight",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.shape.RoundedCornerShape",
        "import androidx.compose.material.icons.Icons",
        "import androidx.compose.material.icons.filled.KeyboardArrowRight",
        "import androidx.compose.material3.Icon",
        "import androidx.compose.material3.IconButton",
        "import androidx.compose.material3.IconButtonDefaults",
        "import androidx.compose.material3.Text",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.getValue",
        "import androidx.compose.runtime.mutableStateOf",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.runtime.setValue",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.graphics.Color",
        "import androidx.compose.ui.input.pointer.pointerInput",
        "import androidx.compose.ui.platform.LocalContext",
        "import androidx.compose.ui.tooling.preview.Preview",
        "import androidx.compose.ui.unit.dp",
        "import androidx.navigation.NavController",
        "",
        "",
        "@Composable",
        "fun NavigationButton(to: String, name: String, navController: NavController) {",
        "    val isDarkTheme = isSystemInDarkTheme()",
        "    var backgroundColor by remember { mutableStateOf(if (isDarkTheme) Color(0xFF1C1C1E) else Color(0xFFFFFFFF)) }",
        "    val animatedBackgroundColor by animateColorAsState(targetValue = backgroundColor, animationSpec = tween(durationMillis = 500))",
        "",
        "    Row(",
        "        modifier = Modifier",
        "            .background(animatedBackgroundColor, RoundedCornerShape(14.dp))",
        "            .height(55.dp)",
        "            .pointerInput(Unit) {",
        "                detectTapGestures(",
        "                    onPress = {",
        "                        backgroundColor = if (isDarkTheme) Color(0x40888888) else Color(0x40D9D9D9)",
        "                        tryAwaitRelease()",
        "                        backgroundColor = if (isDarkTheme) Color(0xFF1C1C1E) else Color(0xFFFFFFFF)",
        "                    },",
        "                    onTap = {",
        "                        navController.navigate(to)",
        "                    }",
        "                )",
        "            }",
        "    ) {",
        "        Text(",
        "            text = name,",
        "            modifier = Modifier.padding(16.dp),",
        "            color = if (isDarkTheme) Color.White else Color.Black",
        "        )",
        "        Spacer(modifier = Modifier.weight(1f))"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/composables/NoiseControlButton.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " * ",
        " * Copyright (C) 2025 LibrePods contributors",
        " * ",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " * ",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " * ",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "package me.kavishdevar.librepods.composables",
        "",
        "import androidx.compose.foundation.clickable",
        "import androidx.compose.foundation.interaction.MutableInteractionSource",
        "import androidx.compose.foundation.layout.Arrangement",
        "import androidx.compose.foundation.layout.Column",
        "import androidx.compose.foundation.layout.fillMaxHeight",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.layout.size",
        "import androidx.compose.material3.Icon",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.ui.Alignment",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.graphics.Color",
        "import androidx.compose.ui.graphics.ImageBitmap",
        "import androidx.compose.ui.res.imageResource",
        "import androidx.compose.ui.tooling.preview.Preview",
        "import androidx.compose.ui.unit.dp",
        "import me.kavishdevar.librepods.R",
        "",
        "@Composable",
        "fun NoiseControlButton(",
        "    icon: ImageBitmap,",
        "    onClick: () -> Unit,",
        "    textColor: Color,",
        "    modifier: Modifier = Modifier,",
        "    usePadding: Boolean = true",
        ") {",
        "    Column(",
        "        modifier = modifier",
        "            .fillMaxHeight()",
        "            .then(if (usePadding) Modifier.padding(horizontal = 4.dp, vertical = 4.dp) else Modifier)",
        "            .clickable(",
        "                onClick = onClick,",
        "                indication = null,",
        "                interactionSource = remember { MutableInteractionSource() }",
        "            ),",
        "        horizontalAlignment = Alignment.CenterHorizontally,",
        "        verticalArrangement = Arrangement.Center",
        "    ) {",
        "        Icon(",
        "            bitmap = icon,",
        "            contentDescription = null,",
        "            tint = textColor,",
        "            modifier = Modifier.size(40.dp)",
        "        )",
        "    }",
        "}",
        "",
        "@Preview",
        "@Composable",
        "fun NoiseControlButtonPreview() {",
        "    NoiseControlButton(",
        "        icon = ImageBitmap.imageResource(R.drawable.noise_cancellation),",
        "        onClick = {},",
        "        textColor = Color.White,",
        "    )",
        "}"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/composables/CustomDropdown.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "package me.kavishdevar.librepods.composables",
        "",
        "import androidx.compose.animation.core.Spring",
        "import androidx.compose.animation.core.animateDpAsState",
        "import androidx.compose.animation.core.animateFloatAsState",
        "import androidx.compose.animation.core.spring",
        "import androidx.compose.foundation.background",
        "import androidx.compose.foundation.clickable",
        "import androidx.compose.foundation.interaction.MutableInteractionSource",
        "import androidx.compose.foundation.isSystemInDarkTheme",
        "import androidx.compose.foundation.layout.Column",
        "import androidx.compose.foundation.layout.Row",
        "import androidx.compose.foundation.layout.Spacer",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.layout.widthIn",
        "import androidx.compose.foundation.shape.RoundedCornerShape",
        "import androidx.compose.material3.Text",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.getValue",
        "import androidx.compose.runtime.mutableStateOf",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.runtime.setValue",
        "import androidx.compose.ui.Alignment",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.draw.scale",
        "import androidx.compose.ui.geometry.Offset",
        "import androidx.compose.ui.graphics.Color",
        "import androidx.compose.ui.layout.onGloballyPositioned",
        "import androidx.compose.ui.platform.LocalDensity",
        "import androidx.compose.ui.text.font.Font",
        "import androidx.compose.ui.text.font.FontFamily",
        "import androidx.compose.ui.tooling.preview.Preview",
        "import androidx.compose.ui.unit.IntOffset",
        "import androidx.compose.ui.unit.dp",
        "import androidx.compose.ui.unit.sp",
        "import androidx.compose.ui.window.Popup",
        "import androidx.compose.ui.window.PopupProperties",
        "import me.kavishdevar.librepods.R",
        "",
        "class DropdownItem(val name: String, val onSelect: () -> Unit) {",
        "    fun select() {",
        "        onSelect()",
        "    }",
        "}",
        "",
        "@Composable",
        "fun CustomDropdown(name: String, description: String = \"\", items: List<DropdownItem>) {",
        "    val isDarkTheme = isSystemInDarkTheme()",
        "    val textColor = if (isDarkTheme) Color.White else Color.Black",
        "    val backgroundColor = if (isDarkTheme) Color(0xFF1C1C1E) else Color(0xFFFFFFFF)",
        "    var expanded by remember { mutableStateOf(false) }",
        "    var offset by remember { mutableStateOf(IntOffset.Zero) }",
        "    var popupHeight by remember { mutableStateOf(0.dp) }",
        "",
        "    val animatedHeight by animateDpAsState(",
        "        targetValue = if (expanded) popupHeight else 0.dp,",
        "        animationSpec = spring(dampingRatio = Spring.DampingRatioMediumBouncy, stiffness = Spring.StiffnessLow)",
        "    )",
        "    val animatedScale by animateFloatAsState(",
        "        targetValue = if (expanded) 1f else 0f,"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/composables/ControlCenterButton.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods Contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        " ",
        "package me.kavishdevar.librepods.composables",
        "",
        "import androidx.compose.animation.animateColorAsState",
        "import androidx.compose.foundation.background",
        "import androidx.compose.foundation.clickable",
        "import androidx.compose.foundation.interaction.MutableInteractionSource",
        "import androidx.compose.foundation.layout.Arrangement",
        "import androidx.compose.foundation.layout.Box",
        "import androidx.compose.foundation.layout.Column",
        "import androidx.compose.foundation.layout.Spacer",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.size",
        "import androidx.compose.foundation.shape.CircleShape",
        "import androidx.compose.material3.Icon",
        "import androidx.compose.material3.Text",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.getValue",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.ui.Alignment",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.draw.clip",
        "import androidx.compose.ui.graphics.Brush",
        "import androidx.compose.ui.graphics.Color",
        "import androidx.compose.ui.graphics.painter.Painter",
        "import androidx.compose.ui.text.font.FontWeight",
        "import androidx.compose.ui.text.style.TextAlign",
        "import androidx.compose.ui.unit.Dp",
        "import androidx.compose.ui.unit.dp",
        "import androidx.compose.ui.unit.sp",
        "",
        "private val SelectedColorBlue = Color(0xFF0A84FF)",
        "private val UnselectedColor = Color(0x593C3C3E)",
        "private val TextColor = Color.White",
        "private val IconTint = Color.White",
        "",
        "@Composable",
        "fun ControlCenterButton(",
        "    label: String,",
        "    icon: Painter,",
        "    onClick: () -> Unit,",
        "    modifier: Modifier = Modifier,",
        "    iconAreaSize: Dp,",
        "    isSelected: Boolean,",
        "    backgroundBrush: Brush? = null",
        ") {",
        "    val targetBackgroundColor = if (isSelected) SelectedColorBlue else UnselectedColor",
        "    val backgroundColor by animateColorAsState(",
        "        targetValue = targetBackgroundColor,",
        "        label = \"ButtonBackground\"",
        "    )",
        "",
        "    Column(",
        "        modifier = modifier,",
        "        horizontalAlignment = Alignment.CenterHorizontally,",
        "        verticalArrangement = Arrangement.Center",
        "    ) {",
        "        Box(",
        "            modifier = Modifier",
        "                .size(iconAreaSize)",
        "                .clip(CircleShape)",
        "                .background(backgroundBrush ?: Brush.linearGradient(colors=listOf(backgroundColor, backgroundColor)))",
        "                .clickable("
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/composables/BatteryIndicator.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " * ",
        " * Copyright (C) 2025 LibrePods contributors",
        " * ",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " * ",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " * ",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "package me.kavishdevar.librepods.composables",
        "",
        "",
        "import androidx.compose.animation.core.animateFloatAsState",
        "import androidx.compose.foundation.background",
        "import androidx.compose.foundation.border",
        "import androidx.compose.foundation.layout.Arrangement",
        "import androidx.compose.foundation.layout.Box",
        "import androidx.compose.foundation.layout.Column",
        "import androidx.compose.foundation.layout.Row",
        "import androidx.compose.foundation.layout.fillMaxHeight",
        "import androidx.compose.foundation.layout.fillMaxSize",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.layout.width",
        "import androidx.compose.foundation.shape.RoundedCornerShape",
        "import androidx.compose.material3.MaterialTheme",
        "import androidx.compose.material3.Text",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.getValue",
        "import androidx.compose.ui.Alignment",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.draw.scale",
        "import androidx.compose.ui.graphics.Color",
        "import androidx.compose.ui.text.TextStyle",
        "import androidx.compose.ui.text.font.Font",
        "import androidx.compose.ui.text.font.FontFamily",
        "import androidx.compose.ui.text.font.FontWeight",
        "import androidx.compose.ui.text.style.TextAlign",
        "import androidx.compose.ui.tooling.preview.Preview",
        "import androidx.compose.ui.unit.dp",
        "import androidx.compose.ui.unit.sp",
        "import me.kavishdevar.librepods.R",
        "",
        "@Composable",
        "fun BatteryIndicator(batteryPercentage: Int, charging: Boolean = false) {",
        "    val batteryOutlineColor = Color(0xFFBFBFBF)",
        "    val batteryFillColor = if (batteryPercentage > 30) Color(0xFF30D158) else Color(0xFFFC3C3C)",
        "    val batteryTextColor = MaterialTheme.colorScheme.onSurface",
        "",
        "    val batteryWidth = 40.dp",
        "    val batteryHeight = 15.dp",
        "    val batteryCornerRadius = 4.dp",
        "    val tipWidth = 5.dp",
        "    val tipHeight = batteryHeight * 0.375f",
        "",
        "    val animatedFillWidth by animateFloatAsState(targetValue = batteryPercentage / 100f)",
        "    val animatedScale by animateFloatAsState(targetValue = if (charging) 1.2f else 1f)",
        "",
        "    Column(",
        "        horizontalAlignment = Alignment.CenterHorizontally",
        "    ) {",
        "        Row(",
        "            verticalAlignment = Alignment.CenterVertically,",
        "            horizontalArrangement = Arrangement.spacedBy(0.dp),",
        "            modifier = Modifier.padding(bottom = 4.dp)",
        "        ) {",
        "            Box(",
        "                modifier = Modifier",
        "                    .width(batteryWidth)",
        "                    .height(batteryHeight)",
        "            ) {"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/composables/AdaptiveStrengthSlider.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.composables",
        "",
        "import androidx.compose.foundation.background",
        "import androidx.compose.foundation.isSystemInDarkTheme",
        "import androidx.compose.foundation.layout.Arrangement",
        "import androidx.compose.foundation.layout.Box",
        "import androidx.compose.foundation.layout.Column",
        "import androidx.compose.foundation.layout.Row",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.layout.size",
        "import androidx.compose.foundation.shape.CircleShape",
        "import androidx.compose.foundation.shape.RoundedCornerShape",
        "import androidx.compose.material3.ExperimentalMaterial3Api",
        "import androidx.compose.material3.Slider",
        "import androidx.compose.material3.SliderDefaults",
        "import androidx.compose.material3.Text",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.LaunchedEffect",
        "import androidx.compose.runtime.mutableFloatStateOf",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.ui.Alignment",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.draw.shadow",
        "import androidx.compose.ui.graphics.Color",
        "import androidx.compose.ui.text.TextStyle",
        "import androidx.compose.ui.text.font.FontWeight",
        "import androidx.compose.ui.tooling.preview.Preview",
        "import androidx.compose.ui.unit.dp",
        "import androidx.compose.ui.unit.sp",
        "import me.kavishdevar.librepods.services.ServiceManager",
        "import me.kavishdevar.librepods.utils.AACPManager",
        "import kotlin.io.encoding.ExperimentalEncodingApi",
        "import kotlin.math.roundToInt",
        "",
        "@OptIn(ExperimentalMaterial3Api::class)",
        "@Composable",
        "fun AdaptiveStrengthSlider() {",
        "    val sliderValue = remember { mutableFloatStateOf(0f) }",
        "    val service = ServiceManager.getService()!!",
        "    LaunchedEffect(sliderValue) {",
        "        val sliderValueFromAACP = service.aacpManager.controlCommandStatusList.find {",
        "            it.identifier == AACPManager.Companion.ControlCommandIdentifiers.AUTO_ANC_STRENGTH",
        "        }?.value?.takeIf { it.isNotEmpty() }?.get(0)",
        "        sliderValueFromAACP?.toFloat()?.let { sliderValue.floatValue = (100 - it) }",
        "    }",
        "",
        "    val isDarkTheme = isSystemInDarkTheme()",
        "",
        "    val trackColor = if (isDarkTheme) Color(0xFFB3B3B3) else Color(0xFFD9D9D9)",
        "    val thumbColor = if (isDarkTheme) Color(0xFFFFFFFF) else Color(0xFFFFFFFF)",
        "    val labelTextColor = if (isDarkTheme) Color.White else Color.Black",
        "",
        "    Column(",
        "        modifier = Modifier",
        "            .fillMaxWidth()",
        "            .padding(horizontal = 8.dp),",
        "        horizontalAlignment = Alignment.CenterHorizontally",
        "    ) {"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/composables/SinglePodANCSwitch.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.composables",
        "",
        "import androidx.compose.foundation.background",
        "import androidx.compose.foundation.clickable",
        "import androidx.compose.foundation.gestures.detectTapGestures",
        "import androidx.compose.foundation.interaction.MutableInteractionSource",
        "import androidx.compose.foundation.isSystemInDarkTheme",
        "import androidx.compose.foundation.layout.Column",
        "import androidx.compose.foundation.layout.Row",
        "import androidx.compose.foundation.layout.Spacer",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.shape.RoundedCornerShape",
        "import androidx.compose.material3.Text",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.getValue",
        "import androidx.compose.runtime.mutableStateOf",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.runtime.setValue",
        "import androidx.compose.ui.Alignment",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.graphics.Color",
        "import androidx.compose.ui.input.pointer.pointerInput",
        "import androidx.compose.ui.tooling.preview.Preview",
        "import androidx.compose.ui.unit.dp",
        "import androidx.compose.ui.unit.sp",
        "import me.kavishdevar.librepods.services.ServiceManager",
        "import me.kavishdevar.librepods.utils.AACPManager",
        "import kotlin.io.encoding.ExperimentalEncodingApi",
        "",
        "@Composable",
        "fun SinglePodANCSwitch() {",
        "    val service = ServiceManager.getService()!!",
        "    val singleANCEnabledValue = service.aacpManager.controlCommandStatusList.find {",
        "        it.identifier == AACPManager.Companion.ControlCommandIdentifiers.ONE_BUD_ANC_MODE",
        "    }?.value?.takeIf { it.isNotEmpty() }?.get(0)",
        "    var singleANCEnabled by remember {",
        "        mutableStateOf(",
        "            singleANCEnabledValue == 1.toByte()",
        "        )",
        "    }",
        "",
        "    fun updateSingleEnabled(enabled: Boolean) {",
        "        singleANCEnabled = enabled",
        "        service.aacpManager.sendControlCommand(",
        "            AACPManager.Companion.ControlCommandIdentifiers.ONE_BUD_ANC_MODE.value,",
        "            enabled",
        "        )",
        "    }",
        "",
        "    val isDarkTheme = isSystemInDarkTheme()",
        "    val textColor = if (isDarkTheme) Color.White else Color.Black",
        "",
        "    val isPressed = remember { mutableStateOf(false) }",
        "",
        "    Row(",
        "        modifier = Modifier",
        "            .fillMaxWidth()",
        "            .background("
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/composables/PressAndHoldSettings.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "package me.kavishdevar.librepods.composables",
        "",
        "import android.content.Context",
        "import androidx.compose.animation.animateColorAsState",
        "import androidx.compose.animation.core.tween",
        "import androidx.compose.foundation.background",
        "import androidx.compose.foundation.gestures.detectTapGestures",
        "import androidx.compose.foundation.isSystemInDarkTheme",
        "import androidx.compose.foundation.layout.Box",
        "import androidx.compose.foundation.layout.Column",
        "import androidx.compose.foundation.layout.Row",
        "import androidx.compose.foundation.layout.Spacer",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.shape.RoundedCornerShape",
        "import androidx.compose.material.icons.Icons",
        "import androidx.compose.material.icons.automirrored.filled.KeyboardArrowRight",
        "import androidx.compose.material3.HorizontalDivider",
        "import androidx.compose.material3.Icon",
        "import androidx.compose.material3.IconButton",
        "import androidx.compose.material3.Text",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.getValue",
        "import androidx.compose.runtime.mutableStateOf",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.runtime.setValue",
        "import androidx.compose.ui.Alignment",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.graphics.Color",
        "import androidx.compose.ui.input.pointer.pointerInput",
        "import androidx.compose.ui.platform.LocalContext",
        "import androidx.compose.ui.res.stringResource",
        "import androidx.compose.ui.text.TextStyle",
        "import androidx.compose.ui.text.font.Font",
        "import androidx.compose.ui.text.font.FontFamily",
        "import androidx.compose.ui.text.font.FontWeight",
        "import androidx.compose.ui.tooling.preview.Preview",
        "import androidx.compose.ui.unit.dp",
        "import androidx.compose.ui.unit.sp",
        "import androidx.navigation.NavController",
        "import me.kavishdevar.librepods.R",
        "import me.kavishdevar.librepods.constants.StemAction",
        "",
        "@Composable",
        "fun PressAndHoldSettings(navController: NavController) {",
        "    val isDarkTheme = isSystemInDarkTheme()",
        "    val textColor = if (isDarkTheme) Color.White else Color.Black",
        "    val dividerColor = Color(0x40888888)",
        "    var leftBackgroundColor by remember { mutableStateOf(if (isDarkTheme) Color(0xFF1C1C1E) else Color(0xFFFFFFFF)) }",
        "    var rightBackgroundColor by remember { mutableStateOf(if (isDarkTheme) Color(0xFF1C1C1E) else Color(0xFFFFFFFF)) }",
        "",
        "    val animationSpec = tween<Color>(durationMillis = 500)",
        "    val animatedLeftBackgroundColor by animateColorAsState(targetValue = leftBackgroundColor, animationSpec = animationSpec)",
        "    val animatedRightBackgroundColor by animateColorAsState(targetValue = rightBackgroundColor, animationSpec = animationSpec)",
        "",
        "    val context = LocalContext.current",
        "    val sharedPreferences = context.getSharedPreferences(\"settings\", Context.MODE_PRIVATE)",
        "",
        "    val leftAction = sharedPreferences.getString(\"left_long_press_action\", StemAction.CYCLE_NOISE_CONTROL_MODES.name)",
        "    val rightAction = sharedPreferences.getString(\"right_long_press_action\", StemAction.CYCLE_NOISE_CONTROL_MODES.name)",
        ""
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/composables/NoiseControlSettings.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.composables",
        "",
        "import android.annotation.SuppressLint",
        "import android.content.BroadcastReceiver",
        "import android.content.Context",
        "import android.content.Intent",
        "import android.content.IntentFilter",
        "import android.os.Build",
        "import androidx.compose.animation.core.AnimationSpec",
        "import androidx.compose.animation.core.Spring",
        "import androidx.compose.animation.core.SpringSpec",
        "import androidx.compose.animation.core.animateFloatAsState",
        "import androidx.compose.foundation.background",
        "import androidx.compose.foundation.gestures.Orientation",
        "import androidx.compose.foundation.gestures.draggable",
        "import androidx.compose.foundation.gestures.rememberDraggableState",
        "import androidx.compose.foundation.isSystemInDarkTheme",
        "import androidx.compose.foundation.layout.Box",
        "import androidx.compose.foundation.layout.BoxWithConstraints",
        "import androidx.compose.foundation.layout.Column",
        "import androidx.compose.foundation.layout.Row",
        "import androidx.compose.foundation.layout.fillMaxHeight",
        "import androidx.compose.foundation.layout.fillMaxSize",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.offset",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.layout.width",
        "import androidx.compose.foundation.shape.RoundedCornerShape",
        "import androidx.compose.material3.MaterialTheme",
        "import androidx.compose.material3.Text",
        "import androidx.compose.material3.VerticalDivider",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.getValue",
        "import androidx.compose.runtime.mutableFloatStateOf",
        "import androidx.compose.runtime.mutableStateOf",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.runtime.setValue",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.draw.alpha",
        "import androidx.compose.ui.graphics.Color",
        "import androidx.compose.ui.graphics.ImageBitmap",
        "import androidx.compose.ui.platform.LocalContext",
        "import androidx.compose.ui.platform.LocalDensity",
        "import androidx.compose.ui.res.imageResource",
        "import androidx.compose.ui.res.stringResource",
        "import androidx.compose.ui.text.TextStyle",
        "import androidx.compose.ui.text.font.FontWeight",
        "import androidx.compose.ui.text.style.TextAlign",
        "import androidx.compose.ui.tooling.preview.Preview",
        "import androidx.compose.ui.unit.IntOffset",
        "import androidx.compose.ui.unit.dp",
        "import androidx.compose.ui.unit.sp",
        "import androidx.compose.ui.zIndex",
        "import me.kavishdevar.librepods.R",
        "import me.kavishdevar.librepods.constants.AirPodsNotifications",
        "import me.kavishdevar.librepods.constants.NoiseControlMode",
        "import me.kavishdevar.librepods.services.AirPodsService",
        "import me.kavishdevar.librepods.utils.AACPManager",
        "import kotlin.io.encoding.ExperimentalEncodingApi"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/composables/IndependentToggle.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.composables",
        "",
        "import android.content.SharedPreferences",
        "import androidx.compose.animation.animateColorAsState",
        "import androidx.compose.animation.core.tween",
        "import androidx.compose.foundation.background",
        "import androidx.compose.foundation.gestures.detectTapGestures",
        "import androidx.compose.foundation.isSystemInDarkTheme",
        "import androidx.compose.foundation.layout.Box",
        "import androidx.compose.foundation.layout.Row",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.shape.RoundedCornerShape",
        "import androidx.compose.material3.Text",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.LaunchedEffect",
        "import androidx.compose.runtime.getValue",
        "import androidx.compose.runtime.mutableStateOf",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.runtime.setValue",
        "import androidx.compose.ui.Alignment",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.graphics.Color",
        "import androidx.compose.ui.input.pointer.pointerInput",
        "import androidx.compose.ui.platform.LocalContext",
        "import androidx.compose.ui.tooling.preview.Preview",
        "import androidx.compose.ui.unit.dp",
        "import androidx.compose.ui.unit.sp",
        "import me.kavishdevar.librepods.services.AirPodsService",
        "import me.kavishdevar.librepods.utils.AACPManager",
        "import kotlin.io.encoding.ExperimentalEncodingApi",
        "",
        "@Composable",
        "fun IndependentToggle(name: String, service: AirPodsService? = null, functionName: String? = null, sharedPreferences: SharedPreferences, default: Boolean = false, controlCommandIdentifier: AACPManager.Companion.ControlCommandIdentifiers? = null) {",
        "    val isDarkTheme = isSystemInDarkTheme()",
        "    val textColor = if (isDarkTheme) Color.White else Color.Black",
        "    val snakeCasedName =",
        "        controlCommandIdentifier?.name ?: name.replace(Regex(\"[\\\\W\\\\s]+\"), \"_\").lowercase()",
        "    var checked by remember { mutableStateOf(default) }",
        "",
        "    if (controlCommandIdentifier != null) {",
        "        checked = service!!.aacpManager.controlCommandStatusList.find {",
        "            it.identifier == controlCommandIdentifier",
        "        }?.value?.takeIf { it.isNotEmpty() }?.get(0) == 1.toByte()",
        "    }",
        "",
        "    var backgroundColor by remember { mutableStateOf(if (isDarkTheme) Color(0xFF1C1C1E) else Color(0xFFFFFFFF)) }",
        "    val animatedBackgroundColor by animateColorAsState(targetValue = backgroundColor, animationSpec = tween(durationMillis = 500))",
        "",
        "    fun cb() {",
        "        if (controlCommandIdentifier == null) {",
        "            sharedPreferences.edit().putBoolean(snakeCasedName, checked).apply()",
        "        }",
        "        if (functionName != null && service != null) {",
        "            val method =",
        "                service::class.java.getMethod(functionName, Boolean::class.java)",
        "            method.invoke(service, checked)",
        "        }",
        "        if (controlCommandIdentifier != null) {"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/composables/NameField.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " * ",
        " * Copyright (C) 2025 LibrePods contributors",
        " * ",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " * ",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " * ",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "package me.kavishdevar.librepods.composables",
        "",
        "import androidx.compose.animation.animateColorAsState",
        "import androidx.compose.animation.core.tween",
        "import androidx.compose.foundation.background",
        "import androidx.compose.foundation.gestures.detectTapGestures",
        "import androidx.compose.foundation.isSystemInDarkTheme",
        "import androidx.compose.foundation.layout.Arrangement",
        "import androidx.compose.foundation.layout.Box",
        "import androidx.compose.foundation.layout.Row",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.layout.size",
        "import androidx.compose.foundation.shape.RoundedCornerShape",
        "import androidx.compose.foundation.text.BasicTextField",
        "import androidx.compose.material.icons.Icons",
        "import androidx.compose.material.icons.automirrored.filled.KeyboardArrowRight",
        "import androidx.compose.material3.Icon",
        "import androidx.compose.material3.Text",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.getValue",
        "import androidx.compose.runtime.mutableStateOf",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.runtime.setValue",
        "import androidx.compose.ui.Alignment",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.focus.onFocusChanged",
        "import androidx.compose.ui.graphics.Color",
        "import androidx.compose.ui.graphics.SolidColor",
        "import androidx.compose.ui.input.pointer.pointerInput",
        "import androidx.compose.ui.text.TextStyle",
        "import androidx.compose.ui.text.style.TextAlign",
        "import androidx.compose.ui.tooling.preview.Preview",
        "import androidx.compose.ui.unit.dp",
        "import androidx.compose.ui.unit.sp",
        "import androidx.navigation.NavController",
        "import androidx.navigation.compose.rememberNavController",
        "",
        "@Composable",
        "fun NameField(",
        "    name: String,",
        "    value: String,",
        "    navController: NavController",
        ") {",
        "    var isFocused by remember { mutableStateOf(false) }",
        "",
        "    val isDarkTheme = isSystemInDarkTheme()",
        "",
        "    var backgroundColor by remember { mutableStateOf(if (isDarkTheme) Color(0xFF1C1C1E) else Color(0xFFFFFFFF)) }",
        "    val animatedBackgroundColor by animateColorAsState(targetValue = backgroundColor, animationSpec = tween(durationMillis = 500))",
        "",
        "    val textColor = if (isDarkTheme) Color.White else Color.Black",
        "    val cursorColor = if (isFocused) {",
        "        if (isDarkTheme) Color.White else Color.Black",
        "    } else {",
        "        Color.Transparent",
        "    }",
        "",
        "    Box (",
        "        modifier = Modifier",
        "            .background(animatedBackgroundColor, RoundedCornerShape(14.dp))"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/composables/VerticalVolumeSlider.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods Contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "package me.kavishdevar.librepods.composables",
        "",
        "import androidx.compose.animation.core.Spring",
        "import androidx.compose.animation.core.animateFloatAsState",
        "import androidx.compose.animation.core.spring",
        "import androidx.compose.foundation.background",
        "import androidx.compose.foundation.gestures.Orientation",
        "import androidx.compose.foundation.gestures.detectTapGestures",
        "import androidx.compose.foundation.gestures.draggable",
        "import androidx.compose.foundation.gestures.rememberDraggableState",
        "import androidx.compose.foundation.layout.Box",
        "import androidx.compose.foundation.layout.fillMaxHeight",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.offset",
        "import androidx.compose.foundation.layout.width",
        "import androidx.compose.foundation.shape.RoundedCornerShape",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.getValue",
        "import androidx.compose.runtime.mutableFloatStateOf",
        "import androidx.compose.runtime.mutableStateOf",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.runtime.setValue",
        "import androidx.compose.ui.Alignment",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.draw.clip",
        "import androidx.compose.ui.graphics.Color",
        "import androidx.compose.ui.input.pointer.pointerInput",
        "import androidx.compose.ui.platform.LocalDensity",
        "import androidx.compose.ui.unit.Dp",
        "import androidx.compose.ui.unit.dp",
        "import kotlin.math.abs",
        "import kotlin.math.max",
        "import kotlin.math.min",
        "import kotlin.math.roundToInt",
        "import kotlin.math.sign",
        "",
        "@Composable",
        "fun VerticalVolumeSlider(",
        "    displayFraction: Float,",
        "    maxVolume: Int,",
        "    onVolumeChange: (Int) -> Unit,",
        "    initialFraction: Float,",
        "    onDragStateChange: (Boolean) -> Unit,",
        "    modifier: Modifier = Modifier,",
        "    baseSliderHeight: Dp = 400.dp,",
        "    baseSliderWidth: Dp = 145.dp,",
        "    baseCornerRadius: Dp = 45.dp,",
        "    maxStretchFactor: Float = 1.15f,",
        "    minCompressionFactor: Float = 0.875f,",
        "    stretchSensitivity: Float = 1.0f,",
        "    compressionSensitivity: Float = 1.0f,",
        "    cornerRadiusChangeFactor: Float = 0.2f,",
        "    directionalStretchRatio: Float = 0.75f",
        ") {",
        "    val trackColor = Color(0x593C3C3E)",
        "    val progressColor = Color.White",
        "",
        "    var dragFraction by remember { mutableFloatStateOf(initialFraction) }",
        "    var isDragging by remember { mutableStateOf(false) }",
        "",
        "    var rawDragPosition by remember { mutableFloatStateOf(initialFraction) }"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/composables/ControlCenterNoiseControlSegmentedButton.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods Contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "package me.kavishdevar.librepods.composables",
        "",
        "import androidx.compose.animation.core.Spring",
        "import androidx.compose.animation.core.animateDpAsState",
        "import androidx.compose.animation.core.spring",
        "import androidx.compose.foundation.background",
        "import androidx.compose.foundation.clickable",
        "import androidx.compose.foundation.interaction.MutableInteractionSource",
        "import androidx.compose.foundation.layout.Arrangement",
        "import androidx.compose.foundation.layout.Box",
        "import androidx.compose.foundation.layout.Column",
        "import androidx.compose.foundation.layout.Row",
        "import androidx.compose.foundation.layout.Spacer",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.offset",
        "import androidx.compose.foundation.layout.size",
        "import androidx.compose.foundation.layout.width",
        "import androidx.compose.foundation.shape.CircleShape",
        "import androidx.compose.material3.Icon",
        "import androidx.compose.material3.Text",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.getValue",
        "import androidx.compose.runtime.mutableFloatStateOf",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.runtime.setValue",
        "import androidx.compose.ui.Alignment",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.draw.clip",
        "import androidx.compose.ui.graphics.Brush",
        "import androidx.compose.ui.graphics.Color",
        "import androidx.compose.ui.layout.onSizeChanged",
        "import androidx.compose.ui.platform.LocalDensity",
        "import androidx.compose.ui.res.painterResource",
        "import androidx.compose.ui.text.font.FontWeight",
        "import androidx.compose.ui.text.style.TextAlign",
        "import androidx.compose.ui.unit.Dp",
        "import androidx.compose.ui.unit.dp",
        "import androidx.compose.ui.unit.sp",
        "import me.kavishdevar.librepods.R",
        "import me.kavishdevar.librepods.constants.NoiseControlMode",
        "",
        "private val ContainerColor = Color(0x593C3C3E)",
        "private val SelectedIndicatorColorGray = Color(0xFF6C6C6E)",
        "private val SelectedIndicatorColorBlue = Color(0xFF0A84FF)",
        "private val TextColor = Color.White",
        "private val IconTintUnselected = Color.White",
        "private val IconTintSelected = Color.White",
        "",
        "internal val AdaptiveRainbowBrush = Brush.sweepGradient(",
        "    colors = listOf(",
        "        Color(0xFFB03A2F), Color(0xFFB07A2F), Color(0xFFB0A22F), Color(0xFF6AB02F),",
        "        Color(0xFF2FAAB0), Color(0xFF2F5EB0), Color(0xFF7D2FB0), Color(0xFFB02F7D),",
        "        Color(0xFFB03A2F)",
        "    )",
        ")",
        "",
        "internal val IconAreaSize = 72.dp",
        "private val IconSize = 42.dp",
        "private val IconRowHeight = IconAreaSize + 12.dp",
        "private val TextRowHeight = 24.dp",
        "private val TextSize = 12.sp"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/composables/BatteryView.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.composables",
        "",
        "import android.content.BroadcastReceiver",
        "import android.content.Context",
        "import android.content.Intent",
        "import android.content.IntentFilter",
        "import android.os.Build",
        "import android.util.Log",
        "import androidx.compose.foundation.Image",
        "import androidx.compose.foundation.layout.Arrangement",
        "import androidx.compose.foundation.layout.Column",
        "import androidx.compose.foundation.layout.Row",
        "import androidx.compose.foundation.layout.Spacer",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.width",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.LaunchedEffect",
        "import androidx.compose.runtime.mutableStateOf",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.ui.Alignment",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.draw.scale",
        "import androidx.compose.ui.graphics.ImageBitmap",
        "import androidx.compose.ui.platform.LocalContext",
        "import androidx.compose.ui.res.imageResource",
        "import androidx.compose.ui.res.stringResource",
        "import androidx.compose.ui.tooling.preview.Preview",
        "import androidx.compose.ui.unit.dp",
        "import me.kavishdevar.librepods.R",
        "import me.kavishdevar.librepods.constants.AirPodsNotifications",
        "import me.kavishdevar.librepods.constants.Battery",
        "import me.kavishdevar.librepods.constants.BatteryComponent",
        "import me.kavishdevar.librepods.constants.BatteryStatus",
        "import me.kavishdevar.librepods.services.AirPodsService",
        "import kotlin.io.encoding.ExperimentalEncodingApi",
        "",
        "@Composable",
        "fun BatteryView(service: AirPodsService, preview: Boolean = false) {",
        "    val batteryStatus = remember { mutableStateOf<List<Battery>>(listOf()) }",
        "    @Suppress(\"DEPRECATION\") val batteryReceiver = remember {",
        "        object : BroadcastReceiver() {",
        "            override fun onReceive(context: Context, intent: Intent) {",
        "                if (intent.action == AirPodsNotifications.BATTERY_DATA) {",
        "                    batteryStatus.value =",
        "                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {",
        "                            intent.getParcelableArrayListExtra(\"data\", Battery::class.java)",
        "                        } else {",
        "                            intent.getParcelableArrayListExtra(\"data\")",
        "                        }?.toList() ?: listOf()",
        "                }",
        "                else if (intent.action == AirPodsNotifications.DISCONNECT_RECEIVERS) {",
        "                    try {",
        "                        context.unregisterReceiver(this)",
        "                    }",
        "                    catch (_: IllegalArgumentException) {",
        "                        Log.wtf(\"BatteryReceiver\", \"Receiver already unregistered\")",
        "                    }",
        "                }",
        "            }",
        "        }"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/composables/AudioSettings.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.composables",
        "",
        "import androidx.compose.foundation.background",
        "import androidx.compose.foundation.isSystemInDarkTheme",
        "import androidx.compose.foundation.layout.Column",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.shape.RoundedCornerShape",
        "import androidx.compose.material3.Text",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.graphics.Color",
        "import androidx.compose.ui.res.stringResource",
        "import androidx.compose.ui.text.TextStyle",
        "import androidx.compose.ui.text.font.FontWeight",
        "import androidx.compose.ui.tooling.preview.Preview",
        "import androidx.compose.ui.unit.dp",
        "import androidx.compose.ui.unit.sp",
        "import me.kavishdevar.librepods.R",
        "import kotlin.io.encoding.ExperimentalEncodingApi",
        "",
        "@Composable",
        "fun AudioSettings() {",
        "    val isDarkTheme = isSystemInDarkTheme()",
        "    val textColor = if (isDarkTheme) Color.White else Color.Black",
        "",
        "    Text(",
        "        text = stringResource(R.string.audio).uppercase(),",
        "        style = TextStyle(",
        "            fontSize = 14.sp,",
        "            fontWeight = FontWeight.Light,",
        "            color = textColor.copy(alpha = 0.6f)",
        "        ),",
        "        modifier = Modifier.padding(8.dp, bottom = 2.dp)",
        "    )",
        "",
        "    val backgroundColor = if (isDarkTheme) Color(0xFF1C1C1E) else Color(0xFFFFFFFF)",
        "",
        "    Column(",
        "        modifier = Modifier",
        "            .fillMaxWidth()",
        "            .background(backgroundColor, RoundedCornerShape(14.dp))",
        "            .padding(top = 2.dp)",
        "    ) {",
        "",
        "        ConversationalAwarenessSwitch()",
        "",
        "        Column(",
        "            modifier = Modifier",
        "                .fillMaxWidth()",
        "                .padding(horizontal = 8.dp, vertical = 10.dp)",
        "        ) {",
        "            Text(",
        "                text = stringResource(R.string.adaptive_audio),",
        "                modifier = Modifier",
        "                    .padding(end = 8.dp, bottom = 2.dp, start = 2.dp)",
        "                    .fillMaxWidth(),",
        "                style = TextStyle(",
        "                    fontSize = 16.sp,",
        "                    color = textColor"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/composables/VolumeControlSwitch.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.composables",
        "",
        "import androidx.compose.foundation.background",
        "import androidx.compose.foundation.clickable",
        "import androidx.compose.foundation.gestures.detectTapGestures",
        "import androidx.compose.foundation.interaction.MutableInteractionSource",
        "import androidx.compose.foundation.isSystemInDarkTheme",
        "import androidx.compose.foundation.layout.Column",
        "import androidx.compose.foundation.layout.Row",
        "import androidx.compose.foundation.layout.Spacer",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.shape.RoundedCornerShape",
        "import androidx.compose.material3.Text",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.getValue",
        "import androidx.compose.runtime.mutableStateOf",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.runtime.setValue",
        "import androidx.compose.ui.Alignment",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.graphics.Color",
        "import androidx.compose.ui.input.pointer.pointerInput",
        "import androidx.compose.ui.tooling.preview.Preview",
        "import androidx.compose.ui.unit.dp",
        "import androidx.compose.ui.unit.sp",
        "import me.kavishdevar.librepods.services.ServiceManager",
        "import me.kavishdevar.librepods.utils.AACPManager",
        "import kotlin.io.encoding.ExperimentalEncodingApi",
        "",
        "@Composable",
        "fun VolumeControlSwitch() {",
        "    val service = ServiceManager.getService()!!",
        "    val volumeControlEnabledValue = service.aacpManager.controlCommandStatusList.find {",
        "        it.identifier == AACPManager.Companion.ControlCommandIdentifiers.VOLUME_SWIPE_MODE",
        "    }?.value?.takeIf { it.isNotEmpty() }?.get(0)",
        "    var volumeControlEnabled by remember {",
        "        mutableStateOf(",
        "            volumeControlEnabledValue == 1.toByte()",
        "        )",
        "    }",
        "    fun updateVolumeControlEnabled(enabled: Boolean) {",
        "        volumeControlEnabled = enabled",
        "        service.aacpManager.sendControlCommand(",
        "            AACPManager.Companion.ControlCommandIdentifiers.VOLUME_SWIPE_MODE.value,",
        "            enabled",
        "        )",
        "    }",
        "",
        "    val isDarkTheme = isSystemInDarkTheme()",
        "    val textColor = if (isDarkTheme) Color.White else Color.Black",
        "",
        "    val isPressed = remember { mutableStateOf(false) }",
        "",
        "    Row(",
        "        modifier = Modifier",
        "            .fillMaxWidth()",
        "            .background(",
        "                shape = RoundedCornerShape(14.dp),"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/composables/AccessibilitySettings.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.composables",
        "",
        "import androidx.compose.foundation.background",
        "import androidx.compose.foundation.clickable",
        "import androidx.compose.foundation.isSystemInDarkTheme",
        "import androidx.compose.foundation.layout.Box",
        "import androidx.compose.foundation.layout.Column",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.shape.RoundedCornerShape",
        "import androidx.compose.material3.DropdownMenu",
        "import androidx.compose.material3.DropdownMenuItem",
        "import androidx.compose.material3.Text",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.getValue",
        "import androidx.compose.runtime.mutableStateOf",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.runtime.setValue",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.graphics.Color",
        "import androidx.compose.ui.res.stringResource",
        "import androidx.compose.ui.text.TextStyle",
        "import androidx.compose.ui.text.font.FontWeight",
        "import androidx.compose.ui.tooling.preview.Preview",
        "import androidx.compose.ui.unit.dp",
        "import androidx.compose.ui.unit.sp",
        "import me.kavishdevar.librepods.R",
        "import me.kavishdevar.librepods.services.ServiceManager",
        "import me.kavishdevar.librepods.utils.AACPManager",
        "import kotlin.io.encoding.ExperimentalEncodingApi",
        "",
        "@Composable",
        "fun AccessibilitySettings() {",
        "    val isDarkTheme = isSystemInDarkTheme()",
        "    val textColor = if (isDarkTheme) Color.White else Color.Black",
        "    val backgroundColor = if (isDarkTheme) Color(0xFF1C1C1E) else Color(0xFFFFFFFF)",
        "    val service = ServiceManager.getService()!!",
        "    Text(",
        "        text = stringResource(R.string.accessibility).uppercase(),",
        "        style = TextStyle(",
        "            fontSize = 14.sp,",
        "            fontWeight = FontWeight.Light,",
        "            color = textColor.copy(alpha = 0.6f)",
        "        ),",
        "        modifier = Modifier.padding(8.dp, bottom = 2.dp)",
        "    )",
        "",
        "    Column(",
        "        modifier = Modifier",
        "            .fillMaxWidth()",
        "            .background(backgroundColor, RoundedCornerShape(14.dp))",
        "            .padding(top = 2.dp)",
        "    ) {",
        "        Column(",
        "            modifier = Modifier",
        "                .fillMaxWidth()",
        "                .padding(12.dp)",
        "        ) {",
        "            Text(",
        "                text = stringResource(R.string.tone_volume),"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/composables/ToneVolumeSlider.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.composables",
        "",
        "import android.util.Log",
        "import androidx.compose.foundation.background",
        "import androidx.compose.foundation.isSystemInDarkTheme",
        "import androidx.compose.foundation.layout.Arrangement",
        "import androidx.compose.foundation.layout.Box",
        "import androidx.compose.foundation.layout.Row",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.layout.size",
        "import androidx.compose.foundation.shape.CircleShape",
        "import androidx.compose.foundation.shape.RoundedCornerShape",
        "import androidx.compose.material3.ExperimentalMaterial3Api",
        "import androidx.compose.material3.Slider",
        "import androidx.compose.material3.SliderDefaults",
        "import androidx.compose.material3.Text",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.mutableFloatStateOf",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.ui.Alignment",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.draw.shadow",
        "import androidx.compose.ui.graphics.Color",
        "import androidx.compose.ui.text.TextStyle",
        "import androidx.compose.ui.text.font.Font",
        "import androidx.compose.ui.text.font.FontFamily",
        "import androidx.compose.ui.text.font.FontWeight",
        "import androidx.compose.ui.tooling.preview.Preview",
        "import androidx.compose.ui.unit.dp",
        "import androidx.compose.ui.unit.sp",
        "import me.kavishdevar.librepods.R",
        "import me.kavishdevar.librepods.services.ServiceManager",
        "import me.kavishdevar.librepods.utils.AACPManager",
        "import kotlin.io.encoding.ExperimentalEncodingApi",
        "import kotlin.math.roundToInt",
        "",
        "@OptIn(ExperimentalMaterial3Api::class)",
        "@Composable",
        "fun ToneVolumeSlider() {",
        "    val service = ServiceManager.getService()!!",
        "    val sliderValueFromAACP = service.aacpManager.controlCommandStatusList.find {",
        "        it.identifier == AACPManager.Companion.ControlCommandIdentifiers.CHIME_VOLUME",
        "    }?.value?.takeIf { it.isNotEmpty() }?.get(0)",
        "    val sliderValue = remember { mutableFloatStateOf(",
        "        sliderValueFromAACP?.toFloat() ?: -1f",
        "    ) }",
        "    Log.d(\"ToneVolumeSlider\", \"Slider value: ${sliderValue.floatValue}\")",
        "",
        "    val isDarkTheme = isSystemInDarkTheme()",
        "",
        "    val trackColor = if (isDarkTheme) Color(0xFFB3B3B3) else Color(0xFF929491)",
        "    val activeTrackColor = if (isDarkTheme) Color(0xFF007AFF) else Color(0xFF3C6DF5)",
        "    val thumbColor = if (isDarkTheme) Color(0xFFFFFFFF) else Color(0xFFFFFFFF)",
        "    val labelTextColor = if (isDarkTheme) Color.White else Color.Black",
        "",
        "    Row(",
        "        modifier = Modifier",
        "            .fillMaxWidth(),"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/composables/ConversationalAwarenessSwitch.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.composables",
        "",
        "import androidx.compose.foundation.background",
        "import androidx.compose.foundation.clickable",
        "import androidx.compose.foundation.gestures.detectTapGestures",
        "import androidx.compose.foundation.interaction.MutableInteractionSource",
        "import androidx.compose.foundation.isSystemInDarkTheme",
        "import androidx.compose.foundation.layout.Column",
        "import androidx.compose.foundation.layout.Row",
        "import androidx.compose.foundation.layout.Spacer",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.shape.RoundedCornerShape",
        "import androidx.compose.material3.Text",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.getValue",
        "import androidx.compose.runtime.mutableStateOf",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.runtime.setValue",
        "import androidx.compose.ui.Alignment",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.graphics.Color",
        "import androidx.compose.ui.input.pointer.pointerInput",
        "import androidx.compose.ui.tooling.preview.Preview",
        "import androidx.compose.ui.unit.dp",
        "import androidx.compose.ui.unit.sp",
        "import me.kavishdevar.librepods.services.ServiceManager",
        "import me.kavishdevar.librepods.utils.AACPManager",
        "import kotlin.io.encoding.ExperimentalEncodingApi",
        "",
        "@Composable",
        "fun ConversationalAwarenessSwitch() {",
        "    val service = ServiceManager.getService()!!",
        "    val conversationEnabledValue = service.aacpManager.controlCommandStatusList.find {",
        "        it.identifier == AACPManager.Companion.ControlCommandIdentifiers.CONVERSATION_DETECT_CONFIG",
        "    }?.value?.takeIf { it.isNotEmpty() }?.get(0)",
        "    var conversationalAwarenessEnabled by remember {",
        "        mutableStateOf(",
        "            conversationEnabledValue == 1.toByte()",
        "        )",
        "    }",
        "",
        "    fun updateConversationalAwareness(enabled: Boolean) {",
        "        conversationalAwarenessEnabled = enabled",
        "        service.aacpManager.sendControlCommand(",
        "            AACPManager.Companion.ControlCommandIdentifiers.CONVERSATION_DETECT_CONFIG.value,",
        "            enabled",
        "        )",
        "    }",
        "",
        "    val isDarkTheme = isSystemInDarkTheme()",
        "    val textColor = if (isDarkTheme) Color.White else Color.Black",
        "",
        "    val isPressed = remember { mutableStateOf(false) }",
        "",
        "    Row(",
        "        modifier = Modifier",
        "            .fillMaxWidth()",
        "            .background("
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/ui/theme/Theme.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " * ",
        " * Copyright (C) 2025 LibrePods contributors",
        " * ",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " * ",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " * ",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "package me.kavishdevar.librepods.ui.theme",
        "",
        "import android.os.Build",
        "import androidx.compose.foundation.isSystemInDarkTheme",
        "import androidx.compose.material3.MaterialTheme",
        "import androidx.compose.material3.darkColorScheme",
        "import androidx.compose.material3.dynamicDarkColorScheme",
        "import androidx.compose.material3.dynamicLightColorScheme",
        "import androidx.compose.material3.lightColorScheme",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.ui.platform.LocalContext",
        "",
        "private val DarkColorScheme = darkColorScheme(",
        "    primary = Purple80,",
        "    secondary = PurpleGrey80,",
        "    tertiary = Pink80",
        ")",
        "",
        "private val LightColorScheme = lightColorScheme(",
        "    primary = Purple40,",
        "    secondary = PurpleGrey40,",
        "    tertiary = Pink40",
        ")",
        "",
        "@Composable",
        "fun LibrePodsTheme(",
        "    darkTheme: Boolean = isSystemInDarkTheme(),",
        "    dynamicColor: Boolean = true,",
        "    content: @Composable () -> Unit",
        ") {",
        "    val colorScheme = when {",
        "        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {",
        "            val context = LocalContext.current",
        "            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)",
        "        }",
        "",
        "        darkTheme -> DarkColorScheme",
        "        else -> LightColorScheme",
        "    }",
        "",
        "    MaterialTheme(",
        "        colorScheme = colorScheme,",
        "        typography = Typography,",
        "        content = content",
        "    )",
        "}"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/ui/theme/Type.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " * ",
        " * Copyright (C) 2025 LibrePods contributors",
        " * ",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " * ",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " * ",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "package me.kavishdevar.librepods.ui.theme",
        "",
        "import androidx.compose.material3.Typography",
        "import androidx.compose.ui.text.TextStyle",
        "import androidx.compose.ui.text.font.FontFamily",
        "import androidx.compose.ui.text.font.FontWeight",
        "import androidx.compose.ui.unit.sp",
        "",
        "// Set of Material typography styles to start with",
        "val Typography = Typography(",
        "    bodyLarge = TextStyle(",
        "        fontFamily = FontFamily.Default,",
        "        fontWeight = FontWeight.Normal,",
        "        fontSize = 16.sp,",
        "        lineHeight = 24.sp,",
        "        letterSpacing = 0.5.sp",
        "    )",
        "    /* Other default text styles to override",
        "    titleLarge = TextStyle(",
        "        fontFamily = FontFamily.Default,",
        "        fontWeight = FontWeight.Normal,",
        "        fontSize = 22.sp,",
        "        lineHeight = 28.sp,",
        "        letterSpacing = 0.sp",
        "    ),",
        "    labelSmall = TextStyle(",
        "        fontFamily = FontFamily.Default,",
        "        fontWeight = FontWeight.Medium,",
        "        fontSize = 11.sp,",
        "        lineHeight = 16.sp,",
        "        letterSpacing = 0.5.sp",
        "    )",
        "    */",
        ")"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/ui/theme/Color.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " * ",
        " * Copyright (C) 2025 LibrePods contributors",
        " * ",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " * ",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " * ",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "",
        "package me.kavishdevar.librepods.ui.theme",
        "",
        "import androidx.compose.ui.graphics.Color",
        "",
        "val Purple80 = Color(0xFFD0BCFF)",
        "val PurpleGrey80 = Color(0xFFCCC2DC)",
        "val Pink80 = Color(0xFFEFB8C8)",
        "",
        "val Purple40 = Color(0xFF6650a4)",
        "val PurpleGrey40 = Color(0xFF625b71)",
        "val Pink40 = Color(0xFF7D5260)"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/screens/HeadTrackingScreen.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.screens",
        "",
        "import android.content.Context",
        "import android.os.Build",
        "import android.util.Log",
        "import androidx.annotation.RequiresApi",
        "import androidx.compose.animation.AnimatedContent",
        "import androidx.compose.animation.ExperimentalAnimationApi",
        "import androidx.compose.animation.core.tween",
        "import androidx.compose.animation.fadeIn",
        "import androidx.compose.animation.fadeOut",
        "import androidx.compose.animation.slideInVertically",
        "import androidx.compose.animation.togetherWith",
        "import androidx.compose.foundation.Canvas",
        "import androidx.compose.foundation.isSystemInDarkTheme",
        "import androidx.compose.foundation.layout.Box",
        "import androidx.compose.foundation.layout.Column",
        "import androidx.compose.foundation.layout.Spacer",
        "import androidx.compose.foundation.layout.aspectRatio",
        "import androidx.compose.foundation.layout.fillMaxSize",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.layout.width",
        "import androidx.compose.foundation.rememberScrollState",
        "import androidx.compose.foundation.shape.RoundedCornerShape",
        "import androidx.compose.foundation.verticalScroll",
        "import androidx.compose.material.icons.Icons",
        "import androidx.compose.material.icons.automirrored.filled.KeyboardArrowLeft",
        "import androidx.compose.material.icons.filled.PlayArrow",
        "import androidx.compose.material3.Button",
        "import androidx.compose.material3.ButtonDefaults",
        "import androidx.compose.material3.Card",
        "import androidx.compose.material3.CardDefaults",
        "import androidx.compose.material3.CenterAlignedTopAppBar",
        "import androidx.compose.material3.ExperimentalMaterial3Api",
        "import androidx.compose.material3.Icon",
        "import androidx.compose.material3.IconButton",
        "import androidx.compose.material3.Scaffold",
        "import androidx.compose.material3.Text",
        "import androidx.compose.material3.TextButton",
        "import androidx.compose.material3.TopAppBarDefaults",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.DisposableEffect",
        "import androidx.compose.runtime.LaunchedEffect",
        "import androidx.compose.runtime.collectAsState",
        "import androidx.compose.runtime.getValue",
        "import androidx.compose.runtime.mutableFloatStateOf",
        "import androidx.compose.runtime.mutableLongStateOf",
        "import androidx.compose.runtime.mutableStateListOf",
        "import androidx.compose.runtime.mutableStateOf",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.runtime.rememberCoroutineScope",
        "import androidx.compose.runtime.setValue",
        "import androidx.compose.ui.Alignment",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.draw.drawBehind",
        "import androidx.compose.ui.draw.scale",
        "import androidx.compose.ui.geometry.CornerRadius",
        "import androidx.compose.ui.geometry.Offset"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/screens/TroubleshootingScreen.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple's ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "package me.kavishdevar.librepods.screens",
        "",
        "import android.content.Intent",
        "import android.widget.Toast",
        "import androidx.activity.compose.rememberLauncherForActivityResult",
        "import androidx.activity.result.contract.ActivityResultContracts",
        "import androidx.compose.animation.AnimatedVisibility",
        "import androidx.compose.animation.core.Spring",
        "import androidx.compose.animation.core.animateFloatAsState",
        "import androidx.compose.animation.core.spring",
        "import androidx.compose.animation.core.tween",
        "import androidx.compose.animation.expandVertically",
        "import androidx.compose.animation.fadeIn",
        "import androidx.compose.animation.fadeOut",
        "import androidx.compose.animation.slideInVertically",
        "import androidx.compose.animation.slideOutVertically",
        "import androidx.compose.foundation.background",
        "import androidx.compose.foundation.clickable",
        "import androidx.compose.foundation.horizontalScroll",
        "import androidx.compose.foundation.isSystemInDarkTheme",
        "import androidx.compose.foundation.layout.Arrangement",
        "import androidx.compose.foundation.layout.Box",
        "import androidx.compose.foundation.layout.Column",
        "import androidx.compose.foundation.layout.Row",
        "import androidx.compose.foundation.layout.Spacer",
        "import androidx.compose.foundation.layout.fillMaxSize",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.layout.width",
        "import androidx.compose.foundation.lazy.LazyColumn",
        "import androidx.compose.foundation.lazy.items",
        "import androidx.compose.foundation.lazy.rememberLazyListState",
        "import androidx.compose.foundation.rememberScrollState",
        "import androidx.compose.foundation.shape.RoundedCornerShape",
        "import androidx.compose.foundation.verticalScroll",
        "import androidx.compose.material.icons.Icons",
        "import androidx.compose.material.icons.automirrored.filled.KeyboardArrowLeft",
        "import androidx.compose.material.icons.filled.Clear",
        "import androidx.compose.material.icons.filled.Delete",
        "import androidx.compose.material.icons.filled.PlayArrow",
        "import androidx.compose.material.icons.filled.Share",
        "import androidx.compose.material3.AlertDialog",
        "import androidx.compose.material3.Button",
        "import androidx.compose.material3.ButtonDefaults",
        "import androidx.compose.material3.CenterAlignedTopAppBar",
        "import androidx.compose.material3.CircularProgressIndicator",
        "import androidx.compose.material3.ExperimentalMaterial3Api",
        "import androidx.compose.material3.Icon",
        "import androidx.compose.material3.IconButton",
        "import androidx.compose.material3.MaterialTheme",
        "import androidx.compose.material3.ModalBottomSheet",
        "import androidx.compose.material3.Scaffold",
        "import androidx.compose.material3.Text",
        "import androidx.compose.material3.TextButton",
        "import androidx.compose.material3.TopAppBarDefaults",
        "import androidx.compose.material3.rememberModalBottomSheetState",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.DisposableEffect",
        "import androidx.compose.runtime.LaunchedEffect",
        "import androidx.compose.runtime.derivedStateOf",
        "import androidx.compose.runtime.getValue"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/screens/DebugScreen.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalHazeMaterialsApi::class, ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.screens",
        "",
        "import android.annotation.SuppressLint",
        "import android.content.ClipData",
        "import android.content.ClipboardManager",
        "import android.content.Context",
        "import android.os.Build",
        "import android.widget.Toast",
        "import androidx.annotation.RequiresApi",
        "import androidx.compose.foundation.ExperimentalFoundationApi",
        "import androidx.compose.foundation.background",
        "import androidx.compose.foundation.clickable",
        "import androidx.compose.foundation.combinedClickable",
        "import androidx.compose.foundation.isSystemInDarkTheme",
        "import androidx.compose.foundation.layout.Box",
        "import androidx.compose.foundation.layout.Column",
        "import androidx.compose.foundation.layout.ExperimentalLayoutApi",
        "import androidx.compose.foundation.layout.Row",
        "import androidx.compose.foundation.layout.Spacer",
        "import androidx.compose.foundation.layout.fillMaxSize",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.navigationBarsPadding",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.layout.size",
        "import androidx.compose.foundation.layout.width",
        "import androidx.compose.foundation.lazy.LazyColumn",
        "import androidx.compose.foundation.lazy.rememberLazyListState",
        "import androidx.compose.foundation.shape.RoundedCornerShape",
        "import androidx.compose.material.icons.Icons",
        "import androidx.compose.material.icons.automirrored.filled.KeyboardArrowLeft",
        "import androidx.compose.material.icons.automirrored.filled.KeyboardArrowRight",
        "import androidx.compose.material.icons.filled.Check",
        "import androidx.compose.material.icons.filled.Delete",
        "import androidx.compose.material.icons.filled.MoreVert",
        "import androidx.compose.material.icons.filled.Send",
        "import androidx.compose.material3.Card",
        "import androidx.compose.material3.CardDefaults",
        "import androidx.compose.material3.CenterAlignedTopAppBar",
        "import androidx.compose.material3.DropdownMenu",
        "import androidx.compose.material3.DropdownMenuItem",
        "import androidx.compose.material3.ExperimentalMaterial3Api",
        "import androidx.compose.material3.HorizontalDivider",
        "import androidx.compose.material3.Icon",
        "import androidx.compose.material3.IconButton",
        "import androidx.compose.material3.Scaffold",
        "import androidx.compose.material3.Text",
        "import androidx.compose.material3.TextButton",
        "import androidx.compose.material3.TextField",
        "import androidx.compose.material3.TextFieldDefaults",
        "import androidx.compose.material3.TopAppBarDefaults",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.LaunchedEffect",
        "import androidx.compose.runtime.collectAsState",
        "import androidx.compose.runtime.derivedStateOf",
        "import androidx.compose.runtime.getValue",
        "import androidx.compose.runtime.mutableStateOf",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.runtime.rememberCoroutineScope",
        "import androidx.compose.ui.Alignment"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/screens/AirPodsSettingsScreen.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.screens",
        "",
        "import android.annotation.SuppressLint",
        "import android.bluetooth.BluetoothDevice",
        "import android.content.BroadcastReceiver",
        "import android.content.Context",
        "import android.content.Context.MODE_PRIVATE",
        "import android.content.Context.RECEIVER_EXPORTED",
        "import android.content.Intent",
        "import android.content.IntentFilter",
        "import android.content.SharedPreferences",
        "import android.os.Build",
        "import androidx.compose.foundation.isSystemInDarkTheme",
        "import androidx.compose.foundation.layout.Arrangement",
        "import androidx.compose.foundation.layout.Column",
        "import androidx.compose.foundation.layout.Spacer",
        "import androidx.compose.foundation.layout.fillMaxSize",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.rememberScrollState",
        "import androidx.compose.foundation.shape.RoundedCornerShape",
        "import androidx.compose.foundation.verticalScroll",
        "import androidx.compose.material.icons.Icons",
        "import androidx.compose.material.icons.filled.Info",
        "import androidx.compose.material.icons.filled.Settings",
        "import androidx.compose.foundation.layout.*",
        "import androidx.compose.runtime.*",
        "import androidx.compose.material3.*",
        "import androidx.compose.material3.Button",
        "import androidx.compose.material3.ButtonDefaults",
        "import androidx.compose.material3.CenterAlignedTopAppBar",
        "import androidx.compose.material3.ExperimentalMaterial3Api",
        "import androidx.compose.material3.Icon",
        "import androidx.compose.material3.IconButton",
        "import androidx.compose.material3.IconButtonDefaults",
        "import androidx.compose.material3.Scaffold",
        "import androidx.compose.material3.SnackbarHost",
        "import androidx.compose.material3.SnackbarHostState",
        "import androidx.compose.material3.Text",
        "import androidx.compose.material3.TopAppBarDefaults",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.DisposableEffect",
        "import androidx.compose.runtime.LaunchedEffect",
        "import androidx.compose.runtime.getValue",
        "import androidx.compose.runtime.mutableFloatStateOf",
        "import androidx.compose.runtime.mutableStateOf",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.runtime.rememberCoroutineScope",
        "import androidx.compose.runtime.setValue",
        "import androidx.compose.ui.Alignment",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.draw.drawBehind",
        "import androidx.compose.ui.geometry.Offset",
        "import androidx.compose.ui.graphics.Color",
        "import androidx.compose.ui.platform.LocalContext",
        "import androidx.compose.ui.res.stringResource",
        "import androidx.compose.ui.text.TextStyle",
        "import androidx.compose.ui.text.font.Font",
        "import androidx.compose.ui.text.font.FontFamily"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/screens/CocSettingsScreen.kt": [
        "package me.kavishdevar.librepods.screens",
        "",
        "import android.content.Context",
        "import androidx.compose.foundation.layout.*",
        "import androidx.compose.material3.*",
        "import androidx.compose.runtime.*",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.unit.dp",
        "import me.kavishdevar.librepods.utils.SettingsManager",
        "",
        "@Composable",
        "fun CocSettingsScreen(context: Context) {",
        "    var checked by remember { mutableStateOf(SettingsManager.isUseCoc(context)) }",
        "",
        "    Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {",
        "        Text(\"Connection Settings\", style = MaterialTheme.typography.headlineSmall)",
        "        Spacer(Modifier.height(12.dp))",
        "        Row(verticalAlignment = androidx.compose.ui.Alignment.CenterVertically) {",
        "            Checkbox(checked = checked, onCheckedChange = {",
        "                checked = it",
        "                SettingsManager.setUseCoc(context, it)",
        "            })",
        "            Spacer(Modifier.width(8.dp))",
        "            Text(\"Prefer high-throughput L2CAP (CoC) when available\")",
        "        }",
        "    }",
        "}"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/screens/RenameScreen.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.screens",
        "",
        "import android.content.Context",
        "import androidx.compose.foundation.background",
        "import androidx.compose.foundation.isSystemInDarkTheme",
        "import androidx.compose.foundation.layout.Column",
        "import androidx.compose.foundation.layout.Row",
        "import androidx.compose.foundation.layout.fillMaxSize",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.shape.RoundedCornerShape",
        "import androidx.compose.foundation.text.BasicTextField",
        "import androidx.compose.material.icons.Icons",
        "import androidx.compose.material.icons.automirrored.filled.KeyboardArrowLeft",
        "import androidx.compose.material.icons.filled.Clear",
        "import androidx.compose.material3.CenterAlignedTopAppBar",
        "import androidx.compose.material3.ExperimentalMaterial3Api",
        "import androidx.compose.material3.Icon",
        "import androidx.compose.material3.IconButton",
        "import androidx.compose.material3.Scaffold",
        "import androidx.compose.material3.Text",
        "import androidx.compose.material3.TextButton",
        "import androidx.compose.material3.TopAppBarDefaults",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.LaunchedEffect",
        "import androidx.compose.runtime.mutableStateOf",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.ui.Alignment",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.draw.scale",
        "import androidx.compose.ui.focus.FocusRequester",
        "import androidx.compose.ui.focus.focusRequester",
        "import androidx.compose.ui.graphics.Color",
        "import androidx.compose.ui.graphics.SolidColor",
        "import androidx.compose.ui.platform.LocalContext",
        "import androidx.compose.ui.platform.LocalSoftwareKeyboardController",
        "import androidx.compose.ui.res.stringResource",
        "import androidx.compose.ui.text.TextRange",
        "import androidx.compose.ui.text.TextStyle",
        "import androidx.compose.ui.text.font.Font",
        "import androidx.compose.ui.text.font.FontFamily",
        "import androidx.compose.ui.text.font.FontWeight",
        "import androidx.compose.ui.text.input.TextFieldValue",
        "import androidx.compose.ui.tooling.preview.Preview",
        "import androidx.compose.ui.unit.dp",
        "import androidx.compose.ui.unit.sp",
        "import androidx.navigation.NavController",
        "import me.kavishdevar.librepods.R",
        "import me.kavishdevar.librepods.services.ServiceManager",
        "import kotlin.io.encoding.ExperimentalEncodingApi",
        "",
        "",
        "@OptIn(ExperimentalMaterial3Api::class)",
        "@Composable",
        "fun RenameScreen(navController: NavController) {",
        "    val sharedPreferences = LocalContext.current.getSharedPreferences(\"settings\", Context.MODE_PRIVATE)",
        "    val isDarkTheme = isSystemInDarkTheme()",
        "    val name = remember { mutableStateOf(TextFieldValue(sharedPreferences.getString(\"name\", \"\") ?: \"\")) }",
        "    val focusRequester = remember { FocusRequester() }"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/screens/PressAndHoldSettingsScreen.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalStdlibApi::class, ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.screens",
        "",
        "import android.content.Context",
        "import android.util.Log",
        "import androidx.compose.animation.animateColorAsState",
        "import androidx.compose.animation.core.tween",
        "import androidx.compose.foundation.background",
        "import androidx.compose.foundation.gestures.detectTapGestures",
        "import androidx.compose.foundation.isSystemInDarkTheme",
        "import androidx.compose.foundation.layout.Arrangement",
        "import androidx.compose.foundation.layout.Column",
        "import androidx.compose.foundation.layout.Row",
        "import androidx.compose.foundation.layout.fillMaxSize",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.layout.wrapContentWidth",
        "import androidx.compose.foundation.shape.RoundedCornerShape",
        "import androidx.compose.material.icons.Icons",
        "import androidx.compose.material.icons.automirrored.filled.KeyboardArrowLeft",
        "import androidx.compose.material3.CenterAlignedTopAppBar",
        "import androidx.compose.material3.Checkbox",
        "import androidx.compose.material3.CheckboxDefaults",
        "import androidx.compose.material3.ExperimentalMaterial3Api",
        "import androidx.compose.material3.HorizontalDivider",
        "import androidx.compose.material3.Icon",
        "import androidx.compose.material3.Scaffold",
        "import androidx.compose.material3.Text",
        "import androidx.compose.material3.TextButton",
        "import androidx.compose.material3.TopAppBarDefaults",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.getValue",
        "import androidx.compose.runtime.mutableStateOf",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.runtime.setValue",
        "import androidx.compose.ui.Alignment",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.draw.scale",
        "import androidx.compose.ui.graphics.Color",
        "import androidx.compose.ui.input.pointer.pointerInput",
        "import androidx.compose.ui.platform.LocalContext",
        "import androidx.compose.ui.res.painterResource",
        "import androidx.compose.ui.text.TextStyle",
        "import androidx.compose.ui.text.font.Font",
        "import androidx.compose.ui.text.font.FontFamily",
        "import androidx.compose.ui.text.font.FontWeight",
        "import androidx.compose.ui.unit.dp",
        "import androidx.compose.ui.unit.sp",
        "import androidx.navigation.NavController",
        "import me.kavishdevar.librepods.R",
        "import me.kavishdevar.librepods.constants.StemAction",
        "import me.kavishdevar.librepods.services.ServiceManager",
        "import me.kavishdevar.librepods.utils.AACPManager",
        "import kotlin.experimental.and",
        "import kotlin.io.encoding.ExperimentalEncodingApi",
        "",
        "@Composable()",
        "fun RightDivider() {",
        "    HorizontalDivider(",
        "        thickness = 1.5.dp,"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/screens/Onboarding.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "package me.kavishdevar.librepods.screens",
        "",
        "import android.content.Context",
        "import android.util.Log",
        "import androidx.compose.animation.AnimatedContent",
        "import androidx.compose.animation.core.animateFloatAsState",
        "import androidx.compose.animation.fadeIn",
        "import androidx.compose.animation.fadeOut",
        "import androidx.compose.animation.togetherWith",
        "import androidx.compose.foundation.isSystemInDarkTheme",
        "import androidx.compose.foundation.layout.Arrangement",
        "import androidx.compose.foundation.layout.Box",
        "import androidx.compose.foundation.layout.Column",
        "import androidx.compose.foundation.layout.Spacer",
        "import androidx.compose.foundation.layout.fillMaxSize",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.layout.size",
        "import androidx.compose.foundation.shape.RoundedCornerShape",
        "import androidx.compose.material.icons.Icons",
        "import androidx.compose.material.icons.filled.Check",
        "import androidx.compose.material.icons.filled.Clear",
        "import androidx.compose.material.icons.filled.MoreVert",
        "import androidx.compose.material.icons.filled.Settings",
        "import androidx.compose.material3.AlertDialog",
        "import androidx.compose.material3.Button",
        "import androidx.compose.material3.ButtonDefaults",
        "import androidx.compose.material3.Card",
        "import androidx.compose.material3.CardDefaults",
        "import androidx.compose.material3.CenterAlignedTopAppBar",
        "import androidx.compose.material3.CircularProgressIndicator",
        "import androidx.compose.material3.DropdownMenu",
        "import androidx.compose.material3.DropdownMenuItem",
        "import androidx.compose.material3.ExperimentalMaterial3Api",
        "import androidx.compose.material3.Icon",
        "import androidx.compose.material3.IconButton",
        "import androidx.compose.material3.LinearProgressIndicator",
        "import androidx.compose.material3.Scaffold",
        "import androidx.compose.material3.Text",
        "import androidx.compose.material3.TextButton",
        "import androidx.compose.material3.TopAppBarDefaults",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.LaunchedEffect",
        "import androidx.compose.runtime.collectAsState",
        "import androidx.compose.runtime.getValue",
        "import androidx.compose.runtime.mutableStateOf",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.runtime.setValue",
        "import androidx.compose.ui.Alignment",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.graphics.Color",
        "import androidx.compose.ui.graphics.StrokeCap",
        "import androidx.compose.ui.platform.LocalContext",
        "import androidx.compose.ui.text.TextStyle",
        "import androidx.compose.ui.text.font.Font",
        "import androidx.compose.ui.text.font.FontFamily",
        "import androidx.compose.ui.text.font.FontWeight",
        "import androidx.compose.ui.text.style.TextAlign",
        "import androidx.compose.ui.tooling.preview.Preview",
        "import androidx.compose.ui.unit.dp",
        "import androidx.compose.ui.unit.sp"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/screens/AppSettingsScreen.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "import androidx.compose.foundation.layout.*",
        "package me.kavishdevar.librepods.screens",
        "import androidx.compose.material3.*",
        "import android.content.Context",
        "import android.widget.Toast",
        "import androidx.compose.foundation.background",
        "import androidx.compose.foundation.clickable",
        "import androidx.compose.foundation.interaction.MutableInteractionSource",
        "import androidx.compose.foundation.isSystemInDarkTheme",
        "import androidx.compose.foundation.layout.Arrangement",
        "import androidx.compose.foundation.layout.Box",
        "import androidx.compose.foundation.layout.Column",
        "import androidx.compose.foundation.layout.Row",
        "import androidx.compose.foundation.layout.Spacer",
        "import androidx.compose.foundation.layout.fillMaxSize",
        "import androidx.compose.foundation.layout.fillMaxWidth",
        "import androidx.compose.foundation.layout.height",
        "import androidx.compose.foundation.layout.padding",
        "import androidx.compose.foundation.layout.size",
        "import androidx.compose.foundation.layout.width",
        "import androidx.compose.foundation.rememberScrollState",
        "import androidx.compose.foundation.shape.CircleShape",
        "import androidx.compose.foundation.shape.RoundedCornerShape",
        "import androidx.compose.foundation.text.KeyboardOptions",
        "import androidx.compose.foundation.verticalScroll",
        "import androidx.compose.material.icons.Icons",
        "import androidx.compose.material.icons.automirrored.filled.KeyboardArrowLeft",
        "import androidx.compose.material.icons.filled.Refresh",
        "import androidx.compose.material3.AlertDialog",
        "import androidx.compose.material3.Button",
        "import androidx.compose.material3.ButtonDefaults",
        "import androidx.compose.material3.CenterAlignedTopAppBar",
        "import androidx.compose.material3.ExperimentalMaterial3Api",
        "import androidx.compose.material3.Icon",
        "import androidx.compose.material3.MaterialTheme",
        "import androidx.compose.material3.OutlinedTextField",
        "import androidx.compose.material3.OutlinedTextFieldDefaults",
        "import androidx.compose.material3.Scaffold",
        "import androidx.compose.material3.Slider",
        "import androidx.compose.material3.SliderDefaults",
        "import androidx.compose.material3.Text",
        "import androidx.compose.material3.TextButton",
        "import androidx.compose.material3.TextField",
        "import androidx.compose.material3.TextFieldDefaults",
        "import androidx.compose.material3.TopAppBarDefaults",
        "import androidx.compose.runtime.Composable",
        "import androidx.compose.runtime.LaunchedEffect",
        "import androidx.compose.runtime.getValue",
        "import androidx.compose.runtime.mutableFloatStateOf",
        "import androidx.compose.runtime.mutableStateOf",
        "import androidx.compose.runtime.remember",
        "import androidx.compose.runtime.setValue",
        "import androidx.compose.ui.Alignment",
        "import androidx.compose.ui.Modifier",
        "import androidx.compose.ui.draw.drawBehind",
        "import androidx.compose.ui.draw.scale",
        "import androidx.compose.ui.draw.shadow",
        "import androidx.compose.ui.geometry.Offset",
        "import androidx.compose.ui.graphics.Color",
        "import androidx.compose.ui.input.nestedscroll.nestedScroll",
        "import androidx.compose.ui.platform.LocalContext",
        "import androidx.compose.ui.res.stringResource",
        "import androidx.compose.ui.text.TextStyle"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/widgets/BatteryWidget.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.widgets",
        "",
        "import android.appwidget.AppWidgetManager",
        "import android.appwidget.AppWidgetProvider",
        "import android.content.Context",
        "import me.kavishdevar.librepods.services.ServiceManager",
        "import kotlin.io.encoding.ExperimentalEncodingApi",
        "",
        "class BatteryWidget : AppWidgetProvider() {",
        "    override fun onUpdate(",
        "        context: Context,",
        "        appWidgetManager: AppWidgetManager,",
        "        appWidgetIds: IntArray",
        "    ) {",
        "        ServiceManager.getService()?.updateBattery()",
        "    }",
        "}"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/widgets/NoiseControlWidget.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " *",
        " * Copyright (C) 2025 LibrePods contributors",
        " *",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " *",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " *",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.widgets",
        "",
        "import android.app.PendingIntent",
        "import android.appwidget.AppWidgetManager",
        "import android.appwidget.AppWidgetProvider",
        "import android.content.Context",
        "import android.content.Intent",
        "import android.util.Log",
        "import android.widget.RemoteViews",
        "import me.kavishdevar.librepods.R",
        "import me.kavishdevar.librepods.services.ServiceManager",
        "import me.kavishdevar.librepods.utils.AACPManager",
        "import kotlin.io.encoding.ExperimentalEncodingApi",
        "",
        "class NoiseControlWidget : AppWidgetProvider() {",
        "    override fun onUpdate(",
        "        context: Context,",
        "        appWidgetManager: AppWidgetManager,",
        "        appWidgetIds: IntArray",
        "    ) {",
        "        val views = RemoteViews(context.packageName, R.layout.noise_control_widget)",
        "",
        "        val offIntent = Intent(context, NoiseControlWidget::class.java).apply {",
        "            action = \"ACTION_SET_ANC_MODE\"",
        "            putExtra(\"ANC_MODE\", 1)",
        "        }",
        "        val transparencyIntent = Intent(context, NoiseControlWidget::class.java).apply {",
        "            action = \"ACTION_SET_ANC_MODE\"",
        "            putExtra(\"ANC_MODE\", 3)",
        "        }",
        "        val adaptiveIntent = Intent(context, NoiseControlWidget::class.java).apply {",
        "            action = \"ACTION_SET_ANC_MODE\"",
        "            putExtra(\"ANC_MODE\", 4)",
        "        }",
        "        val ancIntent = Intent(context, NoiseControlWidget::class.java).apply {",
        "            action = \"ACTION_SET_ANC_MODE\"",
        "            putExtra(\"ANC_MODE\", 2)",
        "        }",
        "",
        "        views.setOnClickPendingIntent(",
        "            R.id.widget_off_button,",
        "            PendingIntent.getBroadcast(context, 0, offIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)",
        "        )",
        "        views.setOnClickPendingIntent(",
        "            R.id.widget_transparency_button,",
        "            PendingIntent.getBroadcast(context, 1, transparencyIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)",
        "        )",
        "        views.setOnClickPendingIntent(",
        "            R.id.widget_adaptive_button,",
        "            PendingIntent.getBroadcast(context, 2, adaptiveIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)",
        "        )",
        "        views.setOnClickPendingIntent(",
        "            R.id.widget_anc_button,",
        "            PendingIntent.getBroadcast(context, 3, ancIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)",
        "        )",
        "        ServiceManager.getService()?.updateNoiseControlWidget()",
        "        appWidgetManager.updateAppWidget(appWidgetIds, views)",
        "    }",
        "",
        "    override fun onReceive(context: Context, intent: Intent) {"
      ],
      "android/app/src/main/java/me/kavishdevar/librepods/receivers/BootReceiver.kt": [
        "/*",
        " * LibrePods - AirPods liberated from Apple\u2019s ecosystem",
        " * ",
        " * Copyright (C) 2025 LibrePods contributors",
        " * ",
        " * This program is free software: you can redistribute it and/or modify",
        " * it under the terms of the GNU Affero General Public License as published",
        " * by the Free Software Foundation, either version 3 of the License.",
        " * ",
        " * This program is distributed in the hope that it will be useful,",
        " * but WITHOUT ANY WARRANTY; without even the implied warranty of",
        " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        " * GNU Affero General Public License for more details.",
        " * ",
        " * You should have received a copy of the GNU Affero General Public License",
        " * along with this program. If not, see <https://www.gnu.org/licenses/>.",
        " */",
        "",
        "@file:OptIn(ExperimentalEncodingApi::class)",
        "",
        "package me.kavishdevar.librepods.receivers",
        "",
        "import android.content.BroadcastReceiver",
        "import android.content.Context",
        "import android.content.Intent",
        "import kotlin.io.encoding.ExperimentalEncodingApi",
        "import me.kavishdevar.librepods.services.AirPodsService",
        "",
        "class BootReceiver: BroadcastReceiver() {",
        "    override fun onReceive(context: Context?, intent: Intent?) {",
        "        when (intent?.action) {",
        "            Intent.ACTION_MY_PACKAGE_REPLACED -> try { context?.startForegroundService(",
        "                Intent(",
        "                    context,",
        "                    AirPodsService::class.java",
        "                )",
        "            ) } catch (e: Exception) { e.printStackTrace() }",
        "            Intent.ACTION_BOOT_COMPLETED -> try { context?.startForegroundService(",
        "                Intent(",
        "                    context,",
        "                    AirPodsService::class.java",
        "                )",
        "            ) } catch (e: Exception) { e.printStackTrace() }",
        "        }",
        "    }",
        "}"
      ],
      "head-tracking/README.md": [
        "# AirPods Head Tracking Visualizer",
        "",
        "This implements head tracking with AirPods by gathering sensor data over l2cap, processing orientation and acceleration values, and detecting head gestures. The codebase is split into the following components:",
        "",
        "# How to use",
        "",
        "Connect your airpods and change the mac address in `plot.py` to your airpods mac address. Then run the following command to start the program.",
        "",
        "```bash",
        "python plot.py",
        "```",
        "",
        "Alternatively, you can directly run the `gestures.py` to just detect gestures.",
        "",
        "```bash",
        "python gestures.py",
        "```",
        "",
        "- **Connection and Data Collection**  ",
        "  The project uses a custom ConnectionManager (imported in multiple files) to connect via Bluetooth to AirPods. Once connected, sensor packets are received in raw hex format. An AirPodsTracker class (in `plot.py`) handles the start/stop of tracking, logging of raw data, and parsing of packets into useful fields.",
        "",
        "- **Orientation Calculation and Visualization**  ",
        "  The `HeadOrientation` class (in `head_orientation.py`) is responsible for:",
        "  - **Calibration:**  ",
        "    A set number of samples (default 10) are collected to calculate the neutral (baseline) values for the sensors. For example:  ",
        "    `o1_neutral = np.mean(samples[:, 0])`",
        "  - **Calculating Angles:**  ",
        "    For each new packet, the raw orientation values are normalized by subtracting the neutral baseline. Then:",
        "    - **Pitch** is computed as:",
        "      ```",
        "      pitch = (o2_norm + o3_norm) / 2 / 32000 * 180",
        "      ```",
        "      This averages the deviations from neutral, scales the result to degrees (assuming a sensor range around 32000), thus giving a smooth estimation of up/down tilt.",
        "    - **Yaw** is computed as:",
        "      ```",
        "      yaw = (o2_norm - o3_norm) / 2 / 32000 * 180",
        "      ```",
        "      Here, the difference between the two sensor axes is used to detect left/right rotation.",
        "  - **ASCII Visualization:**  ",
        "    Based on the calculated pitch and yaw, an ASCII art \"face\" is generated. The algorithm rotates points on a circle using simple trigonometric formulas (with scaling factors based on sensor depth) to build an approximate visual representation of head orientation.",
        "",
        "- **Live Plotting and Interactive Commands**  ",
        "  The code offers both terminal-based plotting and graphical plotting via matplotlib. The AirPodsTracker manages live plotting by maintaining a buffer of recent packets. When in terminal mode, the code uses libraries like `asciichartpy` and `drawille` to render charts; in graphical mode, it creates live-updating plots.",
        "",
        "- **Gesture Detection**  ",
        "  The `GestureDetector` class (in `gestures.py`) processes the head tracking data to detect nodding (\"Yes\") or head shaking (\"No\"):",
        "  - **Smoothing:**  ",
        "    Raw horizontal and vertical sensor data undergo moving-average smoothing using small fixed-size buffers. This reduces noise and provides a steadier signal.",
        "  - **Peak and Trough Detection:**  ",
        "    The code monitors small sections (e.g. the last 4 values) to compute variance and dynamically determine thresholds for direction changes. When a significant reversal (e.g. from increasing to decreasing) is detected that surpasses the dynamic threshold value (derived partly from a fixed threshold and variance), a peak or trough is recorded.",
        "  - **Rhythm Consistency:**  ",
        "    Time intervals between detected peaks are captured. The consistency of these intervals (by comparing them to their mean and computing relative variance) is used to evaluate whether the movement is rhythmic\u2014a trait of intentional gestures.",
        "  - **Confidence Calculation:**  ",
        "    Multiple factors are considered:",
        "    - **Amplitude Factor:** Compares the average detected peak amplitude with a constant (like 600) to provide a normalized measure.",
        "    - **Rhythm Factor:** Derived from the consistency of the time intervals of the peaks.",
        "    - **Alternation Factor:** Verifies that the signal alternates (for instance, switching between positive and negative values).",
        "    - **Isolation Factor:** Checks that movement on the target axis (vertical for nodding, horizontal for shaking) dominates over the non-target axis.",
        "  ",
        "    A weighted sum of these factors forms a confidence score which, if above a predefined threshold (e.g. 0.7), confirms a detected gesture."
      ],
      "head-tracking/requirements.txt": [
        "drawille",
        "numpy",
        "pybluez",
        "matplotlib",
        "asciichartpy",
        "rich"
      ],
      "head-tracking/head_orientation.py": [
        "import math",
        "import drawille",
        "import numpy as np",
        "import logging",
        "import os",
        "",
        "class Colors:",
        "    RESET = \"\\033[0m\"",
        "    BOLD = \"\\033[1m\"",
        "    RED = \"\\033[91m\"",
        "    GREEN = \"\\033[92m\"",
        "    YELLOW = \"\\033[93m\"",
        "    BLUE = \"\\033[94m\"",
        "    MAGENTA = \"\\033[95m\"",
        "    CYAN = \"\\033[96m\"",
        "    WHITE = \"\\033[97m\"",
        "    BG_BLACK = \"\\033[40m\"",
        "",
        "class ColorFormatter(logging.Formatter):",
        "    FORMATS = {",
        "        logging.DEBUG: Colors.BLUE + \"[%(levelname)s] %(message)s\" + Colors.RESET,",
        "        logging.INFO: Colors.GREEN + \"%(message)s\" + Colors.RESET,",
        "        logging.WARNING: Colors.YELLOW + \"%(message)s\" + Colors.RESET,",
        "        logging.ERROR: Colors.RED + \"[%(levelname)s] %(message)s\" + Colors.RESET,",
        "        logging.CRITICAL: Colors.RED + Colors.BOLD + \"[%(levelname)s] %(message)s\" + Colors.RESET",
        "    }",
        "",
        "    def format(self, record):",
        "        log_fmt = self.FORMATS.get(record.levelno)",
        "        formatter = logging.Formatter(log_fmt, datefmt=\"%H:%M:%S\")",
        "        return formatter.format(record)",
        "",
        "handler = logging.StreamHandler()",
        "handler.setFormatter(ColorFormatter())",
        "log = logging.getLogger(__name__)",
        "log.setLevel(logging.INFO)",
        "log.addHandler(handler)",
        "log.propagate = False",
        "",
        "",
        "class HeadOrientation:",
        "    def __init__(self, use_terminal=False):",
        "        self.orientation_offset = 5500",
        "        self.o1_neutral = 19000",
        "        self.o2_neutral = 0",
        "        self.o3_neutral = 0",
        "        self.calibration_samples = []",
        "        self.calibration_complete = False",
        "        self.calibration_sample_count = 10",
        "        self.fig = None",
        "        self.ax = None",
        "        self.arrow = None",
        "        self.animation = None",
        "        self.use_terminal = use_terminal",
        "",
        "    def reset_calibration(self):",
        "        self.calibration_samples = []",
        "        self.calibration_complete = False",
        "",
        "    def add_calibration_sample(self, orientation_values):",
        "        if len(self.calibration_samples) < self.calibration_sample_count:",
        "            self.calibration_samples.append(orientation_values)",
        "            return False",
        "        if not self.calibration_complete:",
        "            self._calculate_calibration()",
        "            return True",
        "        return True",
        "",
        "    def _calculate_calibration(self):",
        "        if len(self.calibration_samples) < 3:",
        "            log.warning(\"Not enough calibration samples\")",
        "            return",
        "        samples = np.array(self.calibration_samples)",
        "        self.o1_neutral = np.mean(samples[:, 0])",
        "        avg_o2 = np.mean(samples[:, 1])",
        "        avg_o3 = np.mean(samples[:, 2])",
        "        self.o2_neutral = avg_o2",
        "        self.o3_neutral = avg_o3",
        "        log.info(\"Calibration complete: o1_neutral=%.2f, o2_neutral=%.2f, o3_neutral=%.2f\", ",
        "                    self.o1_neutral, self.o2_neutral, self.o3_neutral)"
      ],
      "head-tracking/plot.py": [
        "import struct",
        "import bluetooth",
        "import threading",
        "import time",
        "from datetime import datetime",
        "import numpy as np",
        "import matplotlib.pyplot as plt",
        "from matplotlib.animation import FuncAnimation",
        "import os",
        "import asciichartpy as acp",
        "from rich.live import Live",
        "from rich.layout import Layout",
        "from rich.panel import Panel",
        "from rich.console import Console",
        "import drawille",
        "from head_orientation import HeadOrientation",
        "import logging",
        "from connection_manager import ConnectionManager",
        "",
        "class Colors:",
        "    RESET = \"\\033[0m\"",
        "    BOLD = \"\\033[1m\"",
        "    RED = \"\\033[91m\"",
        "    GREEN = \"\\033[92m\"",
        "    YELLOW = \"\\033[93m\"",
        "    BLUE = \"\\033[94m\"",
        "    MAGENTA = \"\\033[95m\"",
        "    CYAN = \"\\033[96m\"",
        "    WHITE = \"\\033[97m\"",
        "    BG_BLACK = \"\\033[40m\"",
        "",
        "class ColorFormatter(logging.Formatter):",
        "    FORMATS = {",
        "        logging.DEBUG: Colors.BLUE + \"[%(levelname)s] %(message)s\" + Colors.RESET,",
        "        logging.INFO: Colors.GREEN + \"%(message)s\" + Colors.RESET,",
        "        logging.WARNING: Colors.YELLOW + \"%(message)s\" + Colors.RESET,",
        "        logging.ERROR: Colors.RED + \"[%(levelname)s] %(message)s\" + Colors.RESET,",
        "        logging.CRITICAL: Colors.RED + Colors.BOLD + \"[%(levelname)s] %(message)s\" + Colors.RESET",
        "    }",
        "",
        "    def format(self, record):",
        "        log_fmt = self.FORMATS.get(record.levelno)",
        "        formatter = logging.Formatter(log_fmt, datefmt=\"%H:%M:%S\")",
        "        return formatter.format(record)",
        "    ",
        "handler = logging.StreamHandler()",
        "handler.setFormatter(ColorFormatter())",
        "logger = logging.getLogger(\"airpods-head-tracking\")",
        "logger.setLevel(logging.INFO)",
        "logger.addHandler(handler)",
        "logger.propagate = True",
        "",
        "INIT_CMD  = \"00 00 04 00 01 00 02 00 00 00 00 00 00 00 00 00\"",
        "NOTIF_CMD = \"04 00 04 00 0F 00 FF FF FE FF\"",
        "START_CMD = \"04 00 04 00 17 00 00 00 10 00 10 00 08 A1 02 42 0B 08 0E 10 02 1A 05 01 40 9C 00 00\"",
        "STOP_CMD  = \"04 00 04 00 17 00 00 00 10 00 11 00 08 7E 10 02 42 0B 08 4E 10 02 1A 05 01 00 00 00 00\"",
        "",
        "KEY_FIELDS = {",
        "    \"orientation 1\": (43, 2),",
        "    \"orientation 2\": (45, 2),",
        "    \"orientation 3\": (47, 2),",
        "",
        "    \"Horizontal Acceleration\": (51, 2),",
        "    \"Vertical Acceleration\": (53, 2),",
        "",
        "    \"unkown 1\": (61, 2),",
        "    \"unkown 2 \": (49, 2),",
        "}",
        "",
        "class AirPodsTracker:",
        "    def __init__(self):",
        "        self.sock = None",
        "        self.recording = False",
        "        self.log_file = None",
        "        self.listener_thread = None",
        "        self.bt_addr = \"28:2D:7F:C2:05:5B\"",
        "        self.psm = 0x1001",
        "        self.raw_packets = []",
        "        self.parsed_packets = []",
        "        self.live_data = []"
      ],
      "head-tracking/connection_manager.py": [
        "import bluetooth",
        "import logging",
        "",
        "class ConnectionManager:",
        "    INIT_CMD  = \"00 00 04 00 01 00 02 00 00 00 00 00 00 00 00 00\"",
        "    START_CMD = \"04 00 04 00 17 00 00 00 10 00 10 00 08 A1 02 42 0B 08 0E 10 02 1A 05 01 40 9C 00 00\"",
        "    STOP_CMD  = \"04 00 04 00 17 00 00 00 10 00 11 00 08 7E 10 02 42 0B 08 4E 10 02 1A 05 01 00 00 00 00\"",
        "",
        "    def __init__(self, bt_addr=\"28:2D:7F:C2:05:5B\", psm=0x1001, logger=None):",
        "        self.bt_addr = bt_addr",
        "        self.psm = psm",
        "        self.logger = logger if logger else logging.getLogger(__name__)",
        "        self.sock = None",
        "        self.connected = False",
        "        self.started = False",
        "",
        "    def connect(self):",
        "        self.logger.info(f\"Connecting to {self.bt_addr} on PSM {self.psm:#04x}...\")",
        "        try:",
        "            self.sock = bluetooth.BluetoothSocket(bluetooth.L2CAP)",
        "            self.sock.connect((self.bt_addr, self.psm))",
        "            self.connected = True",
        "            self.logger.info(\"Connected to AirPods.\")",
        "            self.sock.send(bytes.fromhex(self.INIT_CMD))",
        "            self.logger.info(\"Initialization complete.\")",
        "        except Exception as e:",
        "            self.logger.error(f\"Connection failed: {e}\")",
        "            self.connected = False",
        "        return self.connected",
        "",
        "    def send_start(self):",
        "        if not self.connected:",
        "            self.logger.error(\"Not connected. Cannot send START command.\")",
        "            return False",
        "        if not self.started:",
        "            self.sock.send(bytes.fromhex(self.START_CMD))",
        "            self.started = True",
        "            self.logger.info(\"START command sent.\")",
        "        else:",
        "            self.logger.info(\"START command has already been sent.\")",
        "        return True",
        "",
        "    def send_stop(self):",
        "        if self.connected and self.started:",
        "            try:",
        "                self.sock.send(bytes.fromhex(self.STOP_CMD))",
        "                self.logger.info(\"STOP command sent.\")",
        "                self.started = False",
        "            except Exception as e:",
        "                self.logger.error(f\"Error sending STOP command: {e}\")",
        "        else:",
        "            self.logger.info(\"Cannot send STOP; not started or not connected.\")",
        "",
        "    def disconnect(self):",
        "        if self.sock:",
        "            try:",
        "                self.sock.close()",
        "                self.logger.info(\"Disconnected from AirPods.\")",
        "            except Exception as e:",
        "                self.logger.error(f\"Error during disconnect: {e}\")",
        "        self.connected = False",
        "        self.started = False"
      ],
      "head-tracking/gestures.py": [
        "import bluetooth",
        "import threading",
        "import time",
        "import logging",
        "import statistics",
        "from collections import deque",
        "",
        "class Colors:",
        "    RESET = \"\\033[0m\"",
        "    BOLD = \"\\033[1m\"",
        "    RED = \"\\033[91m\"",
        "    GREEN = \"\\033[92m\"",
        "    YELLOW = \"\\033[93m\"",
        "    BLUE = \"\\033[94m\"",
        "    MAGENTA = \"\\033[95m\"",
        "    CYAN = \"\\033[96m\"",
        "    WHITE = \"\\033[97m\"",
        "    BG_BLACK = \"\\033[40m\"",
        "",
        "class ColorFormatter(logging.Formatter):",
        "    FORMATS = {",
        "        logging.DEBUG: Colors.BLUE + \"[%(levelname)s] %(message)s\" + Colors.RESET,",
        "        logging.INFO: Colors.GREEN + \"%(message)s\" + Colors.RESET,",
        "        logging.WARNING: Colors.YELLOW + \"%(message)s\" + Colors.RESET,",
        "        logging.ERROR: Colors.RED + \"[%(levelname)s] %(message)s\" + Colors.RESET,",
        "        logging.CRITICAL: Colors.RED + Colors.BOLD + \"[%(levelname)s] %(message)s\" + Colors.RESET",
        "    }",
        "",
        "    def format(self, record):",
        "        log_fmt = self.FORMATS.get(record.levelno)",
        "        formatter = logging.Formatter(log_fmt, datefmt=\"%H:%M:%S\")",
        "        return formatter.format(record)",
        "",
        "handler = logging.StreamHandler()",
        "handler.setFormatter(ColorFormatter())",
        "log = logging.getLogger(__name__)",
        "log.setLevel(logging.INFO)",
        "log.addHandler(handler)",
        "log.propagate = False",
        "",
        "class GestureDetector:",
        "    INIT_CMD  = \"00 00 04 00 01 00 02 00 00 00 00 00 00 00 00 00\"",
        "    START_CMD = \"04 00 04 00 17 00 00 00 10 00 10 00 08 A1 02 42 0B 08 0E 10 02 1A 05 01 40 9C 00 00\"",
        "    STOP_CMD  = \"04 00 04 00 17 00 00 00 10 00 11 00 08 7E 10 02 42 0B 08 4E 10 02 1A 05 01 00 00 00 00\"",
        "",
        "    def __init__(self, conn=None):",
        "        self.sock = None",
        "        self.bt_addr = \"28:2D:7F:C2:05:5B\"",
        "        self.psm = 0x1001",
        "        self.running = False",
        "        self.data_lock = threading.Lock()",
        "        ",
        "        self.horiz_buffer = deque(maxlen=100)",
        "        self.vert_buffer = deque(maxlen=100)",
        "        ",
        "        self.horiz_avg_buffer = deque(maxlen=5)",
        "        self.vert_avg_buffer = deque(maxlen=5)",
        "        ",
        "        self.horiz_peaks = []",
        "        self.horiz_troughs = []",
        "        self.vert_peaks = []",
        "        self.vert_troughs = []",
        "        ",
        "        self.last_peak_time = 0",
        "        self.peak_intervals = deque(maxlen=5)",
        "        ",
        "        self.peak_threshold = 400",
        "        self.direction_change_threshold = 175",
        "        self.rhythm_consistency_threshold = 0.5",
        "        ",
        "        self.horiz_increasing = None",
        "        self.vert_increasing = None",
        "        ",
        "        self.required_extremes = 3",
        "        self.detection_timeout = 15",
        "        ",
        "        self.min_confidence_threshold = 0.7",
        "        ",
        "        self.conn = conn",
        ""
      ]
    }
  }
}