
    name: AirysDark-AI — Android (generated)

    on:
      push:
      pull_request:
      workflow_dispatch:
      workflow_call:

    jobs:
      build:
        runs-on: ubuntu-latest
        permissions:
          contents: write
          pull-requests: write
        steps:
          - uses: actions/checkout@v4

          - uses: actions/setup-python@v5
            with: { python-version: "3.11" }
          - run: pip install requests


- uses: actions/setup-java@v4
  with:
    distribution: temurin
    java-version: "17"
- uses: android-actions/setup-android@v3
- run: yes | sdkmanager --licenses
- run: sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"
          - name: Ensure AirysDark-AI tools
            shell: bash
            run: |
              set -euo pipefail
              mkdir -p tools
              BASE_URL="https://raw.githubusercontent.com/AirysDark-AI/AirysDark-AI_builder/main/tools"
              [ -f tools/AirysDark-AI_detector.py ] || curl -fL "$BASE_URL/AirysDark-AI_detector.py" -o tools/AirysDark-AI_detector.py
              [ -f tools/AirysDark-AI_builder.py ]  || curl -fL "$BASE_URL/AirysDark-AI_builder.py"  -o tools/AirysDark-AI_builder.py
              ls -la tools

          - name: Build (capture)
            id: build
            shell: bash
            run: |
              set -euxo pipefail
              CMD="bash -lc 'set -euo pipefail; run_gradle() {   g=$1; d=$(dirname "$g"); chmod +x "$g" || true;   echo "[Android] using gradle at: $d";   cd "$d";   # collect candidate modules from settings.gradle/settings.gradle.kts includes   mods="";   for s in settings.gradle settings.gradle.kts; do     if [ -f "$s" ]; then       ms=$(grep -E "^[[:space:]]*include\(" "$s" | sed -E "s/.*include\((.*)\).*/\1/" | tr -d "\"'[:space:]" | tr "," "\n" | sed "s/^://");       if [ -n "$ms" ]; then mods="$mods $ms"; fi;     fi;   done;   # add modules that apply the Android application plugin   ms_app=$(git ls-files | grep -E "(^|/)(build.gradle|build.gradle.kts)$" | while read -r f; do     if grep -qE "com\.android\.application" "$f"; then       echo "${f%/*}" | sed -E "s#^\./?##; s#/#:#g";     fi;   done | sed "s#^#:##");   mods="$mods $ms_app";   # common guesses   mods="$mods app mobile android";   # normalize unique module list   umods=""; for m in $mods; do [ -n "$m" ] && case " $umods " in *" $m "*) ;; *) umods="$umods $m";; esac; done;   echo "[Android] candidate modules:$umods";   # try task permutations   set +e;   ./gradlew assembleDebug --stacktrace && exit 0;   for m in $umods; do ./gradlew :$m:assembleDebug --stacktrace && exit 0; done;   ./gradlew assembleRelease --stacktrace && exit 0;   for m in $umods; do ./gradlew :$m:assembleRelease --stacktrace && exit 0; done;   ./gradlew build --stacktrace && exit 0;   exit 1; }; if [ -x ./gradlew ]; then   run_gradle ./gradlew; else   ok=;   for g in $(git ls-files | grep -E "(^|/)gradlew$" | sort); do     run_gradle "$g" && ok=1 && break || true;   done;   [ -n "$ok" ] || { echo "No working gradlew found"; exit 1; }; fi'"
              echo "BUILD_CMD=$CMD" >> "$GITHUB_OUTPUT"
              set +e; bash -lc "$CMD" | tee build.log; EXIT=$?; set -e
              echo "EXIT_CODE=$EXIT" >> "$GITHUB_OUTPUT"
              [ -s build.log ] || echo "(no build output captured)" > build.log
              exit 0
            continue-on-error: true

          # --- Upload build log early so you always get it ---
          - name: Upload build log
            if: always()
            uses: actions/upload-artifact@v4
            with:
              name: android-build-log
              path: build.log
              if-no-files-found: warn
              retention-days: 7

          # --- AI auto-fix block (OpenAI → llama fallback) ---
          - name: Build llama.cpp (CMake, no CURL, in temp)
            if: always() && steps.build.outputs.EXIT_CODE != '0'
            run: |
              set -euxo pipefail
              TMP="${{ runner.temp }}"
              cd "$TMP"
              rm -rf llama.cpp
              git clone --depth=1 https://github.com/ggml-org/llama.cpp
              cd llama.cpp
              cmake -S . -B build -D CMAKE_BUILD_TYPE=Release -DLLAMA_CURL=OFF
              cmake --build build -j
              echo "LLAMA_CPP_BIN=$PWD/build/bin/llama-cli" >> $GITHUB_ENV

          - name: Fetch GGUF model (TinyLlama)
            if: always() && steps.build.outputs.EXIT_CODE != '0'
            run: |
              mkdir -p models
              curl -L -o models/tinyllama-1.1b-chat-v1.0.Q4_K_M.gguf \
                https://huggingface.co/TheBloke/TinyLlama-1.1B-Chat-v1.0-GGUF/resolve/main/tinyllama-1.1b-chat-v1.0.Q4_K_M.gguf

          - name: Attempt AI auto-fix (OpenAI → llama fallback)
            if: always() && steps.build.outputs.EXIT_CODE != '0'
            env:
              PROVIDER: openai
              FALLBACK_PROVIDER: llama
              OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
              OPENAI_MODEL: ${{ vars.OPENAI_MODEL || 'gpt-4o-mini' }}
              MODEL_PATH: models/tinyllama-1.1b-chat-v1.0.Q4_K_M.gguf
              AI_BUILDER_ATTEMPTS: "3"
              BUILD_CMD: ${{ steps.build.outputs.BUILD_CMD }}
            run: python3 tools/AirysDark-AI_builder.py || true

          # --- Upload any auto-fix patch the AI created ---
          - name: Upload AI patch (if any)
            if: always()
            uses: actions/upload-artifact@v4
            with:
              name: android-ai-patch
              path: .pre_ai_fix.patch
              if-no-files-found: ignore
              retention-days: 7

          # --- Upload build outputs (best-effort, cross-ecosystem) ---
          - name: Upload build artifacts
            if: always()
            uses: actions/upload-artifact@v4
            with:
              name: android-artifacts
              if-no-files-found: ignore
              retention-days: 7
              path: |
                build/**
                out/**
                dist/**
                target/**
                **/build/**
                **/out/**
                **/dist/**
                **/target/**
                **/*.so
                **/*.a
                **/*.dll
                **/*.dylib
                **/*.exe
                **/*.bin
                **/outputs/**/*.apk
                **/outputs/**/*.aab
                **/*.whl

          # --- Only open PR if changes exist (use PAT with workflow scope) ---
          - name: Check for changes
            id: diff
            run: |
              git add -A
              if git diff --cached --quiet; then
                echo "changed=false" >> "$GITHUB_OUTPUT"
              else
                echo "changed=true" >> "$GITHUB_OUTPUT"
              fi

          - name: Create PR with AI fixes
            if: steps.diff.outputs.changed == 'true'
            uses: peter-evans/create-pull-request@v6
            with:
              token: ${{ secrets.BOT_TOKEN }}   # PAT with repo + workflow scopes
              branch: ai/airysdark-ai-autofix
              commit-message: "chore: AirysDark-AI auto-fix"
              title: "AirysDark-AI: automated build fix"
              body: |
                This PR was opened automatically by a generated workflow after a failed build.
                - Captured the failing build log
                - Proposed a minimal fix via AI
                - Committed the changes for review
              labels: automation, ci
