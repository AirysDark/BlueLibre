name: BlueLibre AI Autobuilder (Android + Linux)

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build-and-fix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [android, linux]
    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps for autobuilder
        run: pip install requests

      # ---------- ANDROID ENV ----------
      - name: Set up JDK 17
        if: matrix.target == 'android'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Android SDK
        if: matrix.target == 'android'
        uses: android-actions/setup-android@v3

      - name: Accept Android licenses
        if: matrix.target == 'android'
        run: yes | sdkmanager --licenses

      - name: Install Android SDK components
        if: matrix.target == 'android'
        run: |
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Make Gradle wrapper executable
        if: matrix.target == 'android'
        run: chmod +x ./gradlew

      # ---------- LINUX ENV ----------
      - name: Install Linux build deps
        if: matrix.target == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake qtbase5-dev

      # ---------- BUILD ----------
      - name: First build (capture)
        id: build
        run: |
          set -euxo pipefail
          if [ "${{ matrix.target }}" = "android" ]; then
            BUILD_CMD="./gradlew assembleDebug --stacktrace"
          else
            BUILD_CMD="cmake -S . -B build && cmake --build build -j"
          fi
          echo "BUILD_CMD=$BUILD_CMD" >> $GITHUB_OUTPUT
          bash -lc "$BUILD_CMD" | tee build.log
        continue-on-error: true

      # ---------- AI AUTOFIX ----------
      - name: Attempt AI auto-fix with OpenAI
        if: steps.build.outcome != 'success'
        env:
          PROVIDER: openai
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: ${{ vars.OPENAI_MODEL || 'gpt-4.1-mini' }}
          AI_BUILDER_ATTEMPTS: "2"
          BUILD_CMD: ${{ steps.build.outputs.BUILD_CMD }}
        run: |
          python3 tools/ai_autobuilder.py || true

      # ---------- PUSH PATCH ----------
      - name: Push branch and open PR if changes
        if: steps.build.outcome != 'success'
        run: |
          set -eux
          if git diff --quiet HEAD; then
            echo "No changes to commit."
            exit 0
          fi
          BRANCH="fix/${{ matrix.target }}-ai-autobuilder-${{ github.run_id }}"
          git config user.name "ai-autobuilder[bot]"
          git config user.email "ai-autobuilder@users.noreply.github.com"
          git checkout -b "$BRANCH" || git switch -c "$BRANCH"
          git add -A
          git commit -m "AI autobuilder: automated patch for ${{ matrix.target }}" || true
          git push --set-upstream origin "$BRANCH" || true
